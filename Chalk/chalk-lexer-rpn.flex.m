
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_rpn_create_buffer

    #define yy_delete_buffer yy_rpn_delete_buffer

    #define yy_scan_buffer yy_rpn_scan_buffer

    #define yy_scan_string yy_rpn_scan_string

    #define yy_scan_bytes yy_rpn_scan_bytes

    #define yy_init_buffer yy_rpn_init_buffer

    #define yy_flush_buffer yy_rpn_flush_buffer

    #define yy_load_buffer_state yy_rpn_load_buffer_state

    #define yy_switch_to_buffer yy_rpn_switch_to_buffer

    #define yypush_buffer_state yy_rpnpush_buffer_state

    #define yypop_buffer_state yy_rpnpop_buffer_state

    #define yyensure_buffer_stack yy_rpnensure_buffer_stack

    #define yylex yy_rpnlex

    #define yyrestart yy_rpnrestart

    #define yylex_init yy_rpnlex_init

    #define yylex_init_extra yy_rpnlex_init_extra

    #define yylex_destroy yy_rpnlex_destroy

    #define yyget_debug yy_rpnget_debug

    #define yyset_debug yy_rpnset_debug

    #define yyget_extra yy_rpnget_extra

    #define yyset_extra yy_rpnset_extra

    #define yyget_in yy_rpnget_in

    #define yyset_in yy_rpnset_in

    #define yyget_out yy_rpnget_out

    #define yyset_out yy_rpnset_out

    #define yyget_leng yy_rpnget_leng

    #define yyget_text yy_rpnget_text

    #define yyget_lineno yy_rpnget_lineno

    #define yyset_lineno yy_rpnset_lineno

        #define yyget_column yy_rpnget_column

        #define yyset_column yy_rpnset_column

    #define yywrap yy_rpnwrap

    #define yyalloc yy_rpnalloc

    #define yyrealloc yy_rpnrealloc

    #define yyfree yy_rpnfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yy_rpnrestart(yyin ,yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yy_rpnrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yy_rpnrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_rpn_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_rpn_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_rpn_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_rpn_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_rpnpush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yy_rpnpop_buffer_state ( yyscan_t yyscanner );

static void yy_rpnensure_buffer_stack ( yyscan_t yyscanner );
static void yy_rpn_load_buffer_state ( yyscan_t yyscanner );
static void yy_rpn_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_rpn_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_rpn_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_rpn_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_rpn_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yy_rpnalloc ( yy_size_t , yyscan_t yyscanner );
void *yy_rpnrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yy_rpnfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_rpn_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yy_rpnensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_rpn_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yy_rpnensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_rpn_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yy_rpnwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 68
#define YY_END_OF_BUFFER 69
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[675] =
    {   0,
        0,    0,   69,   68,    1,   22,   68,   68,   68,   68,
        5,    6,    3,    7,   57,    9,   68,   14,   66,   62,
       53,   34,   68,   36,   61,   63,   63,   63,   63,   63,
       63,   63,   63,   52,   54,   16,   63,   55,   27,   56,
       28,   68,   68,   68,   68,   68,   68,    1,    0,   40,
       23,   50,   51,    0,   11,   24,    4,   42,   44,    0,
       40,   30,   32,   48,   49,   46,    0,    0,   66,   66,
       42,    0,    0,   16,   13,    0,    8,   10,    0,   67,
       15,   66,   66,   64,   67,   66,   66,   66,   66,    0,
        0,    0,    0,   48,   30,   35,   38,   32,   49,   37,

       67,   63,   63,   63,   63,   63,   63,   63,   58,   63,
       63,   44,   63,   63,   17,   46,   63,   63,   63,   44,
       29,   24,   26,   12,   14,   63,    0,    0,   41,   25,
       43,   45,   41,   31,   33,   47,   43,    2,   67,   67,
       65,    0,   67,   67,   67,   67,    0,    0,    0,    0,
       67,   67,    0,   67,   67,   67,   67,    0,   66,   66,
        0,   66,   66,   66,   66,   66,   66,    0,    0,   31,
       39,   33,   67,   67,   67,   67,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   42,   63,   63,   11,   28,
       45,   63,   46,   47,   25,   18,   20,    0,    0,    0,

        0,    0,   67,   67,    0,    0,   67,   67,    0,   67,
       67,   67,   67,   67,   67,    0,    0,    0,    0,   67,
       67,   67,    0,    0,   67,   67,    0,   67,   67,   67,
       67,   67,    0,    0,   67,   67,   66,   66,   64,   66,
       66,   66,   66,    0,    0,    0,   66,   64,   66,   66,
       66,   66,   66,   66,   67,   64,   67,   67,    0,   67,
       67,   67,   67,    0,    0,   67,   67,   67,   67,   67,
       67,   67,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   60,   59,
       19,   21,   67,   67,   67,   67,   67,    0,   67,    0,

       67,   67,   67,   67,   67,   67,   67,   67,    0,   67,
       65,   67,   67,   67,   67,   65,   67,   67,   67,   67,
       67,    0,   67,    0,    0,    0,    0,   67,    0,   67,
       67,   67,   67,   67,   67,   67,   67,    0,   67,   65,
       67,   67,   67,   67,    0,   66,   66,    0,    0,    0,
        0,   66,   66,   66,   66,   66,   66,   66,   66,   66,
        0,   67,   67,    0,   67,   67,    0,   67,   67,   67,
       67,   67,   67,    0,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,    0,   67,   67,   67,   67,   67,
       67,   67,   65,   63,   63,   63,   63,   67,   67,   67,

        0,   67,   67,   67,   65,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,    0,   67,
       67,   67,   65,   67,    0,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   64,   66,   66,   66,
       66,   66,   66,   64,   67,   66,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   64,   67,   67,   67,
       67,   67,   67,    0,   67,   67,   67,   67,   67,   67,
       67,   67,    0,   67,   65,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       63,   63,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   65,   67,   64,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       65,   67,   67,   67,   67,    0,   66,   66,   66,   66,
       66,   66,   66,   67,   66,   66,   66,   66,   66,   64,
       66,   67,   67,   67,    0,   67,   67,   67,   65,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       65,    0,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   65,   65,
        0,   67,   67,   67,   67,   67,   67,   67,    0,   67,

       67,   66,   64,   66,   64,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   65,   65,
        0,   67,   67,   67,   67,   67,   67,   67,    0,   67,
       67,   65,    0,   67,   67,   65,   67,   65,   64,   65,
       67,   67,   67,   67,   65,    0,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   65,   67,
       65,   67,   65,   65,    0,   67,   67,   65,   65,   65,
       67,   65,   65,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    4,    1,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   29,   30,   31,   32,
       33,   34,   35,   29,   29,   36,   29,   37,   38,   39,
       29,   40,   41,   42,   29,   29,   29,   43,   29,   29,
       44,   45,   46,   47,   48,   49,   50,   29,   29,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   29,   64,   65,   66,   29,   29,   29,   67,
       29,   29,   68,   69,   70,   71,    1,   72,    1,    1,
        1,    1,   73,    1,    1,   74,    1,    1,   75,    1,
        1,    1,   76,   77,   78,    1,    1,    1,    1,    1,
       79,    1,   80,   81,   82,   83,   84,   85,    1,   86,
        1,    1,    1,    1,    1,   87,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   88,   89,    1,    1,    1,
        1,    1,   90,    1,   91,   92,   93,    1,    1,    1,
       94,    1,    1,   95,   96,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,   97,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   98,   99,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,  100,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[102] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    2,    3,
        2,    1,    1,    1,    1,    1,    1,    4,    5,    1,
        6,    1,    1,    1,    1,    1,    7,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1,    1,    1,    2,    1,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    8,    1,    1,    3,    3,    1,

        1
    } ;

static const flex_int16_t yy_base[866] =
    {   0,
        0,    0, 1236, 8309,  100,   79,  103,  103,  109,   93,
     8309, 8309,   94,   99, 8309, 1201, 1203, 1193,  158,  107,
     8309,  109, 1189,  114, 8309,  250,  231,   87,  105,  111,
       95,  110,  109, 8309, 8309,   98,  167, 8309, 1137, 8309,
     1174,   94,   91, 1128, 1110, 1098, 1082,  182, 1087, 1145,
     8309, 8309, 8309,  146,  155,  167, 8309,  180,  186, 1163,
      191,  192,  201,  185,  198,  202,  255, 1139,  312, 1122,
      288,  178, 1137, 1107, 8309, 1108, 8309, 8309,  192,  331,
     8309,  131,  153, 8309,  357,    0, 1106,  406,  431, 1038,
     1046, 1029, 1079, 1075, 1065, 8309, 1064, 1061, 8309, 8309,

      476,  501,    0,  549,  171,  183,  574,  162,    0,  181,
      207, 1060,  186,  211, 8309, 1059,  619,    0,  350, 1049,
     8309, 1043, 8309, 1035, 1030, 8309,  203,  208, 8309,  227,
      260,  261,  273,  279,  293,  301, 8309, 8309,  436,  492,
     8309, 1037,  644,    0,  692,  717,  958,  966,  958, 1011,
      635,  698, 1009,  762,  810,  824,  872,  950,  858,  906,
      326,  920,  954,  996,  202,  294,  968,  293,  929, 8309,
     8309, 8309, 1002, 1016, 1064, 1112, 1050, 1160, 1098, 1208,
     1146, 1194, 1256, 1242,  945, 1290,  241, 1304,  978,  301,
     8309, 1396,  360, 8309, 8309,  963,  959,  904,  905,  151,

      883,  945, 1401, 1457,  889,  941,  264,  292,  455, 1462,
     1519,  937,  326,  359, 1533,  297,  873,  929,  921, 1581,
     1595,  579,  921,  852,  338,  345,  469, 1629, 1643,  916,
      355,  372,  315,  598, 1662, 1688, 1338, 1692, 8309,  297,
      298,  441,  453,  846,  854,  842,  554,  300, 1737, 1754,
     1793, 1799, 1856, 1862, 1387, 8309, 1868, 1895,  894, 1960,
     1965, 1979, 2061,  826,  835, 2036, 2094, 2110, 2155, 2180,
     2228,  836, 2253, 2301, 2326,  829,  337,  214,  868,    0,
      455,  821, 2371, 2396,  474,  815,  368,  857, 2444,  856,
     8309, 8309, 2028, 2469,  852,  388,  405,  166, 2323,  612,

     2463, 2477,  770,  757, 2526, 2571,  830,  418,  760,  478,
        0, 2587, 2632, 2680, 2694, 8309, 2646, 2728,  820,  435,
      503,  572, 2489, 1352, 1434,  756,  781, 2742,  738, 2761,
     2787,  704,  693, 2836, 2862,  766,  443,  693,  576,    0,
      796, 2843,    0,  712,  672, 2954, 2935,  458,  672,  726,
      720, 2960, 3017,  464,  515, 3036, 3062,  706,  553,  616,
      700, 3111, 3137,  701,  607,  623,  755, 3156, 3182,  698,
      641,  691, 3231,  601, 3238, 3257, 3264, 3330,  610,  604,
     3356, 3375, 3438, 3457,  611,  667,  694,    0,    0,  677,
      697,  714,    0, 3549, 3530,  735, 3641, 3424, 3432,  631,

      607,  673,  704,  764,    0, 1525, 3575,    0,  621, 3646,
     3703, 3748,  663,  750,  776, 3717, 3722,  617,  582,  646,
      760,  790,    0, 3782,  345, 3830, 3844, 3892, 3940, 2666,
     3823,    0,  599, 3926, 3906, 3974, 3988, 3992, 4022, 4049,
     4094, 4119, 4167, 8309, 4153, 4201,  643,  767,  791,  562,
      556, 4215, 4249,  614,  774,  838,    0, 4263, 4294,  597,
      784,  884, 2980, 1372, 4308, 4328,  513,  509, 4356, 4390,
      584,  808,  500,  886,    0, 4438, 4452, 4500, 4548, 4342,
     4404,  518, 4562, 4610, 1319,    0,  561,  822,  932, 4486,
     4596, 4644, 4534, 4658, 3774, 4672, 4706, 4754, 4768, 4816,

     4802, 4850,  559,  870,  934,    0, 4720, 4864, 4898, 4912,
      558,  918,  980, 4884, 4946, 4960, 4994, 5008, 5056, 5104,
     5042,  801, 5070, 5090,  498,  535, 5152, 5200, 5186, 5234,
      536,  925,  982, 3099,  983,  985,  456,  457,  353, 1033,
     5326, 5138, 5300,  480,  456,  519,  966, 1072,    0, 4740,
     5292,    0,  462, 5392, 5397, 5454,  500,  973, 1076, 5468,
     5286, 5449, 5525, 5550, 5598, 5623, 1089, 5617, 5647,  451,
     5680,  487, 5696, 5729, 5745, 5790,  473, 1014, 1120, 1132,
     5762, 5824,  426, 5855, 5889,  429, 1021, 1126,    0, 5869,
      422, 5903, 5951, 5985, 5999,  420, 1129, 1172,  400, 1276,

     5937, 6091, 6033, 6183, 6125, 6149, 6158, 6085, 6164, 6256,
     6275, 6281, 6338, 6383, 6399,  381, 1158, 1216,    0, 6432,
      351, 6448, 6481, 6497, 6542,  307, 1206, 1220,  293, 1413,
     6514, 6607,  274, 1496, 6576, 6641, 1655, 6621, 6690, 6704,
     1511, 6723, 6749,  141, 6766,  122, 6815, 6831, 6876, 6901,
      113, 1219, 1225, 6946, 6971,   95, 1273, 1302,    0, 1756,
     6995, 1819, 7004, 1558, 1420, 1729,  502,    0, 1759, 1823,
     1917,    0, 1922, 8309, 7103, 7110, 7116, 7120, 7125, 7132,
     7139, 7144, 7151, 7156, 7163, 7168, 7175, 7182, 7187, 7191,
     7196, 7201, 7208, 7215, 7220, 7225, 7232, 7239, 7246, 7253,

     7260, 7267, 7274, 7281, 7286, 7293, 7298, 7303, 7308, 7315,
     7322, 7327, 7332, 7337, 7344, 7349, 7356, 7361, 7366, 7373,
     7380, 7385, 7392, 7399, 7404, 7411, 7418, 7425, 7430, 7437,
     7444, 7451, 7456, 7461, 7468, 7475, 7482, 7489, 7496, 7501,
     7506, 7513, 7518, 7525, 7532, 7537, 7544, 7551, 7556, 7561,
     7568, 7573, 7578, 7583, 7590, 7597, 7604, 7611, 7618, 7625,
     7632, 7639, 7646, 7651, 7658, 7665, 7672, 7679, 7686, 7693,
     7698, 7705, 7712, 7719, 7724, 7731, 7738, 7745, 7752, 7759,
     7764, 7769, 7776, 7783, 7790, 7797, 7804, 7811, 7818, 7825,
     7832, 7839, 7846, 7851, 7858, 7865, 7872, 7879, 7886, 7893,

     7900, 7905, 7912, 7919, 7924, 7931, 7936, 7941, 7948, 7955,
     7962, 7967, 7974, 7981, 7988, 7993, 8000, 8007, 8012, 8019,
     8026, 8031, 8036, 8043, 8048, 8055, 8062, 8069, 8074, 8079,
     8086, 8091, 8098, 8105, 8112, 8119, 8126, 8133, 8138, 8145,
     8152, 8159, 8166, 8171, 8176, 8183, 8188, 8195, 8202, 8207,
     8214, 8221, 8226, 8233, 8240, 8245, 8252, 8259, 8264, 8269,
     8276, 8283, 8288, 8295, 8300
    } ;

static const flex_int16_t yy_def[866] =
    {   0,
      674,    1,  674,  674,  674,  674,  675,  676,  676,  677,
      674,  674,  674,  674,  674,  674,  678,  674,  679,  674,
      674,  674,  674,  674,  674,  680,  680,   27,   27,   27,
       27,   27,   27,  674,  674,  674,  681,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  675,  675,  675,  674,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  676,  678,  679,   69,
      676,  677,  677,  674,  674,  674,  674,  674,  674,  682,
      674,   69,   69,  674,  683,   69,   69,  684,  684,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      685,  686,   27,  687,   27,   27,  687,   27,   27,  107,
       27,   27,   27,   27,  674,  674,  686,   27,  681,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  675,
      675,  675,  675,  675,  675,  675,  674,  674,  688,  688,
      674,  674,  682,  143,  689,  689,  674,  674,  674,  690,
      691,  691,  674,  692,  692,  693,  693,  674,  694,  694,
      695,  696,  696,  163,  163,  163,  697,  674,  674,  674,
      674,  674,  698,  698,  699,  699,  700,  701,  700,  701,
      702,  703,  703,  704,  183,  705,  183,  705,  183,  188,
      674,  704,  188,  674,  674,  674,  674,  674,  674,  674,

      674,  706,  707,  707,  674,  674,  204,  204,  708,  709,
      709,  211,  211,  211,  710,  674,  674,  674,  711,  712,
      712,  674,  674,  674,  221,  221,  713,  714,  714,  229,
      229,  229,  674,  715,  716,  716,  717,  717,  674,  238,
      238,  238,  238,  674,  674,  674,  238,  238,  718,  718,
      719,  719,  720,  720,  674,  674,  721,  721,  674,  722,
      722,  723,  723,  674,  674,  724,  724,  725,  725,  726,
      726,  271,  727,  727,  728,  274,  274,  274,  274,  274,
      274,  274,  729,  729,  284,  284,  284,  284,  730,  284,
      674,  674,  731,  731,  294,  294,  294,  674,  732,  733,

      734,  734,  294,  294,  735,  735,  306,  306,  674,  306,
      306,  736,  736,  737,  737,  674,  738,  738,  318,  318,
      318,  674,  739,  740,  740,  674,  674,  741,  742,  743,
      743,  318,  318,  744,  744,  335,  335,  674,  335,  335,
      745,  745,  342,  342,  674,  746,  747,  674,  674,  674,
      748,  749,  749,  353,  353,  750,  750,  357,  357,  357,
      751,  752,  752,  674,  363,  363,  753,  754,  754,  369,
      369,  369,  755,  674,  756,  756,  757,  757,  376,  376,
      758,  758,  759,  759,  674,  378,  378,  369,  369,  369,
      369,  369,  369,  760,  760,  395,  761,  762,  762,  399,

      674,  399,  399,  399,  399,  763,  763,  407,  407,  764,
      765,  765,  412,  412,  412,  766,  766,  417,  674,  417,
      417,  417,  417,  767,  674,  768,  768,  769,  769,  770,
      770,  431,  431,  771,  767,  772,  773,  774,  774,  775,
      775,  776,  776,  674,  777,  777,  446,  446,  446,  446,
      446,  778,  778,  453,  453,  453,  453,  779,  779,  459,
      459,  459,  780,  781,  782,  782,  459,  459,  783,  783,
      470,  470,  674,  470,  470,  784,  784,  785,  785,  786,
      786,  481,  787,  787,  459,  459,  459,  459,  459,  788,
      789,  790,  791,  792,  793,  793,  794,  794,  795,  795,

      796,  796,  502,  502,  502,  502,  797,  798,  799,  799,
      510,  510,  510,  800,  801,  801,  802,  802,  803,  803,
      798,  804,  805,  805,  524,  806,  807,  807,  808,  808,
      530,  530,  530,  528,  528,  528,  528,  528,  528,  528,
      809,  810,  810,  543,  674,  543,  543,  543,  543,  811,
      811,  551,  551,  812,  813,  813,  556,  556,  556,  814,
      815,  815,  816,  816,  817,  817,  818,  819,  819,  569,
      820,  821,  822,  822,  823,  823,  576,  576,  576,  824,
      825,  825,  582,  826,  826,  585,  585,  585,  585,  827,
      828,  829,  829,  830,  830,  595,  595,  595,  831,  831,

      832,  833,  834,  833,  835,  836,  837,  838,  838,  839,
      839,  840,  840,  841,  841,  615,  615,  615,  615,  842,
      843,  844,  844,  845,  845,  625,  625,  625,  846,  846,
      847,  848,  849,  849,  850,  851,  852,  853,  854,  854,
      855,  856,  856,  643,  857,  858,  859,  859,  860,  860,
      650,  650,  650,  861,  861,  655,  655,  655,  655,  862,
      863,  864,  865,  852,  855,  855,  643,  650,  862,  864,
      855,  643,  855,    0,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674
    } ;

static const flex_int16_t yy_nxt[8411] =
    {   0,
        4,    5,    5,    4,    4,    6,    7,    8,    8,    4,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   27,
       28,   27,   27,   27,   29,   27,   30,   31,   27,   27,
       27,   32,   33,   34,    4,   35,   36,   37,    4,   26,
       27,   28,   27,   27,   27,   29,   27,   27,   27,   27,
       30,   31,   27,   27,   27,   32,   33,   38,   39,   40,
       41,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   42,   43,   44,   45,    4,   46,

       47,   48,   48,   50,   57,   51,   55,   56,   74,   57,
       67,   67,  367,   67,   58,   59,   67,   67,   76,   71,
       75,   68,  108,   69,  115,   77,   52,   68,   93,   69,
      367,   52,   94,   95,  112,   96,  109,   73,   98,   99,
      100,  110,  646,  113,  116,  108,  114,   60,  111,  150,
       67,   61,   57,   62,   63,   52,   67,  109,  112,   64,
       65,   57,  110,   53,  113,   82,   83,   84,   83,  124,
      114,  150,  111,   57,   67,   67,   85,   67,   86,   48,
      125,  122,  123,   48,   48,   68,   57,  117,   88,   57,
       60,   57,   57,  130,   49,   66,   88,   57,   57,   60,

      186,  150,  188,  667,   57,   83,  131,   57,   57,   88,
      138,   60,  132,  189,  119,  138,  192,  133,  134,  161,
       89,  186,   73,  126,   60,  674,  188,  135,  136,   60,
       60,  674,   85,   57,  189,   60,   60,  192,   82,   83,
       84,   83,   60,  185,  126,   60,   60,  674,  190,  101,
      193,  102,   90,  141,  141,   91,   92,   82,   83,   84,
       83,  104,   67,   67,  247,   67,   57,   57,  101,  104,
      102,   60,  190,   68,  193,   69,   49,  674,  106,   57,
      104,  674,  104,  196,  197,   57,  105,  126,  104,  198,
      199,  200,  201,  107,  633,   67,   67,  106,   67,   57,

      288,  104,   67,  287,   60,   60,   68,   57,   69,  674,
      105,  161,  107,  629,  137,   85,  101,   60,  101,   82,
       83,   84,   83,   60,  367,   90,  296,  121,   91,   92,
       85,  104,   86,  234,  234,   67,  234,   60,  139,  140,
      141,  140,   88,  209,   90,   60,  235,   91,   92,  142,
       88,  143,  104,  248,  296,  674,  247,   67,   67,   83,
       67,  145,  674,   88,  151,  152,  141,  152,   68,  145,
      117,  621,  227,  234,   89,  153,  209,  154,  140,  255,
       84,   84,  145,  299,  141,  141,  194,  156,  310,  227,
      104,  244,  244,  146,  244,  156,  395,  119,  367,  394,

      320,  323,  141,  141,  152,  209,   90,  320,  156,   91,
       92,  104,  540,  159,  160,   84,  160,  339,  311,  157,
      599,  310,  209,  161,  101,  147,  162,  288,  148,  149,
      397,  340,  239,  239,  339,  209,  164,  227,  159,  160,
       84,  160,  591,  139,  164,  141,  227,  345,  161,  101,
      404,  162,  227,  160,  158,  149,  202,  164,  161,  101,
      227,  164,  300,  300,  405,  300,  203,  404,  165,  164,
      161,  101,  674,  150,  203,  301,  329,  329,  160,  329,
      310,  674,  164,  151,  152,  141,  152,  203,  635,  330,
      209,  674,  150,  166,  153,  209,  173,  422,  204,  139,

       90,  141,  300,   91,   92,  339,  175,  572,   82,   83,
       84,   83,  202,  631,  175,  346,  329,  367,  538,   85,
      227,  102,  203,  152,  607,   90,  448,  175,   91,   92,
      203,  178,  674,  205,  149,  244,  367,  311,  176,  178,
      310,  606,  548,  203,  255,  239,  239,  244,  179,  674,
      345,  345,  178,  161,  204,  526,  159,  160,   84,  160,
      601,  672,  423,  180,  667,  422,  161,  101,  674,  181,
      161,  161,  101,  158,  149,  227,  209,  448,  367,  183,
      560,  159,  160,   84,  160,  554,  322,  183,  239,  205,
      149,  161,  101,  227,  181,   90,  184,  323,   91,   92,

      183,  367,  324,  674,  183,  234,  234,  674,  234,  324,
      324,  185,  183,  248,  367,  456,  346,  324,  235,  300,
      300,  184,  300,  324,  674,  183,   82,   83,   84,   83,
      324,  161,  301,  161,  324,  340,  187,   85,  339,  102,
      674,  325,  151,   90,  141,  234,   91,   92,  244,  178,
      674,  139,  140,  141,  140,  219,  674,  178,  367,  300,
      161,  514,  142,  227,  143,  220,  179,  507,   90,  461,
      178,   91,   92,  220,  145,  457,  326,  246,  456,  422,
      209,  180,  145,  494,  674,  461,  220,  463,  141,  141,
      209,  140,  493,  404,  367,  145,  490,  221,  674,  207,

      208,  141,  208,  474,  674,  151,  146,  141,  367,  209,
      142,  674,  210,   90,  367,  367,   91,   92,  219,  463,
      361,  209,  212,  161,  207,  208,  141,  208,  220,  488,
      212,  367,  205,  149,  209,  142,  220,  210,  147,  208,
      351,  148,  149,  212,  218,  329,  329,  212,  329,  220,
      475,  444,  161,  474,  213,  212,  488,  436,  330,  474,
      221,  674,  464,  464,  208,  464,  404,  209,  212,  151,
      152,  141,  152,  475,  435,  465,  474,  227,  434,  214,
      223,  209,  154,  227,  161,  329,  147,  674,  674,  148,
      149,  161,  156,  209,  491,  205,  149,  396,  674,  323,

      156,  367,  464,  341,  341,  141,  341,  227,  161,  152,
      141,  147,  505,  156,  148,  149,  342,  151,  152,  141,
      152,  599,  422,  405,  157,  367,  404,  425,  223,  539,
      154,  225,  226,  141,  226,  506,  541,  227,  505,  367,
      156,  227,  223,  341,  228,  410,  548,  209,  156,  423,
      540,  674,  422,  539,  230,  161,  224,  152,  344,  158,
      149,  156,  230,  600,  674,  159,  160,   84,  160,  209,
      474,  226,  157,  674,  674,  230,  150,  397,  162,  225,
      226,  141,  226,  396,  548,  674,  231,  209,  164,  227,
      223,  394,  228,  205,  149,  393,  164,  457,  205,  149,

      541,  367,  230,  367,  224,  160,  374,  158,  149,  164,
      230,  373,  364,  159,  160,   84,  160,  349,  224,  226,
      165,  158,  149,  230,  150,  348,  162,  237,  238,  239,
      238,  347,  505,  227,  232,  227,  164,  328,   85,  327,
      240,  219,  161,  549,  164,  475,  548,  255,  474,  367,
      242,  209,  316,  160,  209,   91,   92,  164,  242,  299,
      298,  237,  238,  239,  238,  202,  224,  238,  165,  158,
      149,  242,  101,  126,  240,  249,  250,   84,  250,  126,
      588,  126,  243,  367,  242,  292,   85,  533,  251,  291,
      367,  549,  242,  506,  548,  674,  505,  227,  253,  161,

      674,  238,  674,   91,   92,  242,  253,  287,  256,  257,
      258,  141,  258,  161,  244,  250,  243,  245,  246,  253,
      259,  233,  260,  257,  258,  141,  258,  222,  548,  218,
      254,  209,  262,  217,  259,  618,  260,  216,  227,  589,
      262,  603,  588,  215,  533,  538,  262,  604,  244,  258,
      674,  245,  246,  262,  262,  206,   81,   82,   83,   84,
       83,   75,   90,  258,  263,   91,   92,  262,  101,  195,
      102,  266,  267,  141,  267,  191,  579,  345,  263,  345,
      178,  227,  259,  588,  268,  194,  191,  172,  178,  367,
      171,  170,   53,  367,  270,  538,  264,  179,  141,  265,

      149,  178,  270,   53,  169,   82,   83,   84,   83,  629,
      264,  267,  180,  265,  149,  270,  150,  168,  102,  266,
      267,  141,  267,  167,  101,  123,  271,  345,  178,  227,
      259,  549,  268,  115,  548,  619,  178,  209,  618,  674,
      101,  141,  270,  227,   90,  179,  227,   91,   92,  178,
      270,  630,  633,  237,  238,  239,  238,  674,  264,  267,
      180,  265,  149,  270,   85,  674,  278,  159,  160,   84,
      160,  129,   48,  122,  272,  367,  280,  161,  101,  632,
      181,  128,  579,  127,  280,  589,  205,  149,  588,  227,
      274,  598,  674,  281,  634,   91,   92,  280,  274,  126,

      121,  237,  238,  239,  238,  120,  264,  275,  282,  265,
      149,  274,  101,   97,  278,  159,  160,   84,  160,   81,
      618,   79,  276,  367,  284,  161,  101,   78,  181,  205,
      149,  636,  284,  367,  598,  674,  367,  367,  274,  674,
      244,  285,  367,  245,  246,  284,  274,  674,  674,  159,
      160,   84,  160,  674,   90,  275,  286,   91,   92,  274,
      150,  674,  181,  237,  238,  239,  238,  674,  658,  674,
      277,  674,  183,  161,  101,  619,  278,  674,  618,  659,
      183,  653,  658,  674,  668,  141,  284,  653,  244,  184,
      367,  245,  246,  183,  284,  674,  599,   82,   83,   84,

       83,  674,   90,  285,  185,   91,   92,  284,  101,  674,
      102,   82,   83,   84,   83,  674,  137,  674,  286,  367,
      104,  674,  101,  674,  102,  674,  468,  674,  104,  674,
      674,  674,  674,  674,  289,  658,  674,  106,  637,   91,
       92,  104,  104,  674,  674,  237,  238,  239,  238,  543,
      244,  106,  107,  245,  246,  289,  150,  543,  240,  234,
      234,  659,  234,  674,  658,  674,  107,  674,  242,  161,
      543,  674,  235,  205,  149,  674,  242,  674,  674,  464,
      464,  544,  464,  674,   90,  238,  674,   91,   92,  242,
      674,  674,  465,  674,  322,  674,  239,  674,   90,  234,

      243,   91,   92,  159,  160,   84,  160,  674,  207,  208,
      141,  208,  674,  161,  101,  674,  181,  324,  209,  464,
      674,  293,  141,  674,  674,  324,  183,  674,  674,  674,
      674,  295,  290,  629,  183,  245,  246,  674,  324,  295,
      665,  234,  234,  184,  234,  674,  674,  183,  208,  325,
      674,  161,  295,  674,  235,  674,  290,  674,  185,  674,
      674,  674,  674,  296,  207,  208,  141,  208,  674,  303,
      304,  141,  304,  674,  209,  660,  674,  293,  674,  674,
      142,  234,  305,  674,  326,  246,  674,  295,  674,  674,
       90,  674,  307,   91,   92,  295,  424,  674,  205,  149,

      307,  674,  674,  674,  208,  141,  674,  674,  295,  304,
      205,  149,  674,  307,  674,  674,  633,  674,  674,  297,
      141,  674,  674,  674,  308,  674,  303,  304,  141,  304,
      674,  665,  406,  406,  141,  406,  674,  142,  674,  305,
      139,  140,  141,  140,  674,  407,  674,  674,  674,  307,
      674,  142,  674,  312,  205,  149,  309,  307,  662,  148,
      149,  674,  674,  314,  674,  674,  304,  141,  674,  674,
      307,  314,  406,  666,  674,  674,  674,  674,  599,  674,
      140,  308,  674,  674,  314,  674,  674,  409,  225,  226,
      141,  226,  674,  205,  149,  315,  674,  674,  227,  674,

      674,  317,  225,  226,  141,  226,  674,  674,  205,  149,
      674,  319,  227,  309,  674,  317,  148,  149,  674,  319,
      600,  674,  205,  149,  674,  319,  674,  147,  226,  674,
      148,  149,  319,  319,  674,  674,  332,  333,  141,  333,
      674,  674,  226,  320,  674,  674,  319,  223,  674,  334,
      332,  333,  141,  333,  674,  205,  149,  321,  674,  336,
      674,  223,  674,  334,  141,  674,  674,  336,  674,  341,
      341,  141,  341,  336,  674,  599,  333,  674,  205,  149,
      336,  336,  342,  674,  674,  674,  674,  674,  674,  674,
      333,  337,  205,  149,  336,  341,  341,  141,  341,  237,

      238,  239,  238,  674,  674,  337,  674,  674,  342,  341,
      150,  674,  240,  674,  664,  674,  674,  637,  674,  674,
      674,  674,  242,  338,  344,  674,  158,  149,  674,  674,
      242,  674,  674,  674,  674,  341,  674,  338,  141,  238,
      158,  149,  674,  242,  249,  674,   84,  674,  674,  665,
      344,  674,  205,  149,  243,  350,  345,  351,  674,  205,
      149,  249,  674,   84,  674,  141,  674,  352,  141,  674,
      674,  674,  350,  674,  351,  352,  629,  674,  674,  629,
      674,  674,  345,  674,  352,  205,  149,  674,  352,  245,
      246,  671,  352,  674,  674,  674,  674,  674,  674,  353,

      249,  250,   84,  250,  674,  352,  249,  250,   84,  250,
      674,   85,  674,  251,  674,  669,  353,   85,  660,  251,
      674,  630,  674,  253,  674,  674,  205,  149,  141,  253,
      674,  253,  141,  674,   91,   92,  674,  253,  674,  633,
      250,  674,  674,  633,  253,  674,  250,  674,  674,  674,
      253,   91,   92,  205,  149,  254,  205,  149,  674,  674,
      674,  254,  674,  354,  355,   84,  355,  674,  674,  354,
      355,   84,  355,  161,   85,  257,  356,  141,  670,  161,
       85,  662,  356,  674,  674,  634,  358,   90,  361,  674,
       91,   92,  358,   90,  358,  674,   91,   92,  362,  674,

      358,  674,  257,  355,  141,  674,  362,  358,  674,  355,
      674,  674,  674,  358,  674,  361,  205,  149,  359,  362,
      205,  149,  674,  674,  360,  362,  141,  674,  674,  674,
      363,  141,  674,  362,  674,  674,  674,  665,  674,  674,
      674,  674,  665,  674,  674,  674,  362,  674,  674,  674,
       90,  674,  674,   91,   92,  674,   90,  363,  674,   91,
       92,  674,  674,  674,  674,  205,  149,  257,  258,  141,
      258,  674,  257,  258,  141,  258,  673,  674,  259,  671,
      260,  674,  674,  259,  666,  260,  365,  366,  141,  366,
      262,  674,  205,  149,  674,  262,  367,  259,  262,  368,

      674,  674,  674,  262,  674,  674,  674,  258,  674,  370,
      674,  262,  258,  674,  205,  149,  262,  370,  674,  205,
      149,  674,  263,  674,  674,  674,  366,  263,  674,  674,
      370,  674,  674,  674,  674,  304,  304,  141,  304,  674,
      674,  371,  674,  266,  267,  141,  267,  674,  398,  674,
      674,  674,  674,  674,  264,  674,  375,  265,  149,  264,
      674,  674,  265,  149,  674,  674,  377,  674,  365,  366,
      141,  366,  674,  264,  377,  304,  265,  149,  367,  259,
      674,  368,  674,  267,  674,  674,  674,  377,  674,  674,
      400,  370,  674,  674,  674,  674,  674,  674,  378,  370,

      674,  266,  267,  141,  267,  674,  674,  674,  366,  674,
      674,  674,  370,  674,  375,  674,  674,  379,  380,  141,
      380,  674,  401,  372,  377,  205,  149,  674,  259,  674,
      381,  674,  377,  205,  149,  674,  674,  674,  674,  674,
      383,  267,  674,  674,  674,  377,  674,  674,  383,  674,
      674,  674,  674,  674,  674,  264,  378,  380,  265,  149,
      674,  383,  379,  380,  141,  380,  674,  674,  674,  674,
      674,  674,  384,  259,  674,  381,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  383,  674,  386,  387,  141,
      387,  205,  149,  383,  674,  674,  674,  367,  259,  674,

      388,  674,  380,  674,  385,  674,  383,  265,  149,  674,
      390,  674,  674,  674,  674,  674,  674,  384,  390,  674,
      674,  674,  674,  674,  674,  674,  674,  387,  674,  674,
      674,  390,  674,  674,  674,  386,  387,  141,  387,  674,
      674,  674,  391,  674,  674,  367,  259,  674,  388,  385,
      674,  674,  265,  149,  674,  674,  674,  674,  390,  674,
      237,  238,  239,  238,  674,  674,  390,  674,  674,  674,
      674,  101,  674,  278,  385,  387,  674,  265,  149,  390,
      674,  674,  674,  280,  674,  674,  674,  674,  674,  674,
      392,  280,  674,  674,  674,  674,  674,  674,  674,  674,

      281,  674,  674,  674,  280,  674,  674,  674,  237,  238,
      239,  238,  674,  674,  674,  282,  674,  674,  161,  101,
      674,  278,  385,  674,  674,  265,  149,  674,  674,  674,
      139,  280,  141,  159,  160,   84,  160,  674,  674,  280,
      674,  674,  674,  202,  150,  674,  181,  244,  281,  674,
      245,  246,  280,  203,  674,  674,  274,  674,  674,  674,
      674,  203,  674,  282,  274,  674,  674,  674,  674,  674,
      674,  674,  674,  275,  203,  674,  674,  274,  237,  238,
      239,  238,  674,  674,  674,  204,  674,  674,  276,  101,
      674,  278,  674,  674,  674,  244,  674,  674,  245,  246,

      674,  284,  674,  237,  238,  239,  238,  674,  674,  284,
      674,  674,  674,  161,  101,  674,  278,  674,  285,  674,
      205,  149,  284,   91,   92,  674,  284,  674,  674,  674,
      674,  674,  674,  286,  284,  674,  674,  674,  674,  674,
      674,  674,  674,  285,  674,  674,  674,  284,  674,  674,
      674,  159,  160,   84,  160,  674,  674,  674,  286,  674,
      674,  161,  101,  674,  181,  244,  674,  674,  245,  246,
      406,  406,  141,  406,  183,  674,  303,  304,  141,  304,
      674,  674,  183,  407,  406,  406,  141,  406,  674,  398,
      244,  184,  674,  245,  246,  183,  151,  407,  141,  402,

      674,  674,  674,  674,  674,  674,  185,  402,  674,  219,
      406,  674,  674,  674,  674,  674,  304,  674,  674,  220,
      402,  674,  674,  674,  406,  409,  674,  220,  674,  674,
      674,  403,  674,  303,  304,  141,  304,  674,   90,  409,
      220,   91,   92,  674,  142,  674,  305,  674,  674,  674,
      674,  221,  674,  674,  674,  674,  307,  401,  674,  674,
      205,  149,  674,  401,  307,  674,  205,  149,  674,  674,
      674,  401,  674,  304,  205,  149,  674,  307,  303,  304,
      141,  304,  674,  674,  674,  674,  205,  149,  308,  142,
      674,  305,  674,  674,  139,  140,  141,  140,  674,  674,

      674,  307,  674,  674,  674,  142,  674,  312,  674,  307,
      674,  674,  674,  674,  674,  674,  674,  314,  304,  674,
      309,  674,  307,  148,  149,  314,  674,  674,  674,  674,
      674,  674,  674,  308,  140,  674,  674,  674,  314,  139,
      140,  141,  140,  674,  674,  674,  674,  674,  674,  315,
      142,  674,  312,  333,  333,  141,  333,  674,  674,  674,
      674,  674,  314,  674,  674,  309,  416,  674,  148,  149,
      314,  674,  674,  430,  430,  141,  430,  674,  674,  140,
      674,  147,  674,  314,  148,  149,  431,  207,  208,  141,
      208,  674,  674,  333,  315,  674,  674,  209,  142,  674,

      411,  207,  208,  141,  208,  674,  674,  674,  418,  674,
      413,  209,  142,  430,  411,  674,  674,  674,  413,  674,
      674,  674,  674,  674,  413,  674,  147,  208,  433,  148,
      149,  413,  413,  674,  674,  332,  333,  141,  333,  674,
      419,  208,  414,  205,  149,  413,  674,  674,  416,  151,
      152,  141,  152,  674,  674,  674,  415,  674,  420,  674,
      223,  674,  426,  205,  149,  674,  420,  674,  430,  430,
      141,  430,  428,  674,  147,  333,  674,  148,  149,  420,
      428,  431,  674,  674,  674,  674,  674,  674,  147,  152,
      421,  148,  149,  428,  430,  430,  141,  430,  674,  674,

      674,  674,  674,  674,  429,  674,  674,  431,  430,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  419,  433,  674,  205,  149,  674,  674,  674,
      674,  674,  674,  674,  430,  674,  224,  674,  674,  158,
      149,  674,  674,  332,  333,  141,  333,  674,  674,  433,
      341,  341,  141,  341,  223,  419,  334,  674,  205,  149,
      674,  674,  674,  342,  674,  674,  336,  674,  674,  332,
      333,  141,  333,  674,  336,  674,  674,  674,  674,  674,
      223,  419,  334,  333,  205,  149,  674,  336,  674,  674,
      341,  674,  336,  674,  674,  674,  674,  674,  337,  674,

      336,  674,  674,  674,  674,  344,  674,  674,  674,  333,
      674,  674,  674,  336,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  337,  674,  674,  674,  674,  674,
      338,  674,  674,  158,  149,  674,  674,  345,  674,  674,
      205,  149,  438,  439,  239,  439,  674,  674,  674,  674,
      674,  674,  674,   85,  674,  440,  338,  674,  674,  158,
      149,  237,  238,  239,  238,  442,  674,  354,  355,   84,
      355,  161,  101,  442,  240,  674,  674,  161,  350,  674,
      445,  674,  439,  674,  242,  674,  442,  257,  674,  141,
      447,  674,  242,  674,  674,  674,  674,  443,  447,  674,

      361,  238,  674,  674,  674,  242,  674,  355,  674,  674,
      362,  447,  674,  437,  674,  674,  346,  674,  362,  674,
      674,  674,  448,  674,  354,  355,   84,  355,  674,  244,
      674,  362,  245,  246,  161,  350,  674,  445,  674,  674,
      674,  674,  363,  450,  451,  239,  451,  447,  244,  674,
      674,  245,  246,  674,   85,  447,  452,   91,   92,  674,
      674,  674,  674,  674,  355,  674,  454,  674,  447,  450,
      451,  239,  451,  674,  454,  674,  674,  205,  149,  449,
       85,  674,  452,  451,  674,  674,  674,  454,  674,  674,
      674,  674,  454,  674,  674,  674,  674,  674,  455,  674,

      454,  674,  674,  674,  674,  674,  451,  674,  141,  451,
      674,  674,  674,  454,   91,   92,  674,  674,  365,  366,
      141,  366,  674,  674,  455,  674,  674,  674,  367,  535,
      244,  458,  674,  245,  246,  674,  674,  535,  674,  674,
      674,  460,  674,  674,  365,  366,  141,  366,  674,  460,
      535,  674,  674,  674,  367,  674,  244,  458,  366,  245,
      246,  536,  460,  467,  468,  141,  468,  460,  674,  674,
      674,  674,  674,  461,  259,  460,  469,  674,  674,  674,
      674,  674,  674,  674,  366,  674,  471,  674,  460,  467,
      468,  141,  468,  345,  471,  674,  205,  149,  674,  462,

      259,  674,  469,  468,  674,  674,  674,  471,  205,  149,
      674,  674,  471,  674,  674,  674,  674,  674,  472,  674,
      471,  674,  674,  674,  674,  674,  674,  674,  674,  468,
      674,  674,  674,  471,  205,  149,  674,  674,  257,  258,
      141,  258,  674,  674,  472,  380,  380,  141,  380,  259,
      473,  476,  674,  265,  149,  674,  674,  674,  480,  674,
      674,  478,  674,  674,  379,  380,  141,  380,  674,  478,
      674,  386,  387,  141,  387,  674,  473,  480,  258,  265,
      149,  367,  478,  674,  485,  380,  674,  483,  674,  674,
      674,  674,  674,  479,  487,  483,  674,  674,  674,  674,

      482,  674,  487,  674,  380,  674,  674,  674,  483,  674,
      674,  387,  674,  674,  674,  487,  674,  674,  674,  484,
      674,  674,  674,  674,  674,  264,  488,  674,  265,  149,
      674,  674,  419,  674,  674,  205,  149,  386,  387,  141,
      387,  674,  674,  674,  674,  674,  674,  367,  674,  674,
      485,  419,  674,  674,  205,  149,  674,  674,  419,  674,
      487,  205,  149,  379,  380,  141,  380,  674,  487,  674,
      674,  674,  674,  674,  259,  674,  381,  387,  674,  674,
      674,  487,  379,  380,  141,  380,  383,  674,  674,  674,
      674,  674,  489,  259,  383,  381,  674,  674,  674,  674,

      674,  674,  674,  380,  674,  383,  674,  383,  674,  674,
      674,  674,  674,  383,  674,  674,  674,  674,  384,  674,
      674,  674,  380,  674,  419,  674,  383,  205,  149,  674,
      674,  304,  304,  141,  304,  674,  674,  384,  674,  303,
      304,  141,  304,  674,  398,  386,  387,  141,  387,  674,
      385,  674,  398,  265,  149,  367,  259,  674,  388,  674,
      674,  674,  402,  674,  386,  387,  141,  387,  390,  385,
      402,  304,  265,  149,  367,  259,  390,  388,  674,  304,
      674,  674,  674,  402,  674,  387,  400,  390,  674,  390,
      674,  674,  674,  674,  403,  390,  674,  674,  674,  674,

      391,  674,  674,  674,  387,  674,  674,  674,  390,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  401,  392,
      674,  205,  149,  674,  674,  674,  401,  674,  674,  205,
      149,  674,  385,  674,  674,  265,  149,  237,  238,  239,
      238,  674,  674,  674,  674,  674,  674,  674,  101,  674,
      278,  385,  674,  674,  265,  149,  237,  238,  239,  238,
      280,  674,  674,  674,  674,  674,  161,  101,  280,  278,
      674,  674,  674,  674,  674,  674,  674,  281,  674,  280,
      674,  280,  406,  406,  141,  406,  674,  280,  674,  674,
      674,  674,  282,  674,  674,  407,  281,  674,  674,  674,

      280,  674,  674,  674,  674,  674,  674,  674,  395,  674,
      674,  396,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  406,  674,  244,  674,  674,  245,  246,  674,
      674,  674,  674,  674,  674,  674,  674,  409,  674,  674,
      674,  674,  674,  244,  674,  674,  245,  246,  237,  238,
      239,  238,  674,  495,  496,  141,  496,  674,  161,  101,
      674,  278,  674,  674,  142,  674,  497,  674,  674,  401,
      674,  284,  205,  149,  674,  674,  499,  674,  674,  284,
      674,  674,  674,  674,  499,  674,  674,  674,  285,  674,
      674,  674,  284,  496,  674,  674,  674,  499,  674,  674,

      492,  674,  674,  397,  674,  674,  674,  674,  500,  674,
      303,  304,  141,  304,  674,  674,  674,  674,  674,  674,
      674,  142,  674,  501,  333,  333,  141,  333,  674,  332,
      333,  141,  333,  503,  674,  244,  674,  416,  245,  246,
      309,  503,  416,  148,  149,  674,  674,  674,  674,  674,
      304,  674,  420,  674,  503,  303,  304,  141,  304,  674,
      420,  674,  674,  674,  333,  504,  142,  674,  501,  333,
      674,  674,  674,  420,  674,  674,  674,  674,  503,  418,
      674,  495,  674,  141,  421,  674,  503,  674,  674,  341,
      341,  141,  341,  674,  572,  304,  674,  309,  674,  503,

      148,  149,  342,  674,  573,  674,  674,  674,  674,  674,
      504,  419,  573,  674,  205,  149,  419,  674,  674,  205,
      149,  674,  674,  674,  674,  573,  674,  674,  674,  341,
      430,  430,  141,  430,  674,  674,  574,  151,  152,  141,
      152,  508,  309,  431,  344,  148,  149,  674,  223,  674,
      426,  151,  152,  141,  152,  674,  674,  674,  674,  674,
      428,  674,  223,  674,  426,  674,  674,  674,  428,  674,
      430,  205,  149,  674,  428,  674,  345,  152,  674,  205,
      149,  428,  428,  674,  674,  433,  674,  674,  674,  674,
      674,  152,  429,  674,  674,  428,  674,  674,  674,  225,

      226,  141,  226,  674,  674,  674,  429,  674,  674,  227,
      223,  674,  509,  341,  341,  141,  341,  419,  674,  674,
      205,  149,  511,  674,  224,  674,  342,  158,  149,  674,
      511,  674,  674,  515,  516,  141,  516,  674,  224,  226,
      674,  158,  149,  511,  223,  674,  517,  225,  226,  141,
      226,  674,  674,  341,  512,  674,  519,  227,  223,  674,
      509,  674,  674,  674,  519,  521,  674,  674,  435,  674,
      511,  674,  674,  516,  674,  674,  674,  519,  511,  674,
      674,  522,  522,  141,  522,  674,  224,  226,  520,  158,
      149,  511,  674,  674,  523,  237,  238,  239,  238,  438,

      345,  239,  513,  205,  149,  674,  101,  674,  240,  674,
      350,  674,  526,  674,  674,  674,  674,  674,  242,  674,
      338,  522,  527,  158,  149,  674,  242,  674,  674,  438,
      527,  239,  674,  674,  224,  238,  525,  158,  149,  242,
      350,  674,  526,  527,  674,  674,  674,  674,  674,  674,
      243,  674,  527,  674,  528,  674,  438,  439,  239,  439,
      527,  674,  674,  674,  674,  674,  674,   85,  345,  440,
      674,  205,  149,  527,  674,  674,  674,  674,  674,  442,
      674,  674,  244,  674,  528,  245,  246,  442,  674,  245,
      246,  674,  674,  674,  674,  674,  439,  674,  674,  674,

      442,  438,  439,  239,  439,  674,  674,  674,  674,  674,
      674,  443,   85,  674,  440,  674,  674,  674,  674,  245,
      246,  674,  674,  674,  442,  674,  450,  451,  239,  451,
      674,  674,  442,  674,  674,  674,  161,   85,  674,  529,
      674,  439,  674,  244,  674,  442,  245,  246,  674,  531,
      674,  674,  674,  674,  674,  674,  443,  531,  674,  674,
      451,  451,  141,  451,  674,  674,  451,  674,  674,  674,
      531,  674,  674,  534,  450,  451,  239,  451,  674,  674,
      674,  532,  674,  674,  161,   85,  674,  529,  244,  674,
      674,  245,  246,  674,  674,  674,  674,  531,  674,  674,

      451,  674,  674,  674,  674,  531,  674,  674,  450,  451,
      239,  451,  674,  244,  451,  536,  245,  246,  531,  350,
      674,  534,  450,  451,  239,  451,  674,  674,  674,  533,
      674,  537,  674,   85,  674,  452,  674,  674,  674,  537,
      674,  674,  674,  674,  674,  454,  674,  345,  451,  674,
      205,  149,  537,  454,  674,  674,  450,  451,  239,  451,
      674,  244,  451,  538,  245,  246,  454,   85,  674,  452,
      468,  468,  141,  468,  674,  674,  674,  455,  674,  454,
      674,  674,  674,  542,  674,  674,  674,  454,  674,  674,
      674,  674,  674,  674,  674,  345,  451,  674,  245,  246,

      454,  467,  468,  141,  468,  674,  674,  674,  674,  244,
      468,  455,  245,  246,  542,  550,  550,  141,  550,  674,
      674,  674,  674,  674,  546,  544,  674,  674,  551,  674,
      674,  674,  546,  674,  674,  550,  550,  141,  550,  674,
      674,  468,  674,  244,  674,  546,  245,  246,  551,  380,
      380,  141,  380,  674,  674,  550,  547,  545,  674,  674,
      205,  149,  480,  467,  468,  141,  468,  674,  674,  674,
      553,  674,  674,  674,  259,  550,  469,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  471,  674,  545,  380,
      553,  205,  149,  674,  471,  674,  674,  467,  468,  141,

      468,  674,  545,  468,  482,  205,  149,  471,  259,  674,
      469,  379,  380,  141,  380,  674,  674,  674,  472,  674,
      471,  674,  545,  674,  480,  205,  149,  674,  471,  674,
      674,  674,  674,  674,  483,  674,  419,  468,  674,  205,
      149,  471,  483,  674,  674,  257,  258,  141,  258,  674,
      473,  380,  472,  265,  149,  483,  259,  674,  476,  257,
      258,  141,  258,  674,  674,  674,  484,  674,  478,  674,
      259,  674,  476,  674,  674,  674,  478,  674,  674,  674,
      674,  674,  478,  674,  473,  258,  674,  265,  149,  478,
      478,  674,  674,  561,  562,  141,  562,  674,  419,  258,

      479,  205,  149,  478,  259,  674,  563,  365,  366,  141,
      366,  674,  674,  674,  479,  674,  565,  367,  259,  674,
      555,  674,  674,  674,  565,  674,  674,  674,  674,  674,
      557,  674,  264,  562,  674,  265,  149,  565,  557,  674,
      674,  567,  567,  141,  567,  674,  264,  366,  566,  265,
      149,  557,  674,  674,  568,  365,  366,  141,  366,  674,
      674,  674,  558,  674,  674,  367,  259,  674,  555,  386,
      387,  141,  387,  674,  674,  674,  674,  674,  557,  367,
      385,  567,  485,  265,  149,  674,  557,  674,  674,  674,
      674,  674,  487,  674,  264,  366,  570,  265,  149,  557,

      487,  674,  674,  237,  238,  239,  238,  674,  674,  387,
      559,  674,  674,  487,  101,  674,  278,  386,  387,  141,
      387,  674,  674,  674,  488,  674,  280,  367,  401,  674,
      485,  205,  149,  674,  280,  674,  674,  674,  674,  674,
      487,  674,  264,  281,  674,  265,  149,  280,  487,  674,
      674,  237,  238,  239,  238,  674,  419,  387,  282,  205,
      149,  487,  101,  674,  278,  406,  406,  141,  406,  674,
      674,  674,  489,  674,  284,  674,  674,  674,  407,  495,
      674,  141,  284,  674,  674,  674,  674,  674,  674,  674,
      244,  285,  572,  245,  246,  284,  674,  674,  674,  674,

      674,  674,  573,  674,  419,  406,  286,  205,  149,  674,
      573,  674,  674,  495,  496,  141,  496,  571,  674,  674,
      494,  674,  674,  573,  142,  674,  497,  580,  580,  141,
      580,  674,  674,  674,  574,  674,  499,  674,  244,  674,
      581,  245,  246,  674,  499,  674,  674,  550,  550,  141,
      550,  674,  401,  496,  674,  205,  149,  499,  674,  674,
      551,  495,  496,  141,  496,  674,  674,  580,  500,  205,
      149,  674,  142,  674,  497,  303,  304,  141,  304,  674,
      674,  674,  583,  674,  499,  209,  142,  550,  575,  674,
      674,  674,  499,  674,  674,  674,  674,  674,  577,  674,

      309,  496,  553,  148,  149,  499,  577,  674,  674,  303,
      304,  141,  304,  674,  419,  304,  500,  205,  149,  577,
      142,  674,  501,  303,  304,  141,  304,  674,  674,  674,
      578,  674,  503,  209,  142,  674,  575,  205,  149,  674,
      503,  674,  674,  674,  674,  674,  577,  674,  309,  304,
      674,  148,  149,  503,  577,  674,  674,  303,  304,  141,
      304,  674,  309,  304,  504,  148,  149,  577,  142,  674,
      501,  341,  341,  141,  341,  674,  674,  674,  579,  674,
      503,  674,  674,  674,  342,  674,  674,  674,  503,  674,
      674,  430,  430,  141,  430,  674,  309,  304,  674,  148,

      149,  503,  674,  674,  431,  332,  333,  141,  333,  674,
      309,  341,  504,  148,  149,  674,  223,  674,  584,  332,
      333,  141,  333,  674,  674,  674,  344,  674,  586,  674,
      223,  430,  584,  674,  674,  674,  586,  674,  674,  674,
      674,  674,  586,  590,  309,  333,  514,  148,  149,  586,
      586,  674,  674,  515,  674,  141,  674,  674,  345,  333,
      587,  205,  149,  586,  674,  674,  591,  515,  674,  141,
      674,  674,  674,  674,  587,  674,  592,  674,  419,  674,
      591,  205,  149,  674,  592,  674,  674,  674,  674,  674,
      592,  674,  338,  674,  674,  158,  149,  592,  592,  674,

      674,  515,  516,  141,  516,  674,  338,  674,  593,  158,
      149,  592,  223,  674,  517,  515,  516,  141,  516,  674,
      674,  674,  593,  674,  519,  674,  223,  674,  517,  674,
      674,  674,  519,  674,  674,  674,  674,  674,  519,  674,
      674,  516,  674,  205,  149,  519,  519,  674,  674,  341,
      341,  141,  341,  674,  674,  516,  520,  205,  149,  519,
      674,  674,  342,  332,  333,  141,  333,  674,  674,  674,
      520,  674,  674,  227,  223,  674,  594,  522,  522,  141,
      522,  674,  674,  674,  674,  674,  596,  674,  338,  341,
      523,  158,  149,  674,  596,  674,  674,  522,  522,  141,

      522,  674,  338,  333,  344,  158,  149,  596,  674,  674,
      523,  332,  333,  141,  333,  674,  674,  522,  597,  674,
      674,  227,  223,  674,  594,  674,  674,  674,  674,  674,
      674,  674,  525,  674,  596,  674,  345,  522,  674,  205,
      149,  674,  596,  674,  674,  468,  468,  141,  468,  674,
      338,  333,  525,  158,  149,  596,  674,  674,  542,  450,
      451,  239,  451,  674,  345,  674,  598,  205,  149,  161,
      350,  674,  534,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  537,  674,  345,  468,  674,  205,  149,  674,
      537,  674,  674,  450,  451,  239,  451,  674,  338,  451,

      544,  158,  149,  537,   85,  674,  529,  450,  451,  239,
      451,  674,  674,  674,  538,  674,  531,  161,  350,  674,
      534,  674,  674,  674,  531,  674,  674,  674,  674,  674,
      537,  674,  545,  451,  674,  205,  149,  531,  537,  674,
      674,  450,  451,  239,  451,  674,  674,  451,  532,  245,
      246,  537,   85,  674,  529,  674,  674,  674,  674,  674,
      674,  674,  602,  674,  531,  674,  674,  674,  674,  674,
      674,  674,  531,  674,  674,  674,  674,  674,  674,  674,
      244,  451,  674,  245,  246,  531,  674,  674,  674,  674,
      674,  674,  674,  561,  674,  141,  532,  245,  246,  550,

      550,  141,  550,  674,  674,  674,  621,  467,  468,  141,
      468,  674,  551,  674,  674,  674,  622,  674,  674,  674,
      542,  674,  674,  674,  622,  674,  674,  674,  244,  674,
      546,  245,  246,  450,  451,  239,  451,  622,  546,  550,
      674,  674,  674,  161,   85,  674,  452,  468,  623,  674,
      674,  546,  674,  674,  553,  674,  454,  674,  674,  674,
      674,  674,  547,  674,  454,  674,  674,  674,  674,  674,
      674,  674,  674,  451,  674,  674,  674,  454,  674,  674,
      674,  674,  674,  205,  149,  605,  545,  674,  541,  205,
      149,  674,  674,  674,  545,  674,  674,  205,  149,  608,

      609,  141,  609,  674,  467,  468,  141,  468,  674,  674,
      259,  674,  610,  674,  674,  259,  674,  614,  674,  674,
      244,  674,  612,  245,  246,  674,  674,  616,  674,  674,
      612,  674,  674,  674,  674,  616,  674,  674,  674,  609,
      674,  674,  674,  612,  468,  674,  674,  674,  616,  674,
      674,  674,  674,  674,  613,  674,  561,  674,  141,  617,
      674,  467,  468,  141,  468,  674,  674,  674,  674,  621,
      674,  674,  259,  674,  614,  386,  387,  141,  387,  622,
      674,  674,  674,  674,  616,  367,  473,  622,  485,  265,
      149,  473,  616,  674,  265,  149,  674,  674,  487,  674,

      622,  468,  674,  674,  674,  616,  487,  674,  674,  674,
      674,  623,  674,  674,  674,  387,  617,  674,  674,  487,
      674,  674,  674,  674,  674,  674,  674,  620,  674,  674,
      489,  674,  561,  562,  141,  562,  674,  674,  674,  674,
      674,  674,  674,  259,  674,  563,  205,  149,  473,  674,
      674,  265,  149,  674,  674,  565,  674,  561,  562,  141,
      562,  674,  419,  565,  674,  205,  149,  674,  259,  674,
      563,  674,  562,  674,  674,  674,  565,  674,  674,  674,
      565,  674,  674,  674,  674,  674,  674,  566,  565,  674,
      674,  674,  674,  674,  674,  674,  674,  562,  674,  674,

      674,  565,  674,  674,  674,  386,  387,  141,  387,  674,
      674,  674,  566,  674,  674,  367,  259,  674,  624,  385,
      674,  674,  265,  149,  567,  567,  141,  567,  626,  674,
      386,  387,  141,  387,  674,  674,  626,  568,  674,  674,
      367,  259,  674,  624,  385,  387,  674,  265,  149,  626,
      674,  674,  674,  626,  567,  567,  141,  567,  674,  674,
      627,  626,  674,  674,  567,  674,  674,  568,  674,  674,
      387,  674,  674,  674,  626,  674,  674,  674,  674,  570,
      674,  674,  674,  674,  674,  628,  674,  406,  406,  141,
      406,  674,  385,  674,  567,  265,  149,  674,  674,  674,

      407,  674,  674,  303,  304,  141,  304,  674,  674,  570,
      674,  401,  674,  209,  205,  149,  398,  385,  674,  674,
      265,  149,  674,  674,  674,  674,  402,  406,  674,  674,
      674,  674,  674,  674,  402,  674,  303,  304,  141,  304,
      674,  401,  409,  304,  205,  149,  209,  402,  674,  398,
      674,  674,  303,  304,  141,  304,  674,  674,  403,  402,
      674,  674,  674,  142,  674,  575,  674,  402,  674,  580,
      580,  141,  580,  674,  401,  577,  304,  205,  149,  674,
      402,  674,  581,  577,  674,  674,  674,  674,  674,  674,
      674,  404,  304,  205,  149,  674,  577,  303,  304,  141,

      304,  674,  674,  674,  674,  674,  674,  578,  142,  580,
      575,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      577,  674,  674,  674,  583,  674,  205,  149,  577,  674,
      674,  580,  580,  141,  580,  674,  674,  304,  674,  309,
      674,  577,  148,  149,  581,  674,  674,  674,  674,  674,
      674,  674,  578,  674,  674,  674,  419,  674,  674,  205,
      149,  674,  332,  333,  141,  333,  674,  674,  674,  674,
      674,  580,  674,  223,  674,  584,  430,  430,  141,  430,
      674,  674,  674,  674,  309,  586,  583,  148,  149,  431,
      674,  674,  674,  586,  674,  674,  332,  333,  141,  333,

      674,  674,  333,  674,  674,  674,  586,  223,  674,  584,
      332,  333,  141,  333,  674,  674,  430,  587,  419,  586,
      227,  205,  149,  416,  674,  674,  674,  586,  674,  674,
      674,  433,  674,  420,  674,  674,  333,  674,  674,  674,
      586,  420,  674,  674,  522,  522,  141,  522,  674,  338,
      333,  587,  158,  149,  420,  674,  674,  523,  332,  333,
      141,  333,  674,  419,  674,  421,  205,  149,  227,  674,
      674,  416,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  420,  674,  338,  522,  674,  158,  149,  674,  420,
      674,  674,  332,  333,  141,  333,  638,  674,  333,  601,

      205,  149,  420,  223,  674,  594,  332,  333,  141,  333,
      674,  674,  674,  422,  674,  596,  674,  223,  674,  594,
      674,  674,  674,  596,  674,  674,  674,  674,  674,  596,
      674,  345,  333,  674,  205,  149,  596,  596,  674,  674,
      450,  451,  239,  451,  674,  674,  333,  597,  205,  149,
      596,   85,  674,  529,  674,  674,  674,  674,  674,  674,
      674,  597,  674,  531,  674,  674,  674,  674,  674,  674,
      674,  531,  674,  674,  674,  674,  674,  674,  674,  338,
      451,  674,  158,  149,  531,  674,  674,  674,  674,  674,
      674,  674,  608,  338,  141,  532,  158,  149,  450,  451,

      239,  451,  674,  674,  674,  646,  674,  674,  161,  350,
      674,  534,  674,  674,  674,  647,  674,  674,  674,  674,
      674,  537,  674,  647,  674,  674,  674,  244,  674,  537,
      245,  246,  450,  451,  239,  451,  647,  674,  451,  674,
      674,  674,  537,   85,  674,  452,  674,  648,  674,  674,
      639,  674,  674,  602,  674,  454,  641,  641,  141,  641,
      674,  674,  674,  454,  674,  550,  550,  141,  550,  642,
      674,  608,  451,  141,  674,  674,  454,  674,  551,  674,
      674,  674,  205,  149,  646,  345,  674,  455,  245,  246,
      450,  451,  239,  451,  647,  674,  641,  674,  674,  674,

      161,  350,  647,  534,  674,  550,  674,  674,  674,  674,
      674,  644,  674,  537,  674,  647,  674,  645,  674,  244,
      607,  537,  245,  246,  674,  674,  648,  674,  674,  674,
      451,  674,  674,  674,  537,  674,  674,  674,  674,  674,
      674,  674,  640,  545,  674,  602,  205,  149,  674,  674,
      674,  674,  545,  674,  674,  205,  149,  674,  674,  674,
      674,  205,  149,  608,  609,  141,  609,  674,  674,  674,
      674,  674,  674,  674,  259,  674,  610,  345,  674,  674,
      245,  246,  608,  609,  141,  609,  612,  674,  467,  468,
      141,  468,  674,  259,  612,  610,  674,  674,  367,  259,

      674,  649,  674,  609,  674,  612,  674,  612,  674,  674,
      674,  651,  674,  612,  674,  674,  674,  674,  613,  651,
      674,  674,  609,  674,  674,  674,  612,  674,  468,  674,
      674,  674,  651,  674,  674,  674,  674,  613,  674,  674,
      674,  674,  674,  652,  674,  467,  468,  141,  468,  674,
      473,  674,  674,  265,  149,  367,  259,  674,  649,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  651,  473,
      674,  674,  265,  149,  674,  473,  651,  674,  265,  149,
      674,  674,  674,  674,  674,  468,  674,  674,  674,  651,
      467,  468,  141,  468,  674,  674,  674,  674,  674,  674,

      653,  259,  674,  614,  674,  674,  467,  468,  141,  468,
      674,  674,  674,  616,  674,  674,  674,  259,  674,  614,
      674,  616,  674,  674,  674,  674,  674,  674,  674,  616,
      468,  674,  473,  674,  616,  265,  149,  616,  674,  467,
      468,  141,  468,  674,  674,  617,  468,  674,  674,  674,
      616,  674,  542,  674,  674,  386,  387,  141,  387,  674,
      674,  617,  546,  674,  674,  367,  674,  674,  485,  674,
      546,  674,  674,  674,  674,  674,  674,  473,  487,  468,
      265,  149,  674,  546,  674,  674,  487,  674,  386,  387,
      141,  387,  674,  473,  547,  387,  265,  149,  367,  487,

      674,  485,  674,  674,  467,  468,  141,  468,  674,  674,
      488,  487,  674,  674,  674,  259,  674,  654,  674,  487,
      674,  567,  567,  141,  567,  674,  545,  656,  387,  205,
      149,  674,  487,  674,  568,  656,  674,  674,  674,  674,
      674,  674,  674,  489,  468,  205,  149,  674,  656,  467,
      468,  141,  468,  674,  674,  674,  674,  674,  674,  657,
      259,  567,  654,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  656,  661,  674,  674,  631,  674,  205,  149,
      656,  674,  674,  580,  580,  141,  580,  674,  674,  468,
      674,  473,  674,  656,  265,  149,  581,  674,  674,  674,

      674,  674,  674,  674,  657,  674,  674,  674,  401,  674,
      674,  205,  149,  674,  303,  304,  141,  304,  674,  674,
      674,  674,  674,  580,  674,  142,  674,  575,  522,  522,
      141,  522,  674,  674,  674,  663,  473,  577,  635,  265,
      149,  523,  674,  674,  674,  577,  674,  674,  332,  333,
      141,  333,  674,  674,  304,  674,  674,  674,  577,  223,
      674,  594,  674,  674,  674,  674,  674,  674,  522,  578,
      419,  596,  674,  205,  149,  674,  674,  674,  674,  596,
      674,  674,  674,  525,  674,  674,  674,  674,  333,  674,
      674,  674,  596,  674,  674,  674,  674,  450,  451,  239,

      451,  309,  674,  597,  148,  149,  674,  674,  350,  674,
      534,  450,  451,  239,  451,  345,  674,  674,  205,  149,
      537,  674,  350,  674,  534,  674,  674,  674,  537,  674,
      641,  641,  141,  641,  537,  338,  674,  451,  158,  149,
      674,  537,  537,  642,  674,  674,  674,  674,  674,  674,
      674,  451,  538,  674,  674,  537,  641,  641,  141,  641,
      674,  674,  674,  674,  674,  674,  538,  674,  674,  642,
      641,  674,  674,  550,  550,  141,  550,  674,  674,  674,
      674,  674,  674,  674,  345,  644,  551,  245,  246,  674,
      674,  674,  674,  674,  674,  674,  641,  674,  345,  674,

      674,  245,  246,  674,  674,  674,  674,  674,  674,  674,
      674,  644,  674,  550,  674,  674,  674,  545,  674,  674,
      205,  149,  467,  468,  141,  468,  674,  674,  553,  674,
      674,  674,  367,  674,  674,  542,  674,  674,  467,  468,
      141,  468,  674,  545,  674,  546,  205,  149,  367,  674,
      674,  542,  674,  546,  674,  674,  674,  674,  674,  674,
      545,  546,  468,  205,  149,  674,  546,  674,  674,  546,
      674,  674,  674,  674,  674,  674,  674,  547,  468,  674,
      674,  674,  546,  467,  468,  141,  468,  674,  674,  674,
      674,  674,  674,  548,  259,  674,  649,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  651,  674,  467,  468,
      141,  468,  205,  149,  651,  674,  674,  674,  674,  259,
      674,  649,  674,  468,  674,  674,  674,  651,  205,  149,
      674,  651,  674,  674,  674,  674,  674,  674,  652,  651,
      674,  674,  674,  674,  674,  674,  674,  674,  468,  674,
      674,  674,  651,  467,  468,  141,  468,  674,  674,  674,
      674,  674,  674,  652,  259,  674,  654,  674,  674,  674,
      473,  674,  674,  265,  149,  674,  656,  674,  467,  468,
      141,  468,  674,  674,  656,  674,  674,  674,  674,  259,
      674,  654,  674,  468,  674,  473,  674,  656,  265,  149,

      674,  656,  567,  567,  141,  567,  674,  674,  657,  656,
      674,  580,  580,  141,  580,  568,  674,  674,  468,  674,
      674,  674,  656,  674,  581,  674,  674,  674,  674,  674,
      674,  674,  674,  657,  674,  674,  674,  674,  674,  674,
      473,  674,  567,  265,  149,  674,  674,  674,  674,  674,
      674,  580,  674,  674,  674,  674,  674,  570,  674,  674,
      674,  674,  674,  674,  674,  473,  583,  674,  265,  149,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  401,
      674,  674,  205,  149,  674,  674,  674,  674,  419,  674,

      674,  205,  149,   54,   54,   54,   54,   54,   54,   54,
       54,   70,  674,  674,   70,   70,   72,   72,   72,   72,
       72,   72,   72,   72,   80,   80,   87,   87,  674,   87,
       87,  674,   87,  103,  103,  674,  103,  103,  674,  103,
      118,  674,  674,  118,  118,  144,  144,  674,  144,  144,
      674,  144,  155,  155,  674,  155,  155,  163,  163,  163,
      163,  163,  674,  163,  174,  174,  674,  174,  174,  177,
      177,  674,  177,  177,  674,  177,  182,  182,  182,  182,
      182,  674,  182,  140,  140,  674,  674,  140,  211,  211,
      211,  211,  211,  674,  211,   80,   80,  152,  152,  674,

      674,  152,  155,  155,  674,  155,  155,  674,  155,  229,
      229,  229,  229,  229,  674,  229,  163,  163,  674,  163,
      163,  236,  674,  674,  674,  236,  241,  241,  674,  241,
      241,  674,  241,  252,  252,  674,  252,  252,  674,  252,
      261,  261,  674,  261,  261,  674,  261,  269,  269,  269,
      269,  269,  674,  269,  177,  177,  674,  177,  177,  674,
      177,  273,  273,  273,  273,  273,  674,  273,  279,  279,
      674,  279,  279,  674,  279,  283,  283,  674,  283,  283,
      674,  283,  182,  182,  674,  182,  182,  103,  103,  674,
      103,  103,  103,  103,  140,  674,  674,  674,  140,  294,

      294,  294,  674,  294,  302,  674,  674,  674,  302,  306,
      306,  674,  306,  306,  674,  306,  313,  313,  674,  313,
      313,  674,  313,  152,  674,  674,  674,  152,  318,  318,
      318,  674,  318,  331,  674,  674,  674,  331,  335,  335,
      674,  335,  335,  674,  335,  236,  674,  674,  674,  236,
      343,  343,  674,  674,  343,  674,  343,  241,  241,  674,
      241,  241,  250,  250,  674,  250,  250,  252,  252,  674,
      252,  252,  674,  252,  357,  357,  357,  357,  357,  674,
      357,  258,  258,  674,  674,  258,  261,  261,  674,  261,
      261,  674,  261,  369,  369,  369,  369,  369,  674,  369,

      376,  376,  674,  674,  376,  382,  382,  674,  382,  382,
      674,  382,  389,  389,  389,  389,  389,  674,  389,  279,
      279,  674,  279,  279,  674,  279,  273,  273,  674,  273,
      273,  283,  283,  674,  283,  283,  674,  283,  182,  182,
      182,  182,  182,  674,  182,  399,  399,  674,  674,  399,
      674,  399,  140,  140,  674,  674,  140,  302,  674,  674,
      674,  302,  408,  408,  674,  674,  408,  674,  408,  306,
      306,  674,  306,  306,  674,  306,  313,  313,  674,  313,
      313,  674,  313,  412,  412,  412,  412,  412,  674,  412,
      417,  417,  674,  674,  417,  674,  417,  152,  152,  674,

      674,  152,  236,  674,  236,  674,  236,  427,  427,  674,
      427,  427,  674,  427,  331,  674,  674,  674,  331,  432,
      432,  674,  674,  432,  674,  432,  335,  335,  674,  335,
      335,  674,  335,  343,  343,  674,  674,  343,  241,  241,
      241,  241,  241,  674,  241,  441,  441,  674,  441,  441,
      674,  441,  250,  674,  674,  674,  250,  446,  446,  446,
      446,  446,  453,  453,  674,  453,  453,  674,  453,  258,
      674,  674,  674,  258,  459,  459,  459,  674,  459,  466,
      674,  674,  674,  466,  470,  470,  674,  470,  470,  674,
      470,  477,  477,  674,  477,  477,  674,  477,  481,  481,

      674,  674,  481,  674,  481,  486,  486,  486,  674,  486,
      674,  486,  382,  382,  674,  382,  382,  674,  382,  389,
      389,  389,  389,  389,  674,  389,  279,  279,  279,  279,
      279,  674,  279,  283,  283,  283,  283,  283,  674,  283,
      399,  399,  674,  674,  399,  674,  399,  408,  408,  674,
      674,  408,  498,  498,  674,  498,  498,  674,  498,  502,
      502,  674,  502,  502,  674,  502,  417,  417,  674,  674,
      417,  674,  417,  343,  343,  674,  674,  343,  674,  343,
      427,  427,  674,  427,  427,  674,  427,  510,  510,  510,
      510,  510,  674,  510,  432,  432,  674,  674,  432,  518,

      518,  674,  518,  518,  674,  518,  524,  524,  674,  674,
      524,  674,  524,  241,  241,  674,  241,  241,  674,  241,
      439,  439,  674,  439,  439,  441,  441,  674,  441,  441,
      674,  441,  530,  530,  530,  530,  530,  674,  530,  535,
      535,  674,  674,  535,  674,  535,  453,  453,  674,  453,
      453,  674,  453,  543,  543,  674,  674,  543,  674,  543,
      258,  258,  674,  674,  258,  466,  674,  674,  674,  466,
      552,  552,  674,  674,  552,  674,  552,  470,  470,  674,
      470,  470,  674,  470,  477,  477,  674,  477,  477,  674,
      477,  556,  556,  556,  556,  556,  674,  556,  481,  481,

      674,  674,  481,  674,  481,  486,  486,  486,  674,  486,
      674,  486,  564,  564,  674,  564,  564,  674,  564,  279,
      279,  674,  279,  279,  674,  279,  283,  283,  674,  283,
      283,  674,  283,  569,  569,  674,  674,  569,  674,  569,
      408,  408,  674,  674,  408,  674,  408,  496,  496,  674,
      674,  496,  498,  498,  674,  498,  498,  674,  498,  576,
      576,  576,  576,  576,  674,  576,  502,  502,  674,  502,
      502,  674,  502,  582,  582,  674,  674,  582,  674,  582,
      343,  343,  674,  674,  343,  674,  343,  585,  585,  674,
      585,  585,  674,  585,  432,  432,  674,  674,  432,  674,

      432,  516,  516,  674,  674,  516,  518,  518,  674,  518,
      518,  674,  518,  595,  595,  595,  595,  595,  674,  595,
      522,  522,  674,  674,  522,  524,  524,  674,  674,  524,
      674,  524,  439,  674,  674,  674,  439,  535,  535,  535,
      535,  535,  530,  530,  674,  530,  530,  674,  530,  453,
      453,  453,  453,  453,  674,  453,  543,  543,  674,  674,
      543,  674,  543,  552,  552,  674,  674,  552,  611,  611,
      674,  611,  611,  674,  611,  615,  615,  674,  615,  615,
      674,  615,  486,  486,  486,  674,  486,  674,  486,  562,
      562,  674,  674,  562,  564,  564,  674,  564,  564,  674,

      564,  625,  625,  625,  625,  625,  674,  625,  567,  567,
      674,  674,  567,  569,  569,  674,  674,  569,  674,  569,
      408,  408,  674,  674,  408,  674,  408,  496,  674,  674,
      674,  496,  399,  399,  399,  674,  399,  576,  576,  674,
      576,  576,  674,  576,  580,  580,  674,  674,  580,  582,
      582,  674,  674,  582,  674,  582,  585,  585,  674,  585,
      585,  674,  585,  432,  432,  674,  674,  432,  674,  432,
      516,  674,  674,  674,  516,  417,  417,  417,  674,  417,
      595,  595,  674,  595,  595,  674,  595,  522,  674,  674,
      674,  522,  524,  524,  674,  674,  524,  674,  524,  535,

      535,  535,  535,  535,  674,  535,  530,  530,  674,  530,
      530,  674,  530,  453,  453,  674,  453,  453,  674,  453,
      643,  643,  674,  674,  643,  674,  643,  552,  552,  674,
      674,  552,  674,  552,  609,  609,  674,  674,  609,  611,
      611,  674,  611,  611,  674,  611,  650,  650,  650,  650,
      650,  674,  650,  615,  615,  674,  615,  615,  674,  615,
      543,  543,  674,  674,  543,  674,  543,  562,  674,  674,
      674,  562,  486,  486,  486,  674,  486,  655,  655,  674,
      655,  655,  674,  655,  567,  674,  674,  674,  567,  569,
      569,  674,  674,  569,  674,  569,  576,  576,  674,  576,

      576,  674,  576,  580,  674,  674,  674,  580,  582,  582,
      674,  674,  582,  674,  582,  595,  595,  674,  595,  595,
      674,  595,  522,  522,  674,  674,  522,  524,  524,  674,
      674,  524,  674,  524,  535,  535,  674,  535,  535,  674,
      535,  641,  641,  674,  674,  641,  643,  643,  674,  674,
      643,  674,  643,  552,  552,  674,  674,  552,  674,  552,
      609,  674,  674,  674,  609,  543,  543,  543,  674,  543,
      650,  650,  674,  650,  650,  674,  650,  655,  655,  674,
      655,  655,  674,  655,  567,  567,  674,  674,  567,  569,
      569,  674,  674,  569,  674,  569,  580,  580,  674,  674,

      580,  582,  582,  674,  674,  582,  674,  582,    3,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674
    } ;

static const flex_int16_t yy_chk[8411] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    5,    5,    6,   10,    6,    7,    7,   13,    7,
        8,    8,  656,    8,    7,    7,    9,    9,   14,    9,
       13,    8,   28,    8,   36,   14,   22,    9,   20,    9,
      651,   20,   22,   22,   31,   22,   29,   10,   24,   24,
       24,   30,  646,   32,   36,   28,   33,    7,   30,   82,
        8,    7,   54,    7,    7,    6,    9,   29,   31,    7,
        7,   55,   30,    6,   32,   19,   19,   19,   19,   43,
       33,   83,   30,   56,   37,   37,   19,   37,   19,   42,
       43,   42,   42,   48,   48,   37,   58,   37,   19,   72,
       54,   64,   59,   56,    5,    7,   19,   61,   62,   55,

      105,  106,  108,  644,   65,   19,   58,   63,   66,   19,
       79,   56,   59,  110,   37,   79,  113,   61,   62,  165,
       19,  105,   72,  200,   58,   82,  108,   63,   66,   64,
       59,  278,  278,  130,  110,   61,   62,  113,   27,   27,
       27,   27,   65,  110,  200,   63,   66,   83,  111,   27,
      114,   27,   19,  298,  298,   19,   19,   26,   26,   26,
       26,   27,   67,   67,  165,   67,  131,  132,   26,   27,
       26,  130,  111,   67,  114,   67,   48,  106,   27,  133,
       26,  207,   27,  127,  127,  134,   26,  127,   26,  128,
      128,  128,  128,   27,  633,   71,   71,   26,   71,  135,

      187,   26,   67,  187,  131,  132,   71,  136,   71,  208,
       26,  166,   26,  629,   71,  240,  241,  133,  248,   69,
       69,   69,   69,  134,  626,   27,  207,  190,   27,   27,
       69,  190,   69,  161,  161,   71,  161,  135,   80,   80,
       80,   80,   69,  213,   26,  136,  161,   26,   26,   80,
       69,   80,  190,  166,  208,  225,  166,  119,  119,   69,
      119,   80,  226,   69,   85,   85,   85,   85,  119,   80,
      119,  621,  231,  161,   69,   85,  214,   85,   80,  168,
      168,  168,   80,  216,  216,  216,  193,   85,  213,  232,
      193,  240,  241,   80,  248,   85,  277,  119,  616,  277,

      225,  233,  233,  233,   85,  296,   69,  226,   85,   69,
       69,  193,  539,   88,   88,   88,   88,  231,  214,   85,
      599,  214,  297,   88,   88,   80,   88,  287,   80,   80,
      287,  232,  425,  425,  232,  308,   88,  596,   89,   89,
       89,   89,  591,  139,   88,  139,  586,  539,   89,   89,
      296,   89,  320,   88,   85,   85,  139,   88,  242,  242,
      337,   89,  209,  209,  297,  209,  139,  297,   88,   89,
      243,  243,  281,  281,  139,  209,  227,  227,   89,  227,
      308,  354,   89,  101,  101,  101,  101,  139,  583,  227,
      577,  285,  285,   89,  101,  310,  101,  320,  139,  140,

       88,  140,  209,   88,   88,  337,  101,  572,  102,  102,
      102,  102,  140,  570,  101,  243,  227,  557,  537,  102,
      321,  102,  140,  101,  553,   89,  354,  101,   89,   89,
      140,  102,  355,  139,  139,  242,  546,  310,  101,  102,
      310,  545,  544,  140,  348,  348,  348,  243,  102,  281,
      537,  538,  102,  531,  140,  526,  104,  104,  104,  104,
      525,  667,  321,  102,  667,  321,  104,  104,  285,  104,
      359,  247,  247,  101,  101,  511,  503,  355,  487,  104,
      482,  107,  107,  107,  107,  473,  222,  104,  222,  140,
      140,  107,  107,  339,  107,  102,  104,  222,  102,  102,

      104,  471,  322,  468,  107,  234,  234,  467,  234,  222,
      322,  104,  107,  247,  460,  359,  247,  222,  234,  300,
      300,  107,  300,  322,  365,  107,  117,  117,  117,  117,
      222,  454,  300,  360,  322,  339,  107,  117,  339,  117,
      366,  222,  151,  104,  151,  234,  104,  104,  247,  117,
      451,  143,  143,  143,  143,  151,  450,  117,  371,  300,
      447,  433,  143,  420,  143,  151,  117,  419,  107,  365,
      117,  107,  107,  151,  143,  360,  222,  222,  360,  418,
      413,  117,  143,  409,  386,  366,  151,  374,  374,  374,
      402,  143,  401,  400,  390,  143,  385,  151,  380,  145,

      145,  145,  145,  371,  379,  152,  143,  152,  372,  145,
      145,  387,  145,  117,  391,  370,  117,  117,  152,  364,
      361,  403,  145,  358,  146,  146,  146,  146,  152,  386,
      145,  392,  151,  151,  146,  146,  152,  146,  143,  145,
      351,  143,  143,  145,  350,  329,  329,  146,  329,  152,
      372,  349,  396,  372,  145,  146,  387,  345,  329,  391,
      152,  386,  367,  367,  146,  367,  403,  414,  146,  154,
      154,  154,  154,  392,  344,  367,  392,  421,  338,  146,
      154,  404,  154,  336,  448,  329,  145,  333,  387,  145,
      145,  455,  154,  415,  396,  152,  152,  396,  332,  327,

      154,  461,  367,  341,  341,  341,  341,  422,  449,  154,
      522,  146,  414,  154,  146,  146,  341,  155,  155,  155,
      155,  522,  421,  404,  154,  472,  404,  326,  155,  448,
      155,  156,  156,  156,  156,  415,  455,  319,  415,  488,
      155,  156,  156,  341,  156,  309,  461,  307,  155,  422,
      449,  304,  422,  449,  156,  456,  154,  155,  341,  154,
      154,  155,  156,  522,  303,  159,  159,  159,  159,  295,
      472,  156,  155,  290,  288,  156,  159,  286,  159,  157,
      157,  157,  157,  282,  488,  279,  156,  504,  159,  157,
      157,  276,  157,  341,  341,  272,  159,  456,  522,  522,

      456,  462,  157,  474,  155,  159,  265,  155,  155,  159,
      157,  264,  259,  160,  160,  160,  160,  246,  156,  157,
      159,  156,  156,  157,  160,  245,  160,  162,  162,  162,
      162,  244,  504,  230,  157,  512,  160,  224,  162,  223,
      162,  219,  532,  462,  160,  474,  462,  218,  474,  489,
      162,  505,  217,  160,  212,  159,  159,  160,  162,  206,
      205,  163,  163,  163,  163,  202,  157,  162,  160,  157,
      157,  162,  163,  201,  163,  167,  167,  167,  167,  199,
      512,  198,  162,  547,  163,  197,  167,  532,  167,  196,
      558,  489,  163,  505,  489,  189,  505,  513,  167,  533,

      535,  163,  536,  160,  160,  163,  167,  185,  169,  173,
      173,  173,  173,  164,  162,  167,  163,  162,  162,  167,
      173,  158,  173,  174,  174,  174,  174,  153,  547,  150,
      167,  578,  173,  149,  174,  558,  174,  148,  587,  513,
      173,  533,  513,  147,  533,  535,  174,  536,  163,  173,
      540,  163,  163,  173,  174,  142,  125,  177,  177,  177,
      177,  124,  167,  174,  173,  167,  167,  174,  177,  122,
      177,  175,  175,  175,  175,  120,  578,  535,  174,  536,
      177,  175,  175,  587,  175,  116,  112,   98,  177,  548,
       97,   95,   94,  559,  175,  540,  173,  177,  567,  173,

      173,  177,  175,   93,   92,  179,  179,  179,  179,  567,
      174,  175,  177,  174,  174,  175,  179,   91,  179,  176,
      176,  176,  176,   90,   87,   76,  175,  540,  179,  176,
      176,  548,  176,   74,  548,  559,  179,  579,  559,   73,
       70,  580,  176,  588,  177,  179,  597,  177,  177,  179,
      176,  567,  580,  181,  181,  181,  181,   68,  175,  176,
      179,  175,  175,  176,  181,   60,  181,  178,  178,  178,
      178,   50,   49,   47,  176,  617,  181,  178,  178,  579,
      178,   46,  579,   45,  181,  588,  567,  567,  588,  598,
      178,  597,  179,  181,  580,  179,  179,  181,  178,   44,

       41,  182,  182,  182,  182,   39,  176,  178,  181,  176,
      176,  178,  182,   23,  182,  180,  180,  180,  180,   18,
      617,   17,  178,  627,  182,  180,  180,   16,  180,  580,
      580,  598,  182,  618,  598,    3,  652,  628,  180,    0,
      181,  182,  653,  181,  181,  182,  180,    0,    0,  184,
      184,  184,  184,    0,  178,  180,  182,  178,  178,  180,
      184,    0,  184,  183,  183,  183,  183,    0,  627,    0,
      180,    0,  184,  183,  183,  618,  183,    0,  618,  628,
      184,  652,  628,    0,  653,  600,  183,  653,  182,  184,
      657,  182,  182,  184,  183,    0,  600,  186,  186,  186,

      186,    0,  180,  183,  184,  180,  180,  183,  186,    0,
      186,  188,  188,  188,  188,    0,  186,    0,  183,  658,
      186,    0,  188,    0,  188,    0,  485,    0,  186,    0,
      188,    0,    0,    0,  188,  657,    0,  186,  600,  184,
      184,  186,  188,    0,    0,  237,  237,  237,  237,  485,
      183,  188,  186,  183,  183,  188,  237,  485,  237,  324,
      324,  658,  324,    0,  658,    0,  188,    0,  237,  324,
      485,    0,  324,  600,  600,    0,  237,    0,    0,  464,
      464,  485,  464,    0,  186,  237,    0,  186,  186,  237,
        0,    0,  464,    0,  255,    0,  255,    0,  188,  324,

      237,  188,  188,  192,  192,  192,  192,    0,  203,  203,
      203,  203,    0,  192,  192,    0,  192,  255,  203,  464,
        0,  203,  630,    0,    0,  255,  192,    0,    0,  665,
        0,  203,  192,  630,  192,  237,  237,    0,  255,  203,
      665,  325,  325,  192,  325,    0,    0,  192,  203,  255,
        0,  325,  203,    0,  325,    0,  192,    0,  192,    0,
        0,    0,    0,  203,  204,  204,  204,  204,    0,  210,
      210,  210,  210,    0,  204,  630,    0,  204,    0,    0,
      210,  325,  210,    0,  255,  255,    0,  204,    0,    0,
      192,    0,  210,  192,  192,  204,  325,    0,  203,  203,

      210,    0,    0,    0,  204,  634,    0,    0,  204,  210,
      630,  630,    0,  210,    0,    0,  634,  665,  665,  204,
      641,    0,    0,    0,  210,    0,  211,  211,  211,  211,
        0,  641,  406,  406,  406,  406,    0,  211,    0,  211,
      215,  215,  215,  215,    0,  406,    0,    0,    0,  211,
        0,  215,    0,  215,  204,  204,  210,  211,  634,  210,
      210,    0,    0,  215,    0,    0,  211,  664,    0,    0,
      211,  215,  406,  641,    0,    0,    0,    0,  664,    0,
      215,  211,    0,    0,  215,    0,    0,  406,  220,  220,
      220,  220,    0,  634,  634,  215,    0,    0,  220,    0,

        0,  220,  221,  221,  221,  221,    0,    0,  641,  641,
        0,  220,  221,  211,    0,  221,  211,  211,    0,  220,
      664,    0,  406,  406,    0,  221,    0,  215,  220,    0,
      215,  215,  220,  221,    0,    0,  228,  228,  228,  228,
        0,    0,  221,  220,    0,    0,  221,  228,    0,  228,
      229,  229,  229,  229,    0,  664,  664,  221,    0,  228,
        0,  229,    0,  229,  637,    0,    0,  228,    0,  235,
      235,  235,  235,  229,    0,  637,  228,    0,  220,  220,
      228,  229,  235,    0,    0,    0,    0,    0,    0,    0,
      229,  228,  221,  221,  229,  236,  236,  236,  236,  238,

      238,  238,  238,    0,    0,  229,    0,    0,  236,  235,
      238,    0,  238,    0,  637,    0,    0,  637,    0,    0,
        0,    0,  238,  228,  235,    0,  228,  228,    0,    0,
      238,    0,    0,    0,    0,  236,    0,  229,  666,  238,
      229,  229,    0,  238,  249,    0,  249,    0,    0,  666,
      236,    0,  637,  637,  238,  249,  235,  249,    0,  235,
      235,  250,    0,  250,    0,  660,    0,  249,  669,    0,
        0,    0,  250,    0,  250,  249,  660,    0,    0,  669,
        0,    0,  236,    0,  250,  236,  236,    0,  249,  238,
      238,  666,  250,    0,    0,    0,    0,    0,    0,  249,

      251,  251,  251,  251,    0,  250,  252,  252,  252,  252,
        0,  251,    0,  251,    0,  660,  250,  252,  660,  252,
        0,  669,    0,  251,    0,    0,  666,  666,  662,  252,
        0,  251,  670,    0,  249,  249,    0,  252,    0,  662,
      251,    0,    0,  670,  251,    0,  252,    0,    0,    0,
      252,  250,  250,  660,  660,  251,  669,  669,    0,    0,
        0,  252,    0,  253,  253,  253,  253,    0,    0,  254,
      254,  254,  254,  253,  253,  257,  253,  257,  662,  254,
      254,  662,  254,    0,    0,  670,  253,  251,  257,    0,
      251,  251,  254,  252,  253,    0,  252,  252,  257,    0,

      254,    0,  258,  253,  258,    0,  257,  253,    0,  254,
        0,    0,    0,  254,    0,  258,  662,  662,  253,  257,
      670,  670,    0,    0,  254,  258,  671,    0,    0,    0,
      257,  673,    0,  258,    0,    0,    0,  671,    0,    0,
        0,    0,  673,    0,    0,    0,  258,    0,    0,    0,
      253,    0,    0,  253,  253,    0,  254,  258,    0,  254,
      254,    0,    0,    0,    0,  257,  257,  260,  260,  260,
      260,    0,  261,  261,  261,  261,  671,    0,  260,  671,
      260,    0,    0,  261,  673,  261,  262,  262,  262,  262,
      260,    0,  258,  258,    0,  261,  262,  262,  260,  262,

        0,    0,    0,  261,    0,    0,    0,  260,    0,  262,
        0,  260,  261,    0,  671,  671,  261,  262,    0,  673,
      673,    0,  260,    0,    0,    0,  262,  261,    0,    0,
      262,    0,    0,    0,    0,  293,  293,  293,  293,    0,
        0,  262,    0,  266,  266,  266,  266,    0,  293,    0,
        0,    0,    0,    0,  260,    0,  266,  260,  260,  261,
        0,    0,  261,  261,    0,    0,  266,    0,  263,  263,
      263,  263,    0,  262,  266,  293,  262,  262,  263,  263,
        0,  263,    0,  266,    0,    0,    0,  266,    0,    0,
      293,  263,    0,    0,    0,    0,    0,    0,  266,  263,

        0,  267,  267,  267,  267,    0,    0,    0,  263,    0,
        0,    0,  263,    0,  267,    0,    0,  268,  268,  268,
      268,    0,  293,  263,  267,  293,  293,    0,  268,    0,
      268,    0,  267,  266,  266,    0,    0,    0,    0,    0,
      268,  267,    0,    0,    0,  267,    0,    0,  268,    0,
        0,    0,    0,    0,    0,  263,  267,  268,  263,  263,
        0,  268,  269,  269,  269,  269,    0,    0,    0,    0,
        0,    0,  268,  269,    0,  269,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  269,    0,  270,  270,  270,
      270,  267,  267,  269,    0,    0,    0,  270,  270,    0,

      270,    0,  269,    0,  268,    0,  269,  268,  268,    0,
      270,    0,    0,    0,    0,    0,    0,  269,  270,    0,
        0,    0,    0,    0,    0,    0,    0,  270,    0,    0,
        0,  270,    0,    0,    0,  271,  271,  271,  271,    0,
        0,    0,  270,    0,    0,  271,  271,    0,  271,  269,
        0,    0,  269,  269,    0,    0,    0,    0,  271,    0,
      273,  273,  273,  273,    0,    0,  271,    0,    0,    0,
        0,  273,    0,  273,  270,  271,    0,  270,  270,  271,
        0,    0,    0,  273,    0,    0,    0,    0,    0,    0,
      271,  273,    0,    0,    0,    0,    0,    0,    0,    0,

      273,    0,    0,    0,  273,    0,    0,    0,  274,  274,
      274,  274,    0,    0,    0,  273,    0,    0,  274,  274,
        0,  274,  271,    0,    0,  271,  271,    0,    0,    0,
      299,  274,  299,  275,  275,  275,  275,    0,    0,  274,
        0,    0,    0,  299,  275,    0,  275,  273,  274,    0,
      273,  273,  274,  299,    0,    0,  275,    0,    0,    0,
        0,  299,    0,  274,  275,    0,    0,    0,    0,    0,
        0,    0,    0,  275,  299,    0,    0,  275,  283,  283,
      283,  283,    0,    0,    0,  299,    0,    0,  275,  283,
        0,  283,    0,    0,    0,  274,    0,    0,  274,  274,

        0,  283,    0,  284,  284,  284,  284,    0,    0,  283,
        0,    0,    0,  284,  284,    0,  284,    0,  283,    0,
      299,  299,  283,  275,  275,    0,  284,    0,    0,    0,
        0,    0,    0,  283,  284,    0,    0,    0,    0,    0,
        0,    0,    0,  284,    0,    0,    0,  284,    0,    0,
        0,  289,  289,  289,  289,    0,    0,    0,  284,    0,
        0,  289,  289,    0,  289,  283,    0,    0,  283,  283,
      301,  301,  301,  301,  289,    0,  294,  294,  294,  294,
        0,    0,  289,  301,  302,  302,  302,  302,    0,  294,
      284,  289,    0,  284,  284,  289,  323,  302,  323,  294,

        0,    0,    0,    0,    0,    0,  289,  294,    0,  323,
      301,    0,    0,    0,    0,    0,  294,    0,    0,  323,
      294,    0,    0,    0,  302,  301,    0,  323,    0,    0,
        0,  294,    0,  305,  305,  305,  305,    0,  289,  302,
      323,  289,  289,    0,  305,    0,  305,    0,    0,    0,
        0,  323,    0,    0,    0,    0,  305,  301,    0,    0,
      301,  301,    0,  294,  305,    0,  294,  294,    0,    0,
        0,  302,    0,  305,  302,  302,    0,  305,  306,  306,
      306,  306,    0,    0,    0,    0,  323,  323,  305,  306,
        0,  306,    0,    0,  312,  312,  312,  312,    0,    0,

        0,  306,    0,    0,    0,  312,    0,  312,    0,  306,
        0,    0,    0,    0,    0,    0,    0,  312,  306,    0,
      305,    0,  306,  305,  305,  312,    0,    0,    0,    0,
        0,    0,    0,  306,  312,    0,    0,    0,  312,  313,
      313,  313,  313,    0,    0,    0,    0,    0,    0,  312,
      313,    0,  313,  317,  317,  317,  317,    0,    0,    0,
        0,    0,  313,    0,    0,  306,  317,    0,  306,  306,
      313,    0,    0,  430,  430,  430,  430,    0,    0,  313,
        0,  312,    0,  313,  312,  312,  430,  314,  314,  314,
      314,    0,    0,  317,  313,    0,    0,  314,  314,    0,

      314,  315,  315,  315,  315,    0,    0,    0,  317,    0,
      314,  315,  315,  430,  315,    0,    0,    0,  314,    0,
        0,    0,    0,    0,  315,    0,  313,  314,  430,  313,
      313,  314,  315,    0,    0,  318,  318,  318,  318,    0,
      317,  315,  314,  317,  317,  315,    0,    0,  318,  328,
      328,  328,  328,    0,    0,    0,  315,    0,  318,    0,
      328,    0,  328,  430,  430,    0,  318,    0,  330,  330,
      330,  330,  328,    0,  314,  318,    0,  314,  314,  318,
      328,  330,    0,    0,    0,    0,    0,    0,  315,  328,
      318,  315,  315,  328,  331,  331,  331,  331,    0,    0,

        0,    0,    0,    0,  328,    0,    0,  331,  330,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  318,  330,    0,  318,  318,    0,    0,    0,
        0,    0,    0,    0,  331,    0,  328,    0,    0,  328,
      328,    0,    0,  334,  334,  334,  334,    0,    0,  331,
      342,  342,  342,  342,  334,  330,  334,    0,  330,  330,
        0,    0,    0,  342,    0,    0,  334,    0,    0,  335,
      335,  335,  335,    0,  334,    0,    0,    0,    0,    0,
      335,  331,  335,  334,  331,  331,    0,  334,    0,    0,
      342,    0,  335,    0,    0,    0,    0,    0,  334,    0,

      335,    0,    0,    0,    0,  342,    0,    0,    0,  335,
        0,    0,    0,  335,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  335,    0,    0,    0,    0,    0,
      334,    0,    0,  334,  334,    0,    0,  342,    0,    0,
      342,  342,  347,  347,  347,  347,    0,    0,    0,    0,
        0,    0,    0,  347,    0,  347,  335,    0,    0,  335,
      335,  346,  346,  346,  346,  347,    0,  352,  352,  352,
      352,  346,  346,  347,  346,    0,    0,  352,  352,    0,
      352,    0,  347,    0,  346,    0,  347,  463,    0,  463,
      352,    0,  346,    0,    0,    0,    0,  347,  352,    0,

      463,  346,    0,    0,    0,  346,    0,  352,    0,    0,
      463,  352,    0,  346,    0,    0,  346,    0,  463,    0,
        0,    0,  352,    0,  353,  353,  353,  353,    0,  347,
        0,  463,  347,  347,  353,  353,    0,  353,    0,    0,
        0,    0,  463,  356,  356,  356,  356,  353,  346,    0,
        0,  346,  346,    0,  356,  353,  356,  352,  352,    0,
        0,    0,    0,    0,  353,    0,  356,    0,  353,  357,
      357,  357,  357,    0,  356,    0,    0,  463,  463,  353,
      357,    0,  357,  356,    0,    0,    0,  356,    0,    0,
        0,    0,  357,    0,    0,    0,    0,    0,  356,    0,

      357,    0,    0,    0,    0,    0,  534,    0,  534,  357,
        0,    0,    0,  357,  353,  353,  534,  534,  362,  362,
      362,  362,    0,    0,  357,    0,    0,    0,  362,  534,
      356,  362,    0,  356,  356,    0,    0,  534,    0,    0,
        0,  362,    0,    0,  363,  363,  363,  363,    0,  362,
      534,    0,    0,    0,  363,    0,  357,  363,  362,  357,
      357,  534,  362,  368,  368,  368,  368,  363,    0,    0,
        0,    0,    0,  362,  368,  363,  368,    0,    0,    0,
        0,    0,    0,    0,  363,    0,  368,    0,  363,  369,
      369,  369,  369,  534,  368,    0,  534,  534,    0,  363,

      369,    0,  369,  368,    0,    0,    0,  368,  362,  362,
        0,    0,  369,    0,    0,    0,    0,    0,  368,    0,
      369,    0,    0,    0,    0,    0,    0,    0,    0,  369,
        0,    0,    0,  369,  363,  363,    0,    0,  373,  373,
      373,  373,    0,    0,  369,  375,  375,  375,  375,  373,
      368,  373,    0,  368,  368,    0,    0,    0,  375,    0,
        0,  373,    0,    0,  376,  376,  376,  376,    0,  373,
        0,  377,  377,  377,  377,    0,  369,  376,  373,  369,
      369,  377,  373,    0,  377,  375,    0,  376,    0,    0,
        0,    0,    0,  373,  377,  376,    0,    0,    0,    0,

      375,    0,  377,    0,  376,    0,    0,    0,  376,    0,
        0,  377,    0,    0,    0,  377,    0,    0,    0,  376,
        0,    0,    0,    0,    0,  373,  377,    0,  373,  373,
        0,    0,  375,    0,    0,  375,  375,  378,  378,  378,
      378,    0,    0,    0,    0,    0,    0,  378,    0,    0,
      378,  376,    0,    0,  376,  376,    0,    0,  377,    0,
      378,  377,  377,  381,  381,  381,  381,    0,  378,    0,
        0,    0,    0,    0,  381,    0,  381,  378,    0,    0,
        0,  378,  382,  382,  382,  382,  381,    0,    0,    0,
        0,    0,  378,  382,  381,  382,    0,    0,    0,    0,

        0,    0,    0,  381,    0,  382,    0,  381,    0,    0,
        0,    0,    0,  382,    0,    0,    0,    0,  381,    0,
        0,    0,  382,    0,  378,    0,  382,  378,  378,    0,
        0,  398,  398,  398,  398,    0,    0,  382,    0,  399,
      399,  399,  399,    0,  398,  383,  383,  383,  383,    0,
      381,    0,  399,  381,  381,  383,  383,    0,  383,    0,
        0,    0,  399,    0,  384,  384,  384,  384,  383,  382,
      399,  398,  382,  382,  384,  384,  383,  384,    0,  399,
        0,    0,    0,  399,    0,  383,  398,  384,    0,  383,
        0,    0,    0,    0,  399,  384,    0,    0,    0,    0,

      383,    0,    0,    0,  384,    0,    0,    0,  384,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  398,  384,
        0,  398,  398,    0,    0,    0,  399,    0,    0,  399,
      399,    0,  383,    0,    0,  383,  383,  395,  395,  395,
      395,    0,    0,    0,    0,    0,    0,  395,  395,    0,
      395,  384,    0,    0,  384,  384,  394,  394,  394,  394,
      395,    0,    0,    0,    0,    0,  394,  394,  395,  394,
        0,    0,    0,    0,    0,    0,    0,  395,    0,  394,
        0,  395,  407,  407,  407,  407,    0,  394,    0,    0,
        0,    0,  395,    0,    0,  407,  394,    0,    0,    0,

      394,    0,    0,    0,    0,    0,    0,    0,  394,    0,
        0,  394,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  407,    0,  395,    0,    0,  395,  395,    0,
        0,    0,    0,    0,    0,    0,    0,  407,    0,    0,
        0,    0,    0,  394,    0,    0,  394,  394,  397,  397,
      397,  397,    0,  410,  410,  410,  410,    0,  397,  397,
        0,  397,    0,    0,  410,    0,  410,    0,    0,  407,
        0,  397,  407,  407,    0,    0,  410,    0,    0,  397,
        0,    0,    0,    0,  410,    0,    0,    0,  397,    0,
        0,    0,  397,  410,    0,    0,    0,  410,    0,    0,

      397,    0,    0,  397,    0,    0,    0,    0,  410,    0,
      411,  411,  411,  411,    0,    0,    0,    0,    0,    0,
        0,  411,    0,  411,  416,  416,  416,  416,    0,  417,
      417,  417,  417,  411,    0,  397,    0,  416,  397,  397,
      410,  411,  417,  410,  410,    0,    0,    0,    0,    0,
      411,    0,  417,    0,  411,  412,  412,  412,  412,    0,
      417,    0,    0,    0,  416,  411,  412,    0,  412,  417,
        0,    0,    0,  417,    0,    0,    0,    0,  412,  416,
        0,  495,    0,  495,  417,    0,  412,    0,    0,  424,
      424,  424,  424,    0,  495,  412,    0,  411,    0,  412,

      411,  411,  424,    0,  495,    0,    0,    0,    0,    0,
      412,  416,  495,    0,  416,  416,  417,    0,    0,  417,
      417,    0,    0,    0,    0,  495,    0,    0,    0,  424,
      431,  431,  431,  431,    0,    0,  495,  426,  426,  426,
      426,  424,  412,  431,  424,  412,  412,    0,  426,    0,
      426,  427,  427,  427,  427,    0,    0,    0,    0,    0,
      426,    0,  427,    0,  427,    0,    0,    0,  426,    0,
      431,  495,  495,    0,  427,    0,  424,  426,    0,  424,
      424,  426,  427,    0,    0,  431,    0,    0,    0,    0,
        0,  427,  426,    0,    0,  427,    0,    0,    0,  428,

      428,  428,  428,    0,    0,    0,  427,    0,    0,  428,
      428,    0,  428,  435,  435,  435,  435,  431,    0,    0,
      431,  431,  428,    0,  426,    0,  435,  426,  426,    0,
      428,    0,    0,  434,  434,  434,  434,    0,  427,  428,
        0,  427,  427,  428,  434,    0,  434,  429,  429,  429,
      429,    0,    0,  435,  428,    0,  434,  429,  429,    0,
      429,    0,    0,    0,  434,  435,    0,    0,  435,    0,
      429,    0,    0,  434,    0,    0,    0,  434,  429,    0,
        0,  436,  436,  436,  436,    0,  428,  429,  434,  428,
      428,  429,    0,    0,  436,  437,  437,  437,  437,  438,

      435,  438,  429,  435,  435,    0,  437,    0,  437,    0,
      438,    0,  438,    0,    0,    0,    0,    0,  437,    0,
      434,  436,  438,  434,  434,    0,  437,    0,    0,  439,
      438,  439,    0,    0,  429,  437,  436,  429,  429,  437,
      439,    0,  439,  438,    0,    0,    0,    0,    0,    0,
      437,    0,  439,    0,  438,    0,  440,  440,  440,  440,
      439,    0,    0,    0,    0,    0,    0,  440,  436,  440,
        0,  436,  436,  439,    0,    0,    0,    0,    0,  440,
        0,    0,  437,    0,  439,  437,  437,  440,    0,  438,
      438,    0,    0,    0,    0,    0,  440,    0,    0,    0,

      440,  441,  441,  441,  441,    0,    0,    0,    0,    0,
        0,  440,  441,    0,  441,    0,    0,    0,    0,  439,
      439,    0,    0,    0,  441,    0,  442,  442,  442,  442,
        0,    0,  441,    0,    0,    0,  442,  442,    0,  442,
        0,  441,    0,  440,    0,  441,  440,  440,    0,  442,
        0,    0,    0,    0,    0,    0,  441,  442,    0,    0,
      445,  445,  445,  445,    0,    0,  442,    0,    0,    0,
      442,    0,    0,  445,  443,  443,  443,  443,    0,    0,
        0,  442,    0,    0,  443,  443,    0,  443,  441,    0,
        0,  441,  441,    0,    0,    0,    0,  443,    0,    0,

      445,    0,    0,    0,    0,  443,    0,    0,  446,  446,
      446,  446,    0,  442,  443,  445,  442,  442,  443,  446,
        0,  446,  452,  452,  452,  452,    0,    0,    0,  443,
        0,  446,    0,  452,    0,  452,    0,    0,    0,  446,
        0,    0,    0,    0,    0,  452,    0,  445,  446,    0,
      445,  445,  446,  452,    0,    0,  453,  453,  453,  453,
        0,  443,  452,  446,  443,  443,  452,  453,    0,  453,
      458,  458,  458,  458,    0,    0,    0,  452,    0,  453,
        0,    0,    0,  458,    0,    0,    0,  453,    0,    0,
        0,    0,    0,    0,    0,  446,  453,    0,  446,  446,

      453,  459,  459,  459,  459,    0,    0,    0,    0,  452,
      458,  453,  452,  452,  459,  465,  465,  465,  465,    0,
        0,    0,    0,    0,  459,  458,    0,    0,  465,    0,
        0,    0,  459,    0,    0,  466,  466,  466,  466,    0,
        0,  459,    0,  453,    0,  459,  453,  453,  466,  480,
      480,  480,  480,    0,    0,  465,  459,  458,    0,    0,
      458,  458,  480,  469,  469,  469,  469,    0,    0,    0,
      465,    0,    0,    0,  469,  466,  469,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  469,    0,  459,  480,
      466,  459,  459,    0,  469,    0,    0,  470,  470,  470,

      470,    0,  465,  469,  480,  465,  465,  469,  470,    0,
      470,  481,  481,  481,  481,    0,    0,    0,  469,    0,
      470,    0,  466,    0,  481,  466,  466,    0,  470,    0,
        0,    0,    0,    0,  481,    0,  480,  470,    0,  480,
      480,  470,  481,    0,    0,  476,  476,  476,  476,    0,
      469,  481,  470,  469,  469,  481,  476,    0,  476,  477,
      477,  477,  477,    0,    0,    0,  481,    0,  476,    0,
      477,    0,  477,    0,    0,    0,  476,    0,    0,    0,
        0,    0,  477,    0,  470,  476,    0,  470,  470,  476,
      477,    0,    0,  490,  490,  490,  490,    0,  481,  477,

      476,  481,  481,  477,  490,    0,  490,  478,  478,  478,
      478,    0,    0,    0,  477,    0,  490,  478,  478,    0,
      478,    0,    0,    0,  490,    0,    0,    0,    0,    0,
      478,    0,  476,  490,    0,  476,  476,  490,  478,    0,
        0,  493,  493,  493,  493,    0,  477,  478,  490,  477,
      477,  478,    0,    0,  493,  479,  479,  479,  479,    0,
        0,    0,  478,    0,    0,  479,  479,    0,  479,  483,
      483,  483,  483,    0,    0,    0,    0,    0,  479,  483,
      490,  493,  483,  490,  490,    0,  479,    0,    0,    0,
        0,    0,  483,    0,  478,  479,  493,  478,  478,  479,

      483,    0,    0,  491,  491,  491,  491,    0,    0,  483,
      479,    0,    0,  483,  491,    0,  491,  484,  484,  484,
      484,    0,    0,    0,  483,    0,  491,  484,  493,    0,
      484,  493,  493,    0,  491,    0,    0,    0,    0,    0,
      484,    0,  479,  491,    0,  479,  479,  491,  484,    0,
        0,  492,  492,  492,  492,    0,  483,  484,  491,  483,
      483,  484,  492,    0,  492,  494,  494,  494,  494,    0,
        0,    0,  484,    0,  492,    0,    0,    0,  494,  496,
        0,  496,  492,    0,    0,    0,    0,    0,    0,    0,
      491,  492,  496,  491,  491,  492,    0,    0,    0,    0,

        0,    0,  496,    0,  484,  494,  492,  484,  484,    0,
      496,    0,    0,  497,  497,  497,  497,  494,    0,    0,
      494,    0,    0,  496,  497,    0,  497,  507,  507,  507,
      507,    0,    0,    0,  496,    0,  497,    0,  492,    0,
      507,  492,  492,    0,  497,    0,    0,  550,  550,  550,
      550,    0,  494,  497,    0,  494,  494,  497,    0,    0,
      550,  498,  498,  498,  498,    0,    0,  507,  497,  496,
      496,    0,  498,    0,  498,  499,  499,  499,  499,    0,
        0,    0,  507,    0,  498,  499,  499,  550,  499,    0,
        0,    0,  498,    0,    0,    0,    0,    0,  499,    0,

      497,  498,  550,  497,  497,  498,  499,    0,    0,  501,
      501,  501,  501,    0,  507,  499,  498,  507,  507,  499,
      501,    0,  501,  500,  500,  500,  500,    0,    0,    0,
      499,    0,  501,  500,  500,    0,  500,  550,  550,    0,
      501,    0,    0,    0,    0,    0,  500,    0,  498,  501,
        0,  498,  498,  501,  500,    0,    0,  502,  502,  502,
      502,    0,  499,  500,  501,  499,  499,  500,  502,    0,
      502,  508,  508,  508,  508,    0,    0,    0,  500,    0,
      502,    0,    0,    0,  508,    0,    0,    0,  502,    0,
        0,  514,  514,  514,  514,    0,  501,  502,    0,  501,

      501,  502,    0,    0,  514,  509,  509,  509,  509,    0,
      500,  508,  502,  500,  500,    0,  509,    0,  509,  510,
      510,  510,  510,    0,    0,    0,  508,    0,  509,    0,
      510,  514,  510,    0,    0,    0,  509,    0,    0,    0,
        0,    0,  510,  514,  502,  509,  514,  502,  502,  509,
      510,    0,    0,  515,    0,  515,    0,    0,  508,  510,
      509,  508,  508,  510,    0,    0,  515,  516,    0,  516,
        0,    0,    0,    0,  510,    0,  515,    0,  514,    0,
      516,  514,  514,    0,  515,    0,    0,    0,    0,    0,
      516,    0,  509,    0,    0,  509,  509,  515,  516,    0,

        0,  517,  517,  517,  517,    0,  510,    0,  515,  510,
      510,  516,  517,    0,  517,  518,  518,  518,  518,    0,
        0,    0,  516,    0,  517,    0,  518,    0,  518,    0,
        0,    0,  517,    0,    0,    0,    0,    0,  518,    0,
        0,  517,    0,  515,  515,  517,  518,    0,    0,  521,
      521,  521,  521,    0,    0,  518,  517,  516,  516,  518,
        0,    0,  521,  519,  519,  519,  519,    0,    0,    0,
      518,    0,    0,  519,  519,    0,  519,  523,  523,  523,
      523,    0,    0,    0,    0,    0,  519,    0,  517,  521,
      523,  517,  517,    0,  519,    0,    0,  524,  524,  524,

      524,    0,  518,  519,  521,  518,  518,  519,    0,    0,
      524,  520,  520,  520,  520,    0,    0,  523,  519,    0,
        0,  520,  520,    0,  520,    0,    0,    0,    0,    0,
        0,    0,  523,    0,  520,    0,  521,  524,    0,  521,
      521,    0,  520,    0,    0,  542,  542,  542,  542,    0,
      519,  520,  524,  519,  519,  520,    0,    0,  542,  527,
      527,  527,  527,    0,  523,    0,  520,  523,  523,  527,
      527,    0,  527,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  527,    0,  524,  542,    0,  524,  524,    0,
      527,    0,    0,  529,  529,  529,  529,    0,  520,  527,

      542,  520,  520,  527,  529,    0,  529,  528,  528,  528,
      528,    0,    0,    0,  527,    0,  529,  528,  528,    0,
      528,    0,    0,    0,  529,    0,    0,    0,    0,    0,
      528,    0,  542,  529,    0,  542,  542,  529,  528,    0,
        0,  530,  530,  530,  530,    0,    0,  528,  529,  527,
      527,  528,  530,    0,  530,    0,    0,    0,    0,    0,
        0,    0,  528,    0,  530,    0,    0,    0,    0,    0,
        0,    0,  530,    0,    0,    0,    0,    0,    0,    0,
      529,  530,    0,  529,  529,  530,    0,    0,    0,    0,
        0,    0,    0,  561,    0,  561,  530,  528,  528,  551,

      551,  551,  551,    0,    0,    0,  561,  543,  543,  543,
      543,    0,  551,    0,    0,    0,  561,    0,    0,    0,
      543,    0,    0,    0,  561,    0,    0,    0,  530,    0,
      543,  530,  530,  541,  541,  541,  541,  561,  543,  551,
        0,    0,    0,  541,  541,    0,  541,  543,  561,    0,
        0,  543,    0,    0,  551,    0,  541,    0,    0,    0,
        0,    0,  543,    0,  541,    0,    0,    0,    0,    0,
        0,    0,    0,  541,    0,    0,    0,  541,    0,    0,
        0,    0,    0,  561,  561,  541,  551,    0,  541,  551,
      551,    0,    0,    0,  543,    0,    0,  543,  543,  554,

      554,  554,  554,    0,  555,  555,  555,  555,    0,    0,
      554,    0,  554,    0,    0,  555,    0,  555,    0,    0,
      541,    0,  554,  541,  541,    0,    0,  555,    0,    0,
      554,    0,    0,    0,    0,  555,    0,    0,    0,  554,
        0,    0,    0,  554,  555,    0,    0,    0,  555,    0,
        0,    0,    0,    0,  554,    0,  562,    0,  562,  555,
        0,  556,  556,  556,  556,    0,    0,    0,    0,  562,
        0,    0,  556,    0,  556,  560,  560,  560,  560,  562,
        0,    0,    0,    0,  556,  560,  554,  562,  560,  554,
      554,  555,  556,    0,  555,  555,    0,    0,  560,    0,

      562,  556,    0,    0,    0,  556,  560,    0,    0,    0,
        0,  562,    0,    0,    0,  560,  556,    0,    0,  560,
        0,    0,    0,    0,    0,    0,    0,  560,    0,    0,
      560,    0,  563,  563,  563,  563,    0,    0,    0,    0,
        0,    0,    0,  563,    0,  563,  562,  562,  556,    0,
        0,  556,  556,    0,    0,  563,    0,  564,  564,  564,
      564,    0,  560,  563,    0,  560,  560,    0,  564,    0,
      564,    0,  563,    0,    0,    0,  563,    0,    0,    0,
      564,    0,    0,    0,    0,    0,    0,  563,  564,    0,
        0,    0,    0,    0,    0,    0,    0,  564,    0,    0,

        0,  564,    0,    0,    0,  565,  565,  565,  565,    0,
        0,    0,  564,    0,    0,  565,  565,    0,  565,  563,
        0,    0,  563,  563,  568,  568,  568,  568,  565,    0,
      566,  566,  566,  566,    0,    0,  565,  568,    0,    0,
      566,  566,    0,  566,  564,  565,    0,  564,  564,  565,
        0,    0,    0,  566,  569,  569,  569,  569,    0,    0,
      565,  566,    0,    0,  568,    0,    0,  569,    0,    0,
      566,    0,    0,    0,  566,    0,    0,    0,    0,  568,
        0,    0,    0,    0,    0,  566,    0,  571,  571,  571,
      571,    0,  565,    0,  569,  565,  565,    0,    0,    0,

      571,    0,    0,  573,  573,  573,  573,    0,    0,  569,
        0,  568,    0,  573,  568,  568,  573,  566,    0,    0,
      566,  566,    0,    0,    0,    0,  573,  571,    0,    0,
        0,    0,    0,    0,  573,    0,  574,  574,  574,  574,
        0,  569,  571,  573,  569,  569,  574,  573,    0,  574,
        0,    0,  575,  575,  575,  575,    0,    0,  573,  574,
        0,    0,    0,  575,    0,  575,    0,  574,    0,  581,
      581,  581,  581,    0,  571,  575,  574,  571,  571,    0,
      574,    0,  581,  575,    0,    0,    0,    0,    0,    0,
        0,  574,  575,  573,  573,    0,  575,  576,  576,  576,

      576,    0,    0,    0,    0,    0,    0,  575,  576,  581,
      576,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      576,    0,    0,    0,  581,    0,  574,  574,  576,    0,
        0,  582,  582,  582,  582,    0,    0,  576,    0,  575,
        0,  576,  575,  575,  582,    0,    0,    0,    0,    0,
        0,    0,  576,    0,    0,    0,  581,    0,    0,  581,
      581,    0,  584,  584,  584,  584,    0,    0,    0,    0,
        0,  582,    0,  584,    0,  584,  590,  590,  590,  590,
        0,    0,    0,    0,  576,  584,  582,  576,  576,  590,
        0,    0,    0,  584,    0,    0,  585,  585,  585,  585,

        0,    0,  584,    0,    0,    0,  584,  585,    0,  585,
      592,  592,  592,  592,    0,    0,  590,  584,  582,  585,
      592,  582,  582,  592,    0,    0,    0,  585,    0,    0,
        0,  590,    0,  592,    0,    0,  585,    0,    0,    0,
      585,  592,    0,    0,  601,  601,  601,  601,    0,  584,
      592,  585,  584,  584,  592,    0,    0,  601,  593,  593,
      593,  593,    0,  590,    0,  592,  590,  590,  593,    0,
        0,  593,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  593,    0,  585,  601,    0,  585,  585,    0,  593,
        0,    0,  594,  594,  594,  594,  601,    0,  593,  601,

      592,  592,  593,  594,    0,  594,  595,  595,  595,  595,
        0,    0,    0,  593,    0,  594,    0,  595,    0,  595,
        0,    0,    0,  594,    0,    0,    0,    0,    0,  595,
        0,  601,  594,    0,  601,  601,  594,  595,    0,    0,
      603,  603,  603,  603,    0,    0,  595,  594,  593,  593,
      595,  603,    0,  603,    0,    0,    0,    0,    0,    0,
        0,  595,    0,  603,    0,    0,    0,    0,    0,    0,
        0,  603,    0,    0,    0,    0,    0,    0,    0,  594,
      603,    0,  594,  594,  603,    0,    0,    0,    0,    0,
        0,    0,  608,  595,  608,  603,  595,  595,  602,  602,

      602,  602,    0,    0,    0,  608,    0,    0,  602,  602,
        0,  602,    0,    0,    0,  608,    0,    0,    0,    0,
        0,  602,    0,  608,    0,    0,    0,  603,    0,  602,
      603,  603,  605,  605,  605,  605,  608,    0,  602,    0,
        0,    0,  602,  605,    0,  605,    0,  608,    0,    0,
      602,    0,    0,  602,    0,  605,  606,  606,  606,  606,
        0,    0,    0,  605,    0,  607,  607,  607,  607,  606,
        0,  609,  605,  609,    0,    0,  605,    0,  607,    0,
        0,    0,  608,  608,  609,  602,    0,  605,  602,  602,
      604,  604,  604,  604,  609,    0,  606,    0,    0,    0,

      604,  604,  609,  604,    0,  607,    0,    0,    0,    0,
        0,  606,    0,  604,    0,  609,    0,  607,    0,  605,
      607,  604,  605,  605,    0,    0,  609,    0,    0,    0,
      604,    0,    0,    0,  604,    0,    0,    0,    0,    0,
        0,    0,  604,  606,    0,  604,  606,  606,    0,    0,
        0,    0,  607,    0,    0,  607,  607,    0,    0,    0,
        0,  609,  609,  610,  610,  610,  610,    0,    0,    0,
        0,    0,    0,    0,  610,    0,  610,  604,    0,    0,
      604,  604,  611,  611,  611,  611,  610,    0,  612,  612,
      612,  612,    0,  611,  610,  611,    0,    0,  612,  612,

        0,  612,    0,  610,    0,  611,    0,  610,    0,    0,
        0,  612,    0,  611,    0,    0,    0,    0,  610,  612,
        0,    0,  611,    0,    0,    0,  611,    0,  612,    0,
        0,    0,  612,    0,    0,    0,    0,  611,    0,    0,
        0,    0,    0,  612,    0,  613,  613,  613,  613,    0,
      610,    0,    0,  610,  610,  613,  613,    0,  613,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  613,  611,
        0,    0,  611,  611,    0,  612,  613,    0,  612,  612,
        0,    0,    0,    0,    0,  613,    0,    0,    0,  613,
      614,  614,  614,  614,    0,    0,    0,    0,    0,    0,

      613,  614,    0,  614,    0,    0,  615,  615,  615,  615,
        0,    0,    0,  614,    0,    0,    0,  615,    0,  615,
        0,  614,    0,    0,    0,    0,    0,    0,    0,  615,
      614,    0,  613,    0,  614,  613,  613,  615,    0,  620,
      620,  620,  620,    0,    0,  614,  615,    0,    0,    0,
      615,    0,  620,    0,    0,  622,  622,  622,  622,    0,
        0,  615,  620,    0,    0,  622,    0,    0,  622,    0,
      620,    0,    0,    0,    0,    0,    0,  614,  622,  620,
      614,  614,    0,  620,    0,    0,  622,    0,  623,  623,
      623,  623,    0,  615,  620,  622,  615,  615,  623,  622,

        0,  623,    0,    0,  624,  624,  624,  624,    0,    0,
      622,  623,    0,    0,    0,  624,    0,  624,    0,  623,
        0,  631,  631,  631,  631,    0,  620,  624,  623,  620,
      620,    0,  623,    0,  631,  624,    0,    0,    0,    0,
        0,    0,    0,  623,  624,  622,  622,    0,  624,  625,
      625,  625,  625,    0,    0,    0,    0,    0,    0,  624,
      625,  631,  625,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  625,  631,    0,    0,  631,    0,  623,  623,
      625,    0,    0,  635,  635,  635,  635,    0,    0,  625,
        0,  624,    0,  625,  624,  624,  635,    0,    0,    0,

        0,    0,    0,    0,  625,    0,    0,    0,  631,    0,
        0,  631,  631,    0,  632,  632,  632,  632,    0,    0,
        0,    0,    0,  635,    0,  632,    0,  632,  638,  638,
      638,  638,    0,    0,    0,  635,  625,  632,  635,  625,
      625,  638,    0,    0,    0,  632,    0,    0,  636,  636,
      636,  636,    0,    0,  632,    0,    0,    0,  632,  636,
        0,  636,    0,    0,    0,    0,    0,    0,  638,  632,
      635,  636,    0,  635,  635,    0,    0,    0,    0,  636,
        0,    0,    0,  638,    0,    0,    0,    0,  636,    0,
        0,    0,  636,    0,    0,    0,    0,  639,  639,  639,

      639,  632,    0,  636,  632,  632,    0,    0,  639,    0,
      639,  640,  640,  640,  640,  638,    0,    0,  638,  638,
      639,    0,  640,    0,  640,    0,    0,    0,  639,    0,
      642,  642,  642,  642,  640,  636,    0,  639,  636,  636,
        0,  639,  640,  642,    0,    0,    0,    0,    0,    0,
        0,  640,  639,    0,    0,  640,  643,  643,  643,  643,
        0,    0,    0,    0,    0,    0,  640,    0,    0,  643,
      642,    0,    0,  645,  645,  645,  645,    0,    0,    0,
        0,    0,    0,    0,  639,  642,  645,  639,  639,    0,
        0,    0,    0,    0,    0,    0,  643,    0,  640,    0,

        0,  640,  640,    0,    0,    0,    0,    0,    0,    0,
        0,  643,    0,  645,    0,    0,    0,  642,    0,    0,
      642,  642,  647,  647,  647,  647,    0,    0,  645,    0,
        0,    0,  647,    0,    0,  647,    0,    0,  648,  648,
      648,  648,    0,  643,    0,  647,  643,  643,  648,    0,
        0,  648,    0,  647,    0,    0,    0,    0,    0,    0,
      645,  648,  647,  645,  645,    0,  647,    0,    0,  648,
        0,    0,    0,    0,    0,    0,    0,  647,  648,    0,
        0,    0,  648,  649,  649,  649,  649,    0,    0,    0,
        0,    0,    0,  648,  649,    0,  649,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  649,    0,  650,  650,
      650,  650,  647,  647,  649,    0,    0,    0,    0,  650,
        0,  650,    0,  649,    0,    0,    0,  649,  648,  648,
        0,  650,    0,    0,    0,    0,    0,    0,  649,  650,
        0,    0,    0,    0,    0,    0,    0,    0,  650,    0,
        0,    0,  650,  654,  654,  654,  654,    0,    0,    0,
        0,    0,    0,  650,  654,    0,  654,    0,    0,    0,
      649,    0,    0,  649,  649,    0,  654,    0,  655,  655,
      655,  655,    0,    0,  654,    0,    0,    0,    0,  655,
        0,  655,    0,  654,    0,  650,    0,  654,  650,  650,

        0,  655,  661,  661,  661,  661,    0,    0,  654,  655,
        0,  663,  663,  663,  663,  661,    0,    0,  655,    0,
        0,    0,  655,    0,  663,    0,    0,    0,    0,    0,
        0,    0,    0,  655,    0,    0,    0,    0,    0,    0,
      654,    0,  661,  654,  654,    0,    0,    0,    0,    0,
        0,  663,    0,    0,    0,    0,    0,  661,    0,    0,
        0,    0,    0,    0,    0,  655,  663,    0,  655,  655,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  661,
        0,    0,  661,  661,    0,    0,    0,    0,  663,    0,

        0,  663,  663,  675,  675,  675,  675,  675,  675,  675,
      675,  676,    0,    0,  676,  676,  677,  677,  677,  677,
      677,  677,  677,  677,  678,  678,  679,  679,    0,  679,
      679,    0,  679,  680,  680,    0,  680,  680,    0,  680,
      681,    0,    0,  681,  681,  682,  682,    0,  682,  682,
        0,  682,  683,  683,    0,  683,  683,  684,  684,  684,
      684,  684,    0,  684,  685,  685,    0,  685,  685,  686,
      686,    0,  686,  686,    0,  686,  687,  687,  687,  687,
      687,    0,  687,  688,  688,    0,    0,  688,  689,  689,
      689,  689,  689,    0,  689,  690,  690,  691,  691,    0,

        0,  691,  692,  692,    0,  692,  692,    0,  692,  693,
      693,  693,  693,  693,    0,  693,  694,  694,    0,  694,
      694,  695,    0,    0,    0,  695,  696,  696,    0,  696,
      696,    0,  696,  697,  697,    0,  697,  697,    0,  697,
      698,  698,    0,  698,  698,    0,  698,  699,  699,  699,
      699,  699,    0,  699,  700,  700,    0,  700,  700,    0,
      700,  701,  701,  701,  701,  701,    0,  701,  702,  702,
        0,  702,  702,    0,  702,  703,  703,    0,  703,  703,
        0,  703,  704,  704,    0,  704,  704,  705,  705,    0,
      705,  705,  705,  705,  706,    0,    0,    0,  706,  707,

      707,  707,    0,  707,  708,    0,    0,    0,  708,  709,
      709,    0,  709,  709,    0,  709,  710,  710,    0,  710,
      710,    0,  710,  711,    0,    0,    0,  711,  712,  712,
      712,    0,  712,  713,    0,    0,    0,  713,  714,  714,
        0,  714,  714,    0,  714,  715,    0,    0,    0,  715,
      716,  716,    0,    0,  716,    0,  716,  717,  717,    0,
      717,  717,  718,  718,    0,  718,  718,  719,  719,    0,
      719,  719,    0,  719,  720,  720,  720,  720,  720,    0,
      720,  721,  721,    0,    0,  721,  722,  722,    0,  722,
      722,    0,  722,  723,  723,  723,  723,  723,    0,  723,

      724,  724,    0,    0,  724,  725,  725,    0,  725,  725,
        0,  725,  726,  726,  726,  726,  726,    0,  726,  727,
      727,    0,  727,  727,    0,  727,  728,  728,    0,  728,
      728,  729,  729,    0,  729,  729,    0,  729,  730,  730,
      730,  730,  730,    0,  730,  731,  731,    0,    0,  731,
        0,  731,  732,  732,    0,    0,  732,  733,    0,    0,
        0,  733,  734,  734,    0,    0,  734,    0,  734,  735,
      735,    0,  735,  735,    0,  735,  736,  736,    0,  736,
      736,    0,  736,  737,  737,  737,  737,  737,    0,  737,
      738,  738,    0,    0,  738,    0,  738,  739,  739,    0,

        0,  739,  740,    0,  740,    0,  740,  741,  741,    0,
      741,  741,    0,  741,  742,    0,    0,    0,  742,  743,
      743,    0,    0,  743,    0,  743,  744,  744,    0,  744,
      744,    0,  744,  745,  745,    0,    0,  745,  746,  746,
      746,  746,  746,    0,  746,  747,  747,    0,  747,  747,
        0,  747,  748,    0,    0,    0,  748,  749,  749,  749,
      749,  749,  750,  750,    0,  750,  750,    0,  750,  751,
        0,    0,    0,  751,  752,  752,  752,    0,  752,  753,
        0,    0,    0,  753,  754,  754,    0,  754,  754,    0,
      754,  755,  755,    0,  755,  755,    0,  755,  756,  756,

        0,    0,  756,    0,  756,  757,  757,  757,    0,  757,
        0,  757,  758,  758,    0,  758,  758,    0,  758,  759,
      759,  759,  759,  759,    0,  759,  760,  760,  760,  760,
      760,    0,  760,  761,  761,  761,  761,  761,    0,  761,
      762,  762,    0,    0,  762,    0,  762,  763,  763,    0,
        0,  763,  764,  764,    0,  764,  764,    0,  764,  765,
      765,    0,  765,  765,    0,  765,  766,  766,    0,    0,
      766,    0,  766,  767,  767,    0,    0,  767,    0,  767,
      768,  768,    0,  768,  768,    0,  768,  769,  769,  769,
      769,  769,    0,  769,  770,  770,    0,    0,  770,  771,

      771,    0,  771,  771,    0,  771,  772,  772,    0,    0,
      772,    0,  772,  773,  773,    0,  773,  773,    0,  773,
      774,  774,    0,  774,  774,  775,  775,    0,  775,  775,
        0,  775,  776,  776,  776,  776,  776,    0,  776,  777,
      777,    0,    0,  777,    0,  777,  778,  778,    0,  778,
      778,    0,  778,  779,  779,    0,    0,  779,    0,  779,
      780,  780,    0,    0,  780,  781,    0,    0,    0,  781,
      782,  782,    0,    0,  782,    0,  782,  783,  783,    0,
      783,  783,    0,  783,  784,  784,    0,  784,  784,    0,
      784,  785,  785,  785,  785,  785,    0,  785,  786,  786,

        0,    0,  786,    0,  786,  787,  787,  787,    0,  787,
        0,  787,  788,  788,    0,  788,  788,    0,  788,  789,
      789,    0,  789,  789,    0,  789,  790,  790,    0,  790,
      790,    0,  790,  791,  791,    0,    0,  791,    0,  791,
      792,  792,    0,    0,  792,    0,  792,  793,  793,    0,
        0,  793,  794,  794,    0,  794,  794,    0,  794,  795,
      795,  795,  795,  795,    0,  795,  796,  796,    0,  796,
      796,    0,  796,  797,  797,    0,    0,  797,    0,  797,
      798,  798,    0,    0,  798,    0,  798,  799,  799,    0,
      799,  799,    0,  799,  800,  800,    0,    0,  800,    0,

      800,  801,  801,    0,    0,  801,  802,  802,    0,  802,
      802,    0,  802,  803,  803,  803,  803,  803,    0,  803,
      804,  804,    0,    0,  804,  805,  805,    0,    0,  805,
        0,  805,  806,    0,    0,    0,  806,  807,  807,  807,
      807,  807,  808,  808,    0,  808,  808,    0,  808,  809,
      809,  809,  809,  809,    0,  809,  810,  810,    0,    0,
      810,    0,  810,  811,  811,    0,    0,  811,  812,  812,
        0,  812,  812,    0,  812,  813,  813,    0,  813,  813,
        0,  813,  814,  814,  814,    0,  814,    0,  814,  815,
      815,    0,    0,  815,  816,  816,    0,  816,  816,    0,

      816,  817,  817,  817,  817,  817,    0,  817,  818,  818,
        0,    0,  818,  819,  819,    0,    0,  819,    0,  819,
      820,  820,    0,    0,  820,    0,  820,  821,    0,    0,
        0,  821,  822,  822,  822,    0,  822,  823,  823,    0,
      823,  823,    0,  823,  824,  824,    0,    0,  824,  825,
      825,    0,    0,  825,    0,  825,  826,  826,    0,  826,
      826,    0,  826,  827,  827,    0,    0,  827,    0,  827,
      828,    0,    0,    0,  828,  829,  829,  829,    0,  829,
      830,  830,    0,  830,  830,    0,  830,  831,    0,    0,
        0,  831,  832,  832,    0,    0,  832,    0,  832,  833,

      833,  833,  833,  833,    0,  833,  834,  834,    0,  834,
      834,    0,  834,  835,  835,    0,  835,  835,    0,  835,
      836,  836,    0,    0,  836,    0,  836,  837,  837,    0,
        0,  837,    0,  837,  838,  838,    0,    0,  838,  839,
      839,    0,  839,  839,    0,  839,  840,  840,  840,  840,
      840,    0,  840,  841,  841,    0,  841,  841,    0,  841,
      842,  842,    0,    0,  842,    0,  842,  843,    0,    0,
        0,  843,  844,  844,  844,    0,  844,  845,  845,    0,
      845,  845,    0,  845,  846,    0,    0,    0,  846,  847,
      847,    0,    0,  847,    0,  847,  848,  848,    0,  848,

      848,    0,  848,  849,    0,    0,    0,  849,  850,  850,
        0,    0,  850,    0,  850,  851,  851,    0,  851,  851,
        0,  851,  852,  852,    0,    0,  852,  853,  853,    0,
        0,  853,    0,  853,  854,  854,    0,  854,  854,    0,
      854,  855,  855,    0,    0,  855,  856,  856,    0,    0,
      856,    0,  856,  857,  857,    0,    0,  857,    0,  857,
      858,    0,    0,    0,  858,  859,  859,  859,    0,  859,
      860,  860,    0,  860,  860,    0,  860,  861,  861,    0,
      861,  861,    0,  861,  862,  862,    0,    0,  862,  863,
      863,    0,    0,  863,    0,  863,  864,  864,    0,    0,

      864,  865,  865,    0,    0,  865,    0,  865,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,
      674,  674,  674,  674,  674,  674,  674,  674,  674,  674,

      674,  674,  674,  674,  674,  674,  674,  674,  674,  674
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* definitions */
/*%option header-file="chalk-lexer-rpn.flex.h"*/
  #include "chalk-parser-rpn.h"
  #include "CHParserContext.h"
  #include "CHUtils.h"
  #define YY_NO_INPUT
  #define YY_INIT yy_rpnset_column(0, scanner);
  #define YY_USER_ACTION {NSRange currentRange = NSMakeRange(yy_rpnget_column(yyscanner), yy_rpnget_leng(yyscanner)); yy_rpnset_column((int)(currentRange.location+currentRange.length), yyscanner);
  #define YY_BREAK } break;
  extern void tokenizerEmit_rpn(int tokenId, const unsigned char* input, size_t length, NSRange range, CHParserContext* context);
  //#define YY_INPUT(buf,result,max_size) result = [((CHParserContext*)yy_rpnget_extra(yyscanner)).parserFeeder feedBuffer:buf length:max_size]
  #define ECHO {CHParserContext* context = yy_rpnget_extra(yyscanner); context.lastTokenRange = NSMakeRange(yy_rpnget_column(yyscanner), yy_rpnget_leng(yyscanner)); context.stop = YES; yyterminate();}
/*IDENTIFIER {SYMBOL_PI}|{SYMBOL_INFINITY}|{SYMBOL_SQRT}|{SYMBOL_CBRT}|(?i:[_a-z]+[_a-z0-9]*)*/

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE void*

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yy_rpnlex_init (yyscan_t* scanner);

int yy_rpnlex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yy_rpnlex_destroy ( yyscan_t yyscanner );

int yy_rpnget_debug ( yyscan_t yyscanner );

void yy_rpnset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yy_rpnget_extra ( yyscan_t yyscanner );

void yy_rpnset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yy_rpnget_in ( yyscan_t yyscanner );

void yy_rpnset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yy_rpnget_out ( yyscan_t yyscanner );

void yy_rpnset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yy_rpnget_leng ( yyscan_t yyscanner );

char *yy_rpnget_text ( yyscan_t yyscanner );

int yy_rpnget_lineno ( yyscan_t yyscanner );

void yy_rpnset_lineno ( int _line_number , yyscan_t yyscanner );

int yy_rpnget_column  ( yyscan_t yyscanner );

void yy_rpnset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yy_rpnwrap ( yyscan_t yyscanner );
#else
extern int yy_rpnwrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yy_rpnlex (yyscan_t yyscanner);

#define YY_DECL int yy_rpnlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yy_rpnensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_rpn_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_rpn_load_buffer_state(yyscanner );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 675 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8309 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
{
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INDEX_RANGE_OPERATOR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INDEX_RANGE_OPERATOR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INDEX_RANGE_JOKER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INDEX_RANGE_JOKER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_STRING_QUOTED(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_STRING_QUOTED, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_PARENTHESIS_LEFT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_PARENTHESIS_LEFT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_PARENTHESIS_RIGHT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_PARENTHESIS_RIGHT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_PLUS(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_PLUS, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_PLUS2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_PLUS2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_MINUS(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_MINUS, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_MINUS2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_MINUS2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_MINUS_UNARY(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_MINUS_UNARY, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_TIMES(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_TIMES, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_TIMES2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_TIMES2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_DIVIDE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_DIVIDE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_DIVIDE2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_DIVIDE2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_POW(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_POW, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_POW2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_POW2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_SQRT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_SQRT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_SQRT2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_SQRT2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_CBRT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_CBRT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_CBRT2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_CBRT2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_FACTORIAL(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_FACTORIAL, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_FACTORIAL2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_FACTORIAL2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_DEGREE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_DEGREE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_DEGREE2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_DEGREE2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_UNCERTAINTY(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_UNCERTAINTY, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_ABS(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_ABS, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_NOT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_NOT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_NOT2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_NOT2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_LEQ(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_LEQ, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_LEQ2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_LEQ2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_GEQ(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_GEQ, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_GEQ2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_GEQ2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_LOW(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_LOW, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_LOW2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_LOW2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_GRE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_GRE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_GRE2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_GRE2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_EQU(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_EQU, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_EQU2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_EQU2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_NEQ(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_NEQ, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_NEQ2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_NEQ2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_AND(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_AND, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_AND2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_AND2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_OR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_OR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_OR2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_OR2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_XOR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_XOR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_XOR2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_XOR2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_SHL(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_SHL, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_SHR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_SHR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_ASSIGN(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_ASSIGN, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_ASSIGN_DYNAMIC(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_ASSIGN_DYNAMIC, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INTERVAL_LEFT_DELIMITER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTERVAL_LEFT_DELIMITER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INTERVAL_ITEM_SEPARATOR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTERVAL_ITEM_SEPARATOR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INTERVAL_RIGHT_DELIMITER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTERVAL_RIGHT_DELIMITER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_LIST_LEFT_DELIMITER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_LIST_LEFT_DELIMITER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_LIST_RIGHT_DELIMITER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_LIST_RIGHT_DELIMITER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_ENUMERATION_SEPARATOR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_ENUMERATION_SEPARATOR, (const unsigned char*)yytext, yyleng, 
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_IF(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_IF, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_THEN(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_THEN, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_ELSE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_ELSE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_QUESTION(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_QUESTION, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_ALTERNATE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_ALTERNATE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_IDENTIFIER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_IDENTIFIER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  DebugLogStatic(1, @"INTEGER_PER_FRACTION(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTEGER_PER_FRACTION, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  DebugLogStatic(1, @"REAL_PER_FRACTION(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_REAL_PER_FRACTION, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INTEGER_POSITIVE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTEGER_POSITIVE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  printf("REAL_POSITIVE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_REAL_POSITIVE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}               
	YY_BREAK
case 68:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yy_rpnlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yy_rpnwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yy_rpnlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_rpnrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yy_rpnrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yy_rpnrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 101);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 675 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 101;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 675 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 674);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yy_rpnrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yy_rpnwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yy_rpnrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yy_rpnensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_rpn_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_rpn_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_rpn_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_rpn_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yy_rpnpop_buffer_state();
	 *		yy_rpnpush_buffer_state(new_buffer);
     */
	yy_rpnensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_rpn_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yy_rpnwrap()) processing, but the only time this flag
	 * is looked at is after yy_rpnwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_rpn_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_rpn_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yy_rpnalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_rpn_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_rpnalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_rpn_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_rpn_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_rpn_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_rpn_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_rpnfree((void *) b->yy_ch_buf ,yyscanner );

	yy_rpnfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yy_rpnrestart() or at EOF.
 */
    static void yy_rpn_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_rpn_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_rpn_init_buffer was _probably_
     * called from yy_rpnrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_rpn_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_rpn_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yy_rpnpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yy_rpnensure_buffer_stack(yyscanner);

	/* This block is copied from yy_rpn_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_rpn_switch_to_buffer. */
	yy_rpn_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yy_rpnpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_rpn_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_rpn_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yy_rpnensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yy_rpnalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yy_rpnensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yy_rpnrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yy_rpnensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_rpn_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yy_rpnalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_rpn_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_rpn_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yy_rpnlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_rpn_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_rpn_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_rpn_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yy_rpnlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_rpn_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yy_rpnalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_rpn_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_rpn_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_rpn_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yy_rpnget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yy_rpnget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yy_rpnget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yy_rpnget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yy_rpnget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yy_rpnget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yy_rpnget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yy_rpnset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yy_rpnset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yy_rpnset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yy_rpnset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yy_rpnset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_rpn_switch_to_buffer
 */
void yy_rpnset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yy_rpnset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yy_rpnget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yy_rpnset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yy_rpnlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yy_rpnlex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yy_rpnalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yy_rpnlex_init_extra has the same functionality as yy_rpnlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yy_rpnalloc in
 * the yyextra field.
 */
int yy_rpnlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yy_rpnset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yy_rpnalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yy_rpnset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yy_rpnlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yy_rpnlex_init()
     */
    return 0;
}

/* yy_rpnlex_destroy is for both reentrant and non-reentrant scanners. */
int yy_rpnlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_rpn_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yy_rpnpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yy_rpnfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yy_rpnfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yy_rpnlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yy_rpnfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yy_rpnalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yy_rpnrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yy_rpnfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yy_rpnrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void chalk_scan_rpn_buffer(const char* bytes, NSUInteger length, CHParserContext* context)
{
  yyscan_t scanner;
  yy_rpnlex_init_extra(context, &scanner);
  yy_rpn_scan_bytes(bytes, length, scanner);
  yy_rpnset_column(0, scanner);
  yy_rpnlex(scanner);
  yy_rpnlex_destroy(scanner);
}
//end chalk_scan_rpn_buffer()

void chalk_scan_rpn_file(FILE* file, CHParserContext* context)
{
  yyscan_t scanner;
  yy_rpnlex_init_extra(context, &scanner);
  yy_rpnrestart(file, scanner);
  yy_rpnset_column(0, scanner);
  yy_rpnlex(scanner);
  yy_rpnlex_destroy(scanner);
}
//end chalk_scan_rpn_file()

void chalk_scan_rpn_fileDescriptor(int fd, CHParserContext* context)
{
  FILE* file = fdopen(fd, "rb");
  chalk_scan_rpn_file(file, context);
  fclose(file);
}
//end chalk_scan_rpn_fileDescriptor()

void chalk_scan_rpn_nsstring(NSString* input, CHParserContext* context)
{
  const char* bytes = [input UTF8String];
  NSUInteger length = [input lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
  chalk_scan_rpn_buffer(bytes, length, context);
}
//end chalk_scan_rpn_nsstring()

void chalk_scan_rpn(CHParserContext* context)
{
  yyscan_t scanner;
  yy_rpnlex_init_extra(context, &scanner);
  yy_rpn_scan_buffer(0, 0, scanner);//no initial data, it will be queried by YY_INPUT
  yy_rpnlex(scanner);//won't return until 0 is returned by YY_INPUT
  yy_rpnlex_destroy(scanner);
}
//end chalk_scan_rpn()

