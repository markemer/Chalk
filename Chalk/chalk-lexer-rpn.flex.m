
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    #define yy_create_buffer yy_rpn_create_buffer

    #define yy_delete_buffer yy_rpn_delete_buffer

    #define yy_scan_buffer yy_rpn_scan_buffer

    #define yy_scan_string yy_rpn_scan_string

    #define yy_scan_bytes yy_rpn_scan_bytes

    #define yy_init_buffer yy_rpn_init_buffer

    #define yy_flush_buffer yy_rpn_flush_buffer

    #define yy_load_buffer_state yy_rpn_load_buffer_state

    #define yy_switch_to_buffer yy_rpn_switch_to_buffer

    #define yypush_buffer_state yy_rpnpush_buffer_state

    #define yypop_buffer_state yy_rpnpop_buffer_state

    #define yyensure_buffer_stack yy_rpnensure_buffer_stack

    #define yylex yy_rpnlex

    #define yyrestart yy_rpnrestart

    #define yylex_init yy_rpnlex_init

    #define yylex_init_extra yy_rpnlex_init_extra

    #define yylex_destroy yy_rpnlex_destroy

    #define yyget_debug yy_rpnget_debug

    #define yyset_debug yy_rpnset_debug

    #define yyget_extra yy_rpnget_extra

    #define yyset_extra yy_rpnset_extra

    #define yyget_in yy_rpnget_in

    #define yyset_in yy_rpnset_in

    #define yyget_out yy_rpnget_out

    #define yyset_out yy_rpnset_out

    #define yyget_leng yy_rpnget_leng

    #define yyget_text yy_rpnget_text

    #define yyget_lineno yy_rpnget_lineno

    #define yyset_lineno yy_rpnset_lineno

        #define yyget_column yy_rpnget_column

        #define yyset_column yy_rpnset_column

    #define yywrap yy_rpnwrap

    #define yyalloc yy_rpnalloc

    #define yyrealloc yy_rpnrealloc

    #define yyfree yy_rpnfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yy_rpnrestart(yyin ,yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yy_rpnrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yy_rpnrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_rpn_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_rpn_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_rpn_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_rpn_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_rpnpush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yy_rpnpop_buffer_state ( yyscan_t yyscanner );

static void yy_rpnensure_buffer_stack ( yyscan_t yyscanner );
static void yy_rpn_load_buffer_state ( yyscan_t yyscanner );
static void yy_rpn_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_rpn_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_rpn_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_rpn_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_rpn_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yy_rpnalloc ( yy_size_t , yyscan_t yyscanner );
void *yy_rpnrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yy_rpnfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_rpn_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yy_rpnensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_rpn_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yy_rpnensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_rpn_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yy_rpnwrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 68
#define YY_END_OF_BUFFER 69
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[688] =
    {   0,
        0,    0,   69,   68,    1,   22,   68,   68,   68,   68,
        5,    6,    3,    7,   57,    9,   68,   14,   66,   62,
       53,   34,   68,   36,   61,   63,   63,   63,   63,   63,
       63,   63,   63,   52,   54,   16,   63,   55,   27,   56,
       28,   68,   68,   68,   68,   68,   68,    1,    0,   40,
       23,   50,   51,    0,   11,   24,    4,   42,   44,    0,
       40,   30,   32,   48,   49,   46,    0,    0,   66,   66,
       42,    0,    0,   16,   13,    0,    8,   10,    0,   67,
       15,    0,   66,   66,   64,   67,   66,   66,   66,   66,
        0,    0,    0,    0,   48,   30,   35,   38,   32,   49,

       37,   67,   63,   63,   63,   63,   63,   63,   63,   58,
       63,   63,   44,   63,   63,   17,   46,   63,   63,   63,
       44,   29,   24,   26,   12,   14,   63,    0,    0,   41,
       25,   43,   45,   41,   31,   33,   47,   43,    2,    0,
       67,   67,   65,    0,   67,   67,   67,   67,    0,    0,
        0,   66,    0,   67,   67,    0,   67,   67,   67,   67,
        0,   66,   66,    0,   66,   66,   66,   66,   66,    0,
        0,   31,   39,   33,   67,   67,   67,   67,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   42,   63,   63,
       11,   28,   45,   63,   46,   47,   25,   18,   20,    0,

        0,    0,    0,   67,    0,   67,   67,    0,    0,   67,
       67,    0,   67,   67,   67,   67,   67,    0,    0,   66,
       66,   66,   66,   66,   66,    0,    0,   67,   67,   67,
        0,    0,    0,   67,   67,    0,   67,   67,   67,   67,
       67,    0,    0,   67,   67,    0,   66,   66,   64,   66,
       66,   66,   66,    0,    0,    0,   66,   64,   67,   64,
        0,   67,   67,    0,   67,   67,   67,   67,    0,    0,
       67,   67,   67,   67,   67,   67,   67,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   60,   59,   19,   21,   67,   67,   67,

       67,   67,   67,   67,   67,   67,    0,   67,    0,   67,
       67,    0,   67,   67,   67,   67,   67,   67,    0,   67,
       65,   65,    0,    0,   66,   66,   66,   66,   66,   66,
       66,   66,   66,   67,   67,   67,   67,   67,    0,   67,
        0,    0,    0,   67,    0,    0,   67,   67,    0,   67,
       67,   67,   67,   67,   67,    0,   67,   65,    0,   67,
       67,   67,   67,    0,   66,   66,    0,    0,   67,    0,
       67,   67,    0,   67,   67,    0,   67,   67,   67,   67,
       67,    0,   67,   67,   67,   67,    0,   67,   67,   67,
       67,   67,   67,    0,   67,   67,   67,   67,   67,   67,

       67,   65,   63,   63,   63,   63,   67,   67,   67,   67,
       67,    0,   67,   67,   67,    0,   67,   67,   67,   65,
       67,   67,   67,   67,   67,   67,   66,   66,   66,   66,
       66,   66,   66,   66,   66,   66,   66,   64,    0,   67,
       67,   67,    0,   67,   67,   67,   65,   67,    0,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       66,   66,   66,   66,   66,   66,   64,   64,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,    0,   67,
       67,    0,   67,   67,   67,   67,   67,   67,    0,   67,
       65,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   63,   63,   67,   67,   67,   67,   67,   65,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   66,
       66,   66,   66,   66,   64,   66,   67,   64,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   65,    0,   66,   66,   66,   66,
       66,   66,   66,   67,   67,   67,   67,   67,    0,   67,
       67,   67,    0,   67,   67,   67,   65,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   65,    0,   67,   67,   67,   67,   67,
       67,   67,   66,   66,   64,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   65,   65,    0,   67,   67,   67,
       67,   67,   67,   67,    0,   67,   67,   64,   67,   67,
       67,   67,   67,   65,   67,   67,   67,   67,   67,   67,
       67,   67,   65,    0,   67,   67,   67,   67,   67,   67,
       67,    0,   67,   67,   65,   65,   64,    0,   67,   67,
       65,   67,   65,   67,   67,   67,   67,   65,    0,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   65,   67,   65,   67,   65,   65,    0,   67,   67,
       65,   65,   65,   67,   65,   65,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    4,    1,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,   23,   24,
       25,   26,   27,    1,   28,   29,   29,   30,   31,   32,
       33,   34,   35,   29,   29,   36,   29,   37,   38,   39,
       29,   40,   41,   42,   29,   29,   29,   43,   29,   29,
       44,   45,   46,   47,   48,   49,   50,   29,   29,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   29,   64,   65,   66,   29,   29,   29,   67,
       29,   29,   68,   69,   70,   71,    1,   72,    1,    1,
        1,    1,   73,    1,    1,   74,    1,    1,   75,    1,
        1,    1,   76,   77,   78,    1,    1,    1,    1,    1,
       79,    1,   80,   81,   82,   83,   84,   85,    1,   86,
        1,    1,    1,    1,    1,   87,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   88,   89,    1,    1,    1,
        1,    1,   90,    1,   91,   92,   93,    1,    1,    1,
       94,    1,    1,   95,   96,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,   97,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,   98,   99,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,  100,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[102] =
    {   0,
        1,    2,    1,    1,    1,    1,    1,    3,    3,    4,
        3,    1,    1,    1,    1,    1,    1,    5,    6,    1,
        7,    1,    1,    1,    1,    1,    8,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    1,    1,    1,    3,    1,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    2,    1,    1,    4,    4,    1,

        1
    } ;

static const flex_int16_t yy_base[890] =
    {   0,
        0,    0, 1244, 9504,  100,   78,  107,  113,  118,   95,
     9504, 9504,   89,   86, 9504, 1216, 1217, 1204,  160,   93,
     9504,  117, 1204,   83, 9504,  258,  209,   87,   85,  105,
       85,   96,  110, 9504, 9504,  106,  165, 9504, 1154, 9504,
     1194,   89,  103, 1145, 1141, 1129, 1115,  126, 1118, 1167,
     9504, 9504, 9504,  138,  140,  153, 9504,  180,  182, 1190,
      187,  189,  197,  143,  147,  199,  228, 1167,  272, 1166,
      304,  190, 1178, 1149, 9504, 1157, 9504, 9504,  186,  330,
     9504,  195,  227,  231, 9504,  355,    0, 1154,  453,  551,
     1085, 1095, 1083, 1131, 1134, 1119, 9504, 1116, 1108, 9504,

     9504,  427,  502,    0,  649,  171,  251,  747,  197,    0,
      210,  199, 1107,  200,  211, 9504, 1097,  577,    0,  339,
     1093, 9504, 1085, 9504, 1081, 1078, 9504,  203,  216, 9504,
      247,  249,  264,  271,  289,  298,  310, 9504, 9504,  284,
      388,  439, 9504, 1084,  675,    0,  845,  943, 1011, 1024,
     1019,  772, 1075,  563,  635, 1065,  820,  918, 1041, 1139,
     1009, 1015, 1090,  364, 1153, 1201, 1055,  296,  350,  240,
      989, 9504, 9504, 9504, 1258, 1263, 1361, 1459, 1386, 1557,
     1434, 1655, 1532, 1630, 1753, 1187, 1005, 1851,  270, 1949,
     1035,  350, 9504, 2047,  353, 9504, 9504, 1018, 1006,  953,

      947,  289,  923, 1727,  990, 1802, 1865,  938,  986,  326,
      327,  448, 1923, 1998,  985,  336,  370,  327,  919,  870,
      957, 2061, 2109, 2207, 2305,  978,  973, 2123, 2181, 1285,
      300,  973,  904,  379,  382,  472, 2256, 2319,  971,  402,
      413,  334,  486,  804, 1516,  316, 2353, 2367, 9504,  422,
      424,  480,  526,  897,  908,  896,  574,  448,  976, 9504,
      390, 1027, 1312,  952, 2423, 2437, 2535, 2633,  877,  874,
     2471, 2519, 2584, 2647, 2745, 2843,  882, 2696, 2941, 2759,
      873,  341,  318,  907,    0,  512,  860, 2817, 3039,  537,
      854,  440,  894, 3137,  888, 9504, 9504, 2892, 2967, 3235,

     3333, 1614, 3065,  886,  414,  504,  400, 1377,  633, 1786,
     2918,  432,  437,  516, 3163, 3261,  880,  511,  806,  517,
        0, 9504,  856,  836, 3358, 3406,  518,  528, 3431, 3476,
      830,  550,  560, 3016, 3501,  826,  565,  592,  640, 1484,
      711,  742,  761, 3546,  808,  731, 3114, 3212,  522,  538,
      540, 3571, 3616,  808,  600,  737,  630,    0,  604, 1581,
     3310,    0,  756,  722, 3632, 3730,  620,  720, 3681,  777,
     3665, 3744,  773,  601,  647,  829, 3792, 3837,  766,  655,
      712,  628, 3806, 3863, 3912, 3938,  607,  610,  629, 3983,
     4032, 4130, 4228,  691,  786,  799,    0,    0,  751,  673,

      758,    0, 4326, 4424,  798, 4522, 4048, 4105,  749,  682,
      825,  636, 4007, 4163,  698,  668,  719,  708,  847,    0,
     1679, 4187,    0,  672, 4212, 4285, 4310,  710,  744,  851,
      651,  702, 4408, 4473,  707,  746,  861,    0,  739, 4390,
     4506,  658,  627,  693,  769,  872,    0, 4555,  420, 4588,
     4636, 4734, 4832, 2066, 4457,    0,  632, 4650, 2095, 4622,
     2486, 2858, 4759, 4807, 4930, 5028, 4905, 9504, 5003, 5073,
     5171, 5269, 4889, 5098,  671,  842,  878, 1884,  939, 5122,
     5143,  741,  787,  792, 5243, 5314,  664,  868,  592,  895,
        0, 5338, 5363,  584, 5379, 5436,  969,    0,  621,  912,

      938, 5461, 5506, 5531, 5576, 5601,  618,  916,  967,    0,
     3034, 5625, 1935, 2193, 5658, 5706, 5804, 5902, 5684, 5778,
      567,  609,  941,  984,    0, 6000, 3132, 5837, 5853, 5951,
      606,  955, 1001, 5886, 2638, 3506, 6014, 6062, 6160, 6258,
     1019, 6095, 6119,  559, 6144,  584,  898, 1074, 6242, 6307,
      586,  994, 1047, 6323, 6372,  577, 1052, 1059,  800, 6224,
     6356,  495,  471,  531, 1053, 1067,    0, 3230, 6405,    0,
      484, 6421, 6519, 3735, 4351, 6470, 6486, 6617, 6715, 1081,
     6545, 6586,  452, 6643,  485, 6740, 6773, 6798, 6843,  450,
     1065, 1105, 6941, 7039, 6868, 1156, 6892, 6913,  389, 7013,

     7084,  426, 1068, 1164,    0, 7108,  396, 7133, 7149, 7206,
     7231,  390, 1069, 1165,  385, 1220, 7255, 7288, 7336, 7350,
      373, 1070, 1182,    0, 3390, 7395, 4750, 4857, 7452, 7457,
     7555, 7653, 7580,  321, 7471, 7628, 7698, 7723,  269, 1088,
     1196,  242, 1291, 7747, 7780, 7828, 7842,  224, 1304, 7887,
     7944, 1411, 7910, 1328, 7958, 7989,  152, 8014,  182, 8020,
     8083, 8128, 8153,  172, 1127, 1215, 8198, 8223,  113, 1136,
     1228,    0, 1509, 8247, 1607, 8268, 1535,  775, 1632,  503,
        0, 1671, 1705, 1723,    0, 1730, 9504, 8367, 8373, 8380,
     8383, 8389, 8395, 8400, 8406, 8412, 8417, 8423, 8428, 8434,

     8440, 8446, 8451, 8457, 8462, 8464, 8469, 8475, 8481, 8486,
     8491, 8497, 8503, 8509, 8515, 8521, 8527, 8533, 8538, 8544,
     8550, 8555, 8560, 8565, 8571, 8576, 8582, 8588, 8593, 8598,
     8604, 8609, 8615, 8620, 8626, 8632, 8637, 8643, 8648, 8654,
     8660, 8665, 8671, 8677, 8683, 8688, 8694, 8700, 8706, 8712,
     8718, 8723, 8728, 8734, 8740, 8746, 8751, 8756, 8762, 8768,
     8773, 8778, 8783, 8788, 8794, 8800, 8806, 8812, 8817, 8822,
     8828, 8833, 8838, 8843, 8848, 8854, 8860, 8866, 8872, 8878,
     8884, 8890, 8896, 8902, 8908, 8914, 8919, 8924, 8930, 8936,
     8942, 8948, 8954, 8960, 8966, 8971, 8976, 8981, 8986, 8992,

     8998, 9004, 9010, 9016, 9022, 9027, 9032, 9038, 9044, 9050,
     9056, 9062, 9067, 9073, 9079, 9085, 9090, 9096, 9101, 9107,
     9113, 9119, 9125, 9130, 9136, 9142, 9148, 9153, 9159, 9165,
     9170, 9176, 9181, 9187, 9193, 9199, 9205, 9210, 9215, 9221,
     9226, 9232, 9238, 9243, 9249, 9255, 9260, 9265, 9271, 9277,
     9283, 9288, 9294, 9300, 9306, 9311, 9316, 9322, 9327, 9333,
     9339, 9345, 9350, 9356, 9361, 9367, 9373, 9379, 9384, 9389,
     9395, 9400, 9406, 9412, 9418, 9423, 9429, 9435, 9440, 9446,
     9451, 9457, 9463, 9468, 9473, 9479, 9485, 9490, 9496
    } ;

static const flex_int16_t yy_def[890] =
    {   0,
      687,    1,  687,  687,  687,  687,  688,  689,  689,  690,
      687,  687,  687,  687,  687,  687,  691,  687,  692,  687,
      687,  687,  687,  687,  687,  693,  693,   27,   27,   27,
       27,   27,   27,  687,  687,  687,  694,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  688,  688,  688,  687,  688,  688,  688,
      688,  688,  688,  688,  688,  688,  689,  691,  692,   69,
      689,  690,  690,  687,  687,  687,  687,  687,  687,  695,
      687,  696,   69,   69,  687,  697,   69,   69,  698,  698,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  699,  700,   27,  701,   27,   27,  701,   27,   27,
      108,   27,   27,   27,   27,  687,  687,  700,   27,  694,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      688,  688,  688,  688,  688,  688,  688,  687,  687,  702,
      703,  703,  687,  687,  695,  145,  704,  704,  687,  687,
      687,  705,  706,  707,  707,  687,  708,  708,  709,  709,
      687,  710,  710,  711,  712,  712,  166,  166,  166,  687,
      687,  687,  687,  687,  713,  713,  714,  714,  715,  716,
      715,  716,  717,  718,  718,  719,  185,  720,  185,  720,
      185,  190,  687,  719,  190,  687,  687,  687,  687,  687,

      687,  687,  687,  721,  722,  723,  723,  687,  687,  207,
      207,  724,  725,  725,  214,  214,  214,  687,  687,  726,
      726,  727,  727,  728,  728,  687,  729,  730,  730,  687,
      731,  687,  687,  229,  229,  732,  733,  733,  238,  238,
      238,  687,  734,  735,  735,  736,  737,  737,  687,  248,
      248,  248,  248,  687,  687,  687,  248,  248,  687,  687,
      738,  739,  739,  687,  740,  740,  741,  741,  687,  687,
      742,  742,  743,  743,  744,  744,  276,  745,  745,  746,
      279,  279,  279,  279,  279,  279,  279,  747,  747,  289,
      289,  289,  289,  748,  289,  687,  687,  749,  749,  750,

      750,  751,  751,  303,  303,  303,  687,  752,  753,  754,
      754,  755,  303,  303,  756,  756,  316,  316,  687,  316,
      316,  687,  687,  757,  758,  758,  326,  326,  759,  759,
      330,  330,  330,  760,  760,  335,  335,  335,  687,  761,
      762,  762,  687,  763,  687,  764,  765,  765,  766,  335,
      335,  767,  767,  353,  353,  687,  353,  353,  768,  769,
      769,  361,  361,  687,  770,  771,  687,  687,  772,  773,
      774,  774,  687,  372,  372,  775,  776,  776,  378,  378,
      378,  687,  777,  777,  778,  778,  779,  384,  384,  780,
      780,  781,  781,  687,  386,  386,  378,  378,  378,  378,

      378,  378,  782,  782,  404,  783,  784,  784,  408,  408,
      408,  785,  786,  786,  414,  687,  414,  414,  414,  414,
      787,  787,  422,  422,  788,  789,  789,  427,  427,  427,
      427,  427,  790,  790,  434,  434,  434,  434,  791,  792,
      792,  441,  687,  441,  441,  441,  441,  793,  687,  794,
      794,  795,  795,  796,  796,  455,  455,  797,  798,  793,
      799,  799,  800,  800,  801,  801,  802,  687,  803,  803,
      804,  804,  805,  805,  474,  474,  474,  806,  807,  808,
      808,  809,  474,  474,  810,  810,  486,  486,  687,  486,
      486,  811,  811,  493,  812,  812,  474,  474,  474,  474,

      474,  813,  814,  815,  816,  816,  506,  506,  506,  506,
      817,  818,  819,  819,  820,  820,  821,  821,  822,  822,
      520,  520,  520,  520,  520,  823,  824,  825,  826,  826,
      530,  530,  530,  827,  828,  828,  829,  829,  830,  830,
      831,  832,  832,  543,  825,  833,  520,  520,  834,  834,
      550,  550,  550,  835,  835,  555,  555,  555,  836,  837,
      837,  561,  687,  561,  561,  561,  561,  838,  838,  569,
      569,  839,  840,  841,  841,  842,  842,  843,  843,  844,
      845,  845,  582,  846,  847,  848,  848,  849,  849,  589,
      589,  589,  850,  850,  851,  852,  853,  853,  598,  854,

      854,  601,  601,  601,  601,  855,  856,  857,  857,  858,
      858,  611,  611,  611,  859,  859,  860,  861,  862,  862,
      620,  620,  620,  620,  863,  864,  865,  865,  866,  866,
      867,  867,  868,  869,  870,  870,  871,  871,  638,  638,
      638,  872,  872,  873,  874,  875,  875,  876,  876,  877,
      878,  879,  880,  881,  882,  882,  656,  883,  884,  885,
      885,  886,  886,  663,  663,  663,  887,  887,  668,  668,
      668,  668,  888,  889,  876,  877,  879,  881,  881,  656,
      663,  888,  876,  881,  656,  881,    0,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687
    } ;

static const flex_int16_t yy_nxt[9606] =
    {   0,
        4,    5,    4,    4,    4,    6,    7,    8,    8,    4,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   27,
       28,   27,   27,   27,   29,   27,   30,   31,   27,   27,
       27,   32,   33,   34,    4,   35,   36,   37,    4,   26,
       27,   28,   27,   27,   27,   29,   27,   27,   27,   27,
       30,   31,   27,   27,   27,   32,   33,   38,   39,   40,
       41,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,   42,   43,   44,   45,    4,   46,

       47,   48,   50,   74,   51,   76,   57,   99,  100,  101,
       55,   56,   77,   57,   94,   75,  110,   52,   58,   59,
       67,   67,  109,   67,  113,   67,   67,   48,   71,  114,
      376,   68,  116,   69,   52,  111,   68,  110,   69,   73,
       95,   96,  112,   97,   57,  109,   57,  115,  113,   57,
      114,   60,  117,   57,   52,   61,  111,   62,   63,   57,
       67,   82,   53,   64,   65,   67,  112,   83,   84,   85,
       84,  115,   67,   67,   48,   67,  123,  124,   86,  131,
       87,  125,   60,   68,   60,  118,   57,   60,   57,  376,
       89,   60,  126,   57,   49,   57,   82,   60,   89,   66,

      188,   57,  659,   57,  139,   57,  132,   84,  133,  139,
       82,   89,  120,  134,  680,  135,   83,   84,   85,   84,
       49,  188,   90,  136,   60,  137,   60,  102,  687,  103,
      194,   60,  687,   60,   73,   67,   67,  190,   67,  105,
      192,   60,  191,   60,  648,  153,   68,  105,   69,  153,
      195,  194,  687,   57,   91,   57,  107,   92,   93,   82,
      105,  190,  642,  191,  192,   83,   84,   85,   84,  153,
       57,  108,  187,   82,  195,   67,  102,   57,  103,   83,
       84,   85,   84,  198,  199,  140,  376,  127,  105,   91,
       86,   60,   87,   60,  106,   57,  105,  200,  201,  202,

      203,  231,   89,   91,   57,  107,   92,   93,   60,  105,
       89,   67,   67,  164,   67,   60,   57,  246,  106,   84,
      108,  687,   68,   89,   69,  687,  259,   85,   85,  293,
      138,  140,  292,   60,   90,  687,   86,  141,  142,  143,
      142,  634,   60,  687,  687,  687,   67,   67,  144,   67,
      145,   67,   91,  212,   60,   92,   93,   68,  257,  118,
      147,  127,  154,  155,  143,  155,   91,  164,  147,   92,
       93,  243,  243,  156,  243,  157,  122,  142,  149,  196,
      105,  147,  127,  105,  244,  159,  120,  212,  305,  305,
      376,  261,  148,  159,  233,  141,  687,  143,  320,  687,

      404,  105,  155,  403,  105,  615,  159,  236,  205,  258,
      254,  243,  257,  308,  143,  143,  607,  160,  206,  236,
      340,  143,  143,  246,  149,  246,  206,  150,  151,  321,
      236,  212,  320,  312,  154,  155,  143,  155,  687,  206,
       86,  337,  102,  236,  337,  156,  141,  175,  143,  246,
      207,  650,  161,  151,   82,  309,  309,  177,  309,  205,
      162,  163,   85,  163,  357,  177,  102,  212,  310,  206,
      164,  102,  358,  165,  155,  357,  419,  206,  177,  346,
      346,  246,  346,  167,  269,  208,  151,  143,  143,  178,
      206,  167,  347,  243,  243,  309,  243,  164,  102,  293,

      163,  207,  406,   82,  167,  585,  244,  249,  249,   83,
       84,   85,   84,  687,  644,  168,  254,  687,  254,  346,
       86,  212,  103,  349,  161,  151,  319,  246,  212,  687,
      153,  687,  180,  243,  212,  687,  208,  151,  687,  687,
      180,  687,  254,  164,  102,  687,  626,   91,  376,  181,
       92,   93,   82,  180,  687,  153,  559,  566,  162,  163,
       85,  163,  685,  420,  182,  680,  419,  164,  164,  102,
      154,  165,  143,  320,  254,  246,  321,  164,   82,  320,
      429,  167,  236,  227,   83,   84,   85,   84,  366,  167,
      429,  164,  102,  228,  376,   86,   91,  103,  163,   92,

       93,  228,  167,  164,  546,  359,  687,  180,  387,  236,
      687,  687,  437,  169,  228,  180,  356,  236,  687,  438,
      254,  617,  437,  236,  181,  229,  164,  446,  180,  593,
      687,  687,  687,  258,  687,  212,  366,  412,  376,  182,
      309,  309,  154,  309,  143,   91,  573,  236,   92,   93,
       82,  447,  687,  310,  446,  227,  162,  163,   85,  163,
      208,  151,  357,  476,  687,  228,  164,  102,  254,  183,
      341,   91,  376,  228,   92,   93,  140,  482,  341,  185,
      309,  376,  141,  142,  143,  142,  228,  185,  376,  358,
      376,  341,  357,  144,  534,  145,  186,  229,  364,  212,

      185,  394,  341,  687,  687,  147,  259,  249,  249,  476,
      236,  187,  439,  147,  478,  143,  143,  490,  243,  243,
      446,  243,  142,  687,  164,  212,  147,  164,  164,  376,
      416,  244,  208,  151,  512,  490,  212,  148,  346,  346,
      439,  346,  482,   91,  509,  687,   92,   93,   82,  243,
      243,  347,  243,  412,  162,  163,   85,  163,  243,  164,
      419,  164,  244,  164,  164,  102,  212,  183,  376,  149,
      419,  491,  150,  151,  490,  376,  387,  185,  346,  220,
      221,   85,  221,  376,  687,  185,  236,  687,  687,  243,
       86,  478,  222,  687,  186,  678,  687,  370,  185,  468,

      687,  559,  224,  687,  448,  359,  524,  359,  526,  189,
      224,  360,  360,  143,  360,  164,  687,  491,  460,  221,
      490,  231,  349,  224,  361,  236,  340,  154,  155,  143,
      155,  446,  449,  443,  225,  489,  479,  479,  232,  479,
      157,   91,  212,  236,   92,   93,  140,  164,  500,  480,
      159,  360,  210,  211,  143,  211,  324,  503,  159,  376,
      405,  500,  212,  144,  212,  213,  363,  155,  164,   92,
       93,  159,  687,  687,  226,  215,  479,  220,  164,   85,
      687,  687,  160,  215,  510,  376,  687,  509,  323,  236,
      324,  312,  211,  687,  563,  376,  215,  212,  364,  687,

      325,  208,  151,  212,  566,  687,  420,  216,  325,  419,
      525,  687,  376,  524,  233,  164,  406,  161,  151,  231,
      438,  325,  405,  526,  687,  154,  155,  143,  155,  376,
      490,  447,  326,  212,  446,  403,  232,  567,  157,  149,
      566,  402,  150,  151,  140,  382,  479,  479,  159,  479,
      210,  211,  143,  211,  491,  376,  159,  490,  164,  480,
      212,  144,  261,  213,  220,  155,   85,   92,   93,  159,
      373,  368,  236,  215,  566,  323,  484,  324,  509,  367,
      160,  215,  246,  339,  212,  249,  479,  325,  236,  231,
      211,  345,  687,  227,  215,  325,  259,  567,  322,  561,

      566,  164,  212,  594,  308,  217,  341,  561,  325,  307,
      205,  164,  233,  127,  341,  161,  151,  604,  236,  326,
      561,  127,  162,  163,   85,  163,  510,  341,  143,  509,
      127,  562,  297,  153,  262,  165,  143,  149,  342,  615,
      150,  151,  231,  525,  296,  167,  594,  370,  234,  235,
      143,  235,  687,  167,   92,   93,  553,  371,  236,  232,
      605,  237,  163,  604,  164,  371,  167,  292,  260,  376,
      376,  239,  164,  343,  256,  687,  376,  168,  371,  239,
      242,  616,  212,  230,  376,  236,  236,  376,  235,  372,
      143,  164,  239,  226,  219,  218,  140,  162,  163,   85,

      163,  642,  209,  240,   81,  376,  618,   75,  153,  553,
      165,  197,   92,   93,  623,  566,  208,  151,  624,  193,
      167,  623,  212,  196,  208,  151,  567,  592,  167,  566,
      604,  614,  623,  193,  174,  233,  594,  163,  161,  151,
      231,  167,  173,  643,  376,  172,  234,  235,  143,  235,
      671,   53,  168,  376,  246,   53,  236,  232,  171,  237,
      247,  248,  249,  248,  645,  143,  170,  592,  687,  239,
       82,   86,  102,  250,  124,  116,  648,  239,  208,  151,
      687,  236,  236,  252,  102,  687,  235,   92,   93,  666,
      239,  252,  687,  130,  162,  163,   85,  163,  671,  376,

      248,  241,  246,   48,  252,  153,  123,  183,  247,  248,
      249,  248,  129,  376,  128,  253,  127,  185,  649,  102,
      122,  250,  121,  605,  651,  185,  604,  614,   98,  143,
       81,  252,  376,  233,  186,   79,  161,  151,  185,  252,
      615,  624,   78,  687,  623,  376,  687,  254,  248,  187,
      255,  256,  252,  208,  151,  672,  687,  687,  671,  261,
      687,  687,  687,  253,  261,  262,  263,  143,  263,  687,
      262,  263,  143,  263,  681,  687,  264,  666,  265,  687,
      687,  264,  652,  265,   92,   93,  687,  672,  267,  687,
      671,  687,  339,  267,  249,  254,  267,  687,  255,  256,

      143,  267,  687,  340,  687,  263,  687,  687,  687,  267,
      263,  642,  687,  143,  267,  341,  687,  208,  151,  262,
      268,  143,  687,  341,  648,  268,  687,  687,  687,  687,
      687,  687,  370,  687,  687,  687,  341,  143,  687,  687,
      687,  687,  371,  687,  687,  687,  687,  342,  678,  687,
      371,  687,  269,  673,  687,  270,  151,  269,  687,  687,
      270,  151,  261,  371,  687,  687,  675,  687,  271,  272,
      143,  272,  687,  687,  372,  687,  687,  687,  236,  264,
      687,  273,  343,  256,  141,  687,  143,   82,  208,  151,
      679,  275,  687,   83,   84,   85,   84,  205,  687,  275,

      687,  208,  151,  687,  102,  687,  103,  206,  272,  208,
      151,  687,  275,  687,  687,  206,  180,  687,  687,  687,
      143,  687,  687,  276,  180,  208,  151,  687,  206,  687,
      687,  615,  687,  181,  687,  687,  687,  180,  687,  207,
      687,   83,   84,   85,   84,  687,  687,  687,  182,  687,
      687,  687,  153,  687,  103,  269,  687,  687,  270,  151,
      261,  687,  687,  687,  180,  687,  271,  272,  143,  272,
      677,  687,  180,  652,  208,  151,  236,  264,  687,  273,
       91,  181,  687,   92,   93,  180,  687,  687,  687,  275,
      687,  154,  687,  143,  687,  687,  182,  275,  687,  687,

      687,  687,  687,  687,  227,  687,  272,  687,  208,  151,
      275,  687,  687,  687,  228,  687,  687,  359,  143,  687,
      687,  277,  228,  360,  360,  143,  360,  687,  687,  642,
      687,   92,   93,  246,  687,  228,  361,  687,  687,  247,
      248,  249,  248,  687,  143,  687,  229,  687,  687,  687,
       86,  687,  283,  269,  687,  615,  270,  151,   82,  687,
      687,  687,  285,  360,  162,  163,   85,  163,  682,  687,
      285,  673,  687,  687,  164,  102,  687,  183,  363,  286,
      687,  208,  151,  285,  687,  687,  687,  279,  360,  360,
      143,  360,  687,  687,  287,  279,  687,  616,  687,  687,

      687,  361,  687,  687,  280,  687,  208,  151,  279,  687,
      364,  687,  687,  208,  151,  412,  143,  687,  687,  281,
      687,  314,  314,  143,  314,  687,  254,  648,  360,  255,
      256,  246,  208,  151,  413,  687,  687,  247,  248,  249,
      248,  143,  687,  363,  687,  687,  687,  687,  102,  687,
      283,   91,  678,  687,   92,   93,   82,  687,  687,  687,
      289,  314,  162,  163,   85,  163,  683,  687,  289,  675,
      687,  687,  164,  102,  687,  183,  415,  290,  208,  151,
      143,  289,  687,  687,  687,  279,  421,  421,  143,  421,
      687,  642,  291,  279,  684,  687,  687,  687,  687,  422,

      687,  687,  280,  687,  208,  151,  279,  687,  416,  687,
      687,  208,  151,  687,  143,  687,  687,  282,  687,  687,
      687,  687,  687,  687,  254,  648,  421,  255,  256,  208,
      151,  687,  143,  643,  141,  142,  143,  142,  687,  143,
      687,  424,  687,  678,  687,  144,  687,  298,  687,   91,
      678,  687,   92,   93,  246,  687,  687,  300,  687,  687,
      247,  248,  249,  248,  687,  300,  687,  649,  208,  151,
      164,  102,  687,  283,  142,  687,  208,  151,  300,  687,
      687,  687,  686,  289,  687,  684,  687,  412,  687,  301,
      687,  289,  679,  421,  421,  143,  421,  687,  687,  687,

      290,  687,  208,  151,  289,  687,  422,  687,  687,  210,
      211,  143,  211,  687,  687,  291,  687,  687,  687,  212,
      208,  151,  302,  687,  150,  151,  687,  208,  151,  687,
      687,  687,  304,  421,  687,  687,  687,  687,  687,  687,
      304,  687,  687,  687,  687,  687,  687,  254,  424,  211,
      255,  256,   82,  304,  687,  687,  687,  687,   83,   84,
       85,   84,  687,  687,  305,  687,  687,  687,  687,  102,
      687,  103,  210,  211,  143,  211,  687,  138,  687,  687,
      416,  105,  212,  208,  151,  302,  687,  687,  687,  105,
      687,  262,  687,  143,  687,  304,  687,  687,  107,  208,

      151,  687,  105,  304,  370,  687,  687,  687,  687,  687,
      687,  687,  211,  108,  371,  687,  304,  687,  687,  687,
      687,  687,  371,  687,  312,  687,  687,  306,  687,  687,
      313,  314,  143,  314,  687,  371,  687,  687,  687,  687,
      687,  144,  513,  315,  143,   91,  372,  687,   92,   93,
       82,  687,  687,  317,  687,  585,   83,   84,   85,   84,
      687,  317,  208,  151,  687,  586,  687,  102,  687,  103,
      314,  687,  687,  586,  317,  687,  687,  687,  687,  294,
      687,  208,  151,  687,  687,  318,  586,  105,  687,  687,
      687,  687,  687,  687,  687,  687,  107,  587,  687,  312,

      294,  687,  687,  687,  687,  313,  314,  143,  314,  687,
      687,  108,  687,  687,  687,  687,  144,  319,  315,  687,
      150,  151,  687,  687,  687,  687,  687,  687,  317,  687,
      687,  687,  208,  151,  687,  687,  317,  687,  687,  687,
      687,  687,  687,   91,  687,  314,   92,   93,   82,  317,
      687,  687,  687,  687,  162,  163,   85,  163,  687,  687,
      318,  687,   82,  687,  164,  102,  687,  183,  220,  221,
       85,  221,  687,  454,  454,  143,  454,  185,  687,   86,
      687,  222,  687,  295,  687,  185,  455,  687,  687,  687,
      687,  224,  319,  687,  186,  150,  151,  687,  185,  224,

      687,  687,  541,  541,  143,  541,  687,  295,  221,  187,
       82,  687,  224,  454,  687,  542,  220,  221,   85,  221,
      687,  687,  687,  225,  687,  687,  687,   86,  457,  222,
      234,  235,  143,  235,  687,  687,  687,  687,  687,  224,
      236,   91,  541,  334,   92,   93,  687,  224,  687,  687,
      687,  687,  687,  336,  687,   91,  221,  544,   92,   93,
      224,  336,  687,  208,  151,  687,  687,  687,  687,  687,
      235,  225,  687,  687,  336,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  337,  687,  687,  234,  235,
      143,  235,  208,  151,  687,  687,  687,  687,  236,  687,

      513,  334,  143,   91,  687,  687,   92,   93,   82,  687,
      687,  336,  687,  585,  327,  328,   85,  328,  687,  336,
      208,  151,  687,  586,  164,   86,  687,  329,  235,  687,
      687,  586,  336,  687,  687,  687,  687,  331,  687,  687,
      687,  687,  687,  338,  586,  331,  687,  687,  687,  687,
      687,  687,  687,  687,  328,  587,  687,  349,  331,  687,
      687,  687,  687,  350,  351,  143,  351,  687,  687,  332,
      687,  687,  687,  687,  232,  687,  352,  687,  208,  151,
      687,  687,  687,  687,  687,  687,  354,  687,  687,  687,
      208,  151,  687,  687,  354,  687,  687,  687,  687,  687,

      687,   91,  687,  351,   92,   93,   82,  354,  687,  687,
      687,  687,  327,  328,   85,  328,  687,  687,  355,  687,
      349,  687,  164,   86,  687,  329,  350,  351,  143,  351,
      687,  687,  687,  687,  687,  331,  687,  232,  687,  352,
      687,  687,  687,  331,  687,  687,  687,  687,  687,  354,
      356,  687,  328,  161,  151,  687,  331,  354,  687,  687,
      247,  248,  249,  248,  687,  687,  351,  333,  687,  687,
      354,  153,  687,  250,  247,  248,  249,  248,  687,  687,
      687,  355,  687,  252,  687,  153,  687,  250,  687,  687,
      687,  252,  687,  687,  687,  687,  687,  252,  687,   91,

      248,  687,   92,   93,  252,  252,  687,  687,  687,  687,
      687,  687,  687,  356,  248,  253,  161,  151,  252,  687,
      687,  687,  687,  687,  261,  687,  687,  687,  687,  253,
      262,  263,  143,  263,  687,  687,  687,  687,  261,  687,
      687,  264,  687,  265,  262,  263,  143,  263,  687,  687,
      255,  256,  687,  267,  687,  264,  687,  265,  687,  687,
      687,  267,  687,  687,  255,  256,  687,  267,  687,  687,
      263,  687,  687,  687,  267,  267,  687,  687,  271,  272,
      143,  272,  687,  687,  263,  268,  687,  687,  267,  687,
      687,  383,  687,  461,  687,  249,  687,  687,  687,  268,

      687,  385,  687,  687,  323,  687,  546,  687,  687,  385,
      687,  687,  687,  687,  687,  687,  547,  269,  272,  687,
      270,  151,  385,  687,  547,  687,  271,  272,  143,  272,
      687,  269,  687,  386,  270,  151,  261,  547,  687,  383,
      687,  687,  374,  375,  143,  375,  687,  687,  548,  385,
      687,  687,  376,  264,  687,  377,  687,  385,  687,  687,
      687,  687,  687,  687,  687,  379,  272,  687,  208,  151,
      385,  687,  687,  379,  687,  687,  687,  687,  687,  687,
      687,  386,  375,  255,  256,  387,  379,  687,  687,  687,
      687,  388,  389,  143,  389,  687,  687,  380,  687,  687,

      687,  687,  264,  687,  390,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  392,  687,  208,  151,  687,  687,
      687,  687,  392,  687,  687,  687,  687,  687,  687,  269,
      687,  389,  270,  151,  261,  392,  687,  687,  687,  687,
      374,  375,  143,  375,  687,  535,  393,  143,  387,  687,
      376,  264,  687,  377,  388,  389,  143,  389,  607,  687,
      687,  687,  687,  379,  687,  264,  687,  390,  608,  687,
      687,  379,  687,  687,  687,  687,  608,  392,  394,  687,
      375,  270,  151,  687,  379,  392,  687,  687,  687,  608,
      687,  687,  687,  687,  389,  381,  687,  246,  392,  687,

      609,  687,  687,  247,  248,  249,  248,  687,  687,  393,
      687,  687,  687,  687,  102,  687,  283,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  285,  269,  687,  687,
      270,  151,  687,  687,  285,  208,  151,  687,  687,  687,
      687,  394,  687,  286,  270,  151,  387,  285,  687,  687,
      687,  687,  395,  396,  143,  396,  687,  687,  287,  687,
      687,  687,  376,  264,  687,  397,  162,  163,   85,  163,
      687,  687,  687,  687,  687,  399,  687,  153,  687,  183,
      687,  687,  687,  399,  687,  687,  687,  687,  687,  279,
      254,  687,  396,  255,  256,  687,  399,  279,  687,  687,

      687,  687,  687,  687,  687,  687,  280,  400,  687,  687,
      279,  687,  687,  687,  687,  687,  687,  687,  246,  687,
      687,  281,  687,  687,  247,  248,  249,  248,  687,  687,
      687,  687,  687,  687,  687,  102,  687,  283,  687,  394,
      687,  687,  270,  151,  387,  687,  687,  289,  687,  687,
      395,  396,  143,  396,  687,  289,   92,   93,  687,  687,
      376,  264,  687,  397,  290,  461,  687,  249,  289,  687,
      687,  687,  687,  399,  687,  687,  323,  687,  546,  291,
      687,  399,  687,  687,  687,  687,  687,  687,  547,  687,
      396,  687,  687,  140,  399,  687,  547,  687,  687,  141,

      142,  143,  142,  687,  687,  401,  687,  687,  687,  547,
      144,  254,  298,  687,  255,  256,  687,  687,  687,  412,
      548,  687,  300,  687,  687,  421,  421,  143,  421,  687,
      300,  687,  687,  687,  687,  687,  687,  394,  422,  142,
      270,  151,  246,  300,  687,  687,  687,  687,  247,  248,
      249,  248,  687,  687,  301,  255,  256,  687,  164,  102,
      687,  283,  687,  687,  687,  421,  687,  687,  140,  687,
      687,  285,  687,  687,  141,  142,  143,  142,  687,  285,
      424,  687,  687,  687,  687,  144,  149,  298,  286,  150,
      151,  687,  285,  687,  687,  687,  687,  300,  687,  687,

      687,  687,  687,  287,  687,  300,  687,  687,  687,  687,
      687,  687,  416,  687,  142,  208,  151,  439,  300,  687,
      687,  687,  687,  351,  351,  143,  351,  687,  687,  301,
      687,  687,  687,  687,  687,  254,  440,  687,  255,  256,
      246,  580,  580,  143,  580,  687,  247,  248,  249,  248,
      687,  687,  687,  687,  581,  687,  164,  102,  687,  283,
      687,  149,  687,  351,  150,  151,  412,  687,  687,  289,
      687,  687,  313,  314,  143,  314,  687,  289,  442,  687,
      687,  580,  687,  687,  687,  413,  290,  687,  687,  687,
      289,  687,  687,  687,  687,  417,  583,  687,  687,  687,

      687,  291,  687,  417,  687,  687,  687,  687,  687,  687,
      443,  687,  314,  208,  151,  439,  417,  687,  687,  687,
      687,  454,  454,  143,  454,  687,  687,  418,  687,  687,
      687,  208,  151,  254,  455,  687,  255,  256,   82,  596,
      596,  143,  596,  687,  162,  163,   85,  163,  687,  687,
      687,  687,  597,  687,  164,  102,  687,  183,  687,  416,
      687,  454,  208,  151,  312,  687,  687,  185,  687,  687,
      313,  314,  143,  314,  687,  185,  457,  687,  687,  596,
      687,  144,  687,  315,  186,  687,  687,  687,  185,  687,
      687,  687,  687,  317,  599,  687,  687,  687,  687,  187,

      687,  317,  687,  687,  687,  687,  687,  687,  443,  687,
      314,  208,  151,  439,  317,  687,  687,  687,  687,  454,
      454,  143,  454,  687,  687,  318,  687,  687,  687,  208,
      151,   91,  455,  687,   92,   93,  140,  568,  568,  143,
      568,  687,  210,  211,  143,  211,  687,  687,  687,  687,
      569,  687,  212,  144,  687,  407,  687,  319,  687,  454,
      150,  151,  312,  687,  687,  409,  687,  687,  313,  314,
      143,  314,  687,  409,  457,  687,  687,  568,  687,  144,
      687,  315,  211,  687,  687,  687,  409,  687,  687,  687,
      687,  317,  571,  687,  687,  687,  687,  410,  687,  317,

      687,  687,  687,  687,  687,  687,  443,  687,  314,  208,
      151,  359,  317,  687,  687,  687,  687,  360,  360,  143,
      360,  687,  687,  318,  687,  687,  687,  208,  151,  149,
      361,  687,  150,  151,  140,  687,  687,  687,  687,  687,
      210,  211,  143,  211,  687,  687,  687,  687,  687,  687,
      212,  144,  687,  407,  687,  319,  687,  360,  150,  151,
      687,  687,  687,  409,  687,  327,  328,   85,  328,  687,
      687,  409,  363,  687,  687,  164,  323,  687,  426,  687,
      211,  687,  687,  687,  409,  687,  687,  687,  428,  687,
      687,  687,  687,  687,  687,  411,  428,  654,  654,  143,

      654,  687,  687,  687,  364,  328,  687,  208,  151,  428,
      655,  687,  687,  327,  328,   85,  328,  687,  687,  687,
      429,  687,  687,  164,  323,  687,  426,  149,  687,  687,
      150,  151,  246,  687,  687,  687,  428,  654,  431,  432,
      249,  432,  687,  687,  428,  687,  687,  687,  687,   86,
      687,  433,  657,  328,  687,   92,   93,  428,  687,  687,
      687,  435,  687,  687,  687,  687,  687,  687,  430,  435,
      687,  687,  687,  687,  687,  687,  687,  246,  432,  687,
      687,  687,  435,  431,  432,  249,  432,  208,  151,  687,
      687,  687,  687,  436,   86,  687,  433,  687,  687,  687,

      687,  687,  439,   92,   93,  687,  435,  687,  350,  351,
      143,  351,  687,  535,  435,  143,  687,  687,  687,  687,
      687,  440,  687,  432,  687,  254,  607,  435,  255,  256,
      687,  444,  687,  687,  687,  687,  608,  687,  436,  444,
      687,  687,  687,  687,  608,  687,  687,  687,  351,  687,
      687,  687,  444,  154,  155,  143,  155,  608,  687,  687,
      687,  687,  687,  445,  232,  687,  450,  687,  609,  687,
      254,  687,  349,  255,  256,  687,  452,  687,  350,  351,
      143,  351,  687,  687,  452,  687,  687,  687,  687,  232,
      687,  352,  687,  155,  687,  443,  687,  452,  208,  151,

      687,  354,  687,  208,  151,  687,  687,  687,  453,  354,
      687,  687,  687,  687,  687,  687,  687,  349,  351,  687,
      687,  687,  354,  350,  351,  143,  351,  687,  687,  687,
      687,  687,  687,  355,  232,  687,  352,  687,  687,  461,
      462,  249,  462,  161,  151,  687,  354,  687,  687,  687,
       86,  687,  463,  687,  354,  687,  687,  687,  687,  687,
      687,  687,  465,  351,  687,  356,  687,  354,  161,  151,
      465,  687,  374,  375,  143,  375,  687,  687,  355,  462,
      687,  687,  376,  465,  687,  473,  687,  687,  262,  263,
      143,  263,  687,  687,  466,  475,  687,  687,  687,  264,

      687,  469,  687,  475,  687,  687,  687,  687,  687,  687,
      356,  471,  375,  161,  151,  687,  475,  687,  687,  471,
      687,  687,  687,  687,  687,  687,  687,  476,  263,  255,
      256,  246,  471,  687,  687,  687,  687,  247,  248,  249,
      248,  687,  574,  472,  143,  687,  687,  164,  102,  687,
      250,  374,  375,  143,  375,  634,  687,  687,  687,  687,
      252,  376,  208,  151,  473,  635,  687,  687,  252,  687,
      687,  687,  687,  635,  475,  687,  687,  248,  270,  151,
      687,  252,  475,  687,  687,  687,  635,  687,  687,  467,
      687,  375,  366,  482,  687,  475,  687,  636,  687,  483,

      484,  143,  484,  687,  687,  687,  477,  439,  687,  687,
      264,  687,  485,  389,  389,  143,  389,  687,  687,  687,
      687,  687,  487,  687,  254,  687,  492,  255,  256,  687,
      487,  687,  208,  151,  687,  687,  687,  687,  482,  484,
      687,  208,  151,  487,  483,  484,  143,  484,  687,  687,
      687,  687,  687,  389,  488,  264,  687,  485,  687,  687,
      687,  687,  687,  687,  439,  687,  687,  487,  494,  687,
      388,  389,  143,  389,  687,  487,  687,  687,  687,  687,
      687,  687,  687,  492,  484,  687,  489,  687,  487,  270,
      151,  687,  687,  495,  687,  687,  687,  687,  687,  488,

      443,  495,  687,  208,  151,  687,  687,  687,  687,  687,
      389,  687,  687,  439,  495,  687,  687,  687,  687,  395,
      396,  143,  396,  687,  687,  496,  687,  687,  687,  376,
      687,  489,  497,  687,  270,  151,  687,  687,  687,  439,
      687,  687,  499,  687,  687,  395,  396,  143,  396,  687,
      499,  687,  687,  687,  687,  376,  687,  443,  497,  396,
      208,  151,  687,  499,  687,  687,  687,  687,  499,  687,
      687,  687,  687,  687,  500,  687,  499,  687,  687,  687,
      687,  687,  687,  687,  387,  396,  687,  687,  687,  499,
      388,  389,  143,  389,  687,  687,  687,  687,  687,  687,

      501,  264,  687,  390,  687,  687,  443,  687,  412,  208,
      151,  687,  687,  392,  314,  314,  143,  314,  687,  687,
      687,  392,  687,  687,  687,  687,  687,  413,  687,  687,
      389,  687,  443,  387,  392,  208,  151,  687,  687,  388,
      389,  143,  389,  687,  687,  393,  687,  687,  687,  312,
      264,  687,  390,  687,  314,  313,  314,  143,  314,  687,
      687,  687,  392,  687,  687,  687,  144,  687,  505,  415,
      392,  687,  687,  687,  687,  687,  687,  394,  507,  389,
      270,  151,  687,  392,  687,  687,  507,  687,  687,  687,
      687,  687,  687,  687,  393,  314,  687,  687,  687,  507,

      687,  416,  687,  687,  208,  151,  312,  687,  687,  687,
      508,  687,  313,  314,  143,  314,  687,  687,  687,  687,
      687,  687,  687,  144,  687,  505,  394,  687,  687,  270,
      151,  387,  687,  687,  687,  507,  687,  395,  396,  143,
      396,  687,  319,  507,  687,  150,  151,  376,  264,  687,
      397,  687,  314,  687,  687,  687,  507,  687,  687,  687,
      399,  687,  687,  687,  412,  687,  687,  508,  399,  687,
      313,  314,  143,  314,  687,  687,  687,  396,  687,  687,
      687,  399,  687,  413,  687,  687,  687,  687,  412,  687,
      687,  687,  400,  417,  421,  421,  143,  421,  687,  319,

      687,  417,  150,  151,  687,  687,  687,  422,  687,  687,
      314,  687,  687,  687,  417,  687,  687,  687,  687,  513,
      514,  143,  514,  687,  394,  418,  687,  270,  151,  387,
      144,  687,  515,  687,  421,  395,  396,  143,  396,  687,
      687,  687,  517,  687,  687,  376,  264,  687,  397,  424,
      517,  687,  687,  687,  687,  687,  687,  416,  399,  514,
      208,  151,  687,  517,  687,  687,  399,  687,  687,  687,
      687,  687,  687,  687,  518,  396,  687,  687,  687,  399,
      687,  416,  687,  687,  208,  151,  359,  687,  687,  687,
      401,  687,  432,  432,  143,  432,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  519,  687,  687,  687,  150,
      151,  359,  687,  687,  687,  687,  687,  431,  432,  249,
      432,  687,  394,  687,  687,  270,  151,  246,  323,  687,
      519,  687,  432,  247,  248,  249,  248,  687,  687,  687,
      522,  687,  687,  164,  102,  687,  283,  521,  522,  687,
      687,  687,  687,  687,  687,  687,  285,  432,  574,  687,
      143,  522,  687,  687,  285,  687,  687,  687,  687,  687,
      687,  634,  523,  286,  687,  687,  687,  285,  687,  364,
      687,  635,  208,  151,  687,  404,  687,  687,  405,  635,
      687,  439,  687,  687,  687,  687,  687,  351,  351,  143,

      351,  687,  635,  687,  364,  687,  687,  255,  256,  246,
      440,  687,  687,  636,  687,  431,  432,  249,  432,  687,
      254,  687,  687,  255,  256,  246,   86,  687,  433,  687,
      687,  247,  248,  249,  248,  687,  687,  351,  435,  687,
      687,  687,  102,  687,  283,  687,  435,  687,  208,  151,
      687,  687,  442,  687,  285,  432,  687,  687,  439,  435,
      687,  687,  285,  687,  454,  454,  143,  454,  687,  687,
      436,  286,  687,  687,  246,  285,  687,  455,  687,  687,
      431,  432,  249,  432,  443,  687,  287,  208,  151,  687,
      687,   86,  687,  433,  687,  687,  687,  687,  687,  687,

      687,  687,  254,  435,  454,  255,  256,  439,  687,  687,
      687,  435,  687,  350,  351,  143,  351,  687,  254,  457,
      432,  255,  256,  246,  435,  687,  440,  687,  687,  247,
      248,  249,  248,  687,  687,  436,  444,  687,  687,  164,
      102,  687,  283,  687,  444,  687,  687,  687,  687,  687,
      687,  443,  289,  351,  208,  151,  359,  444,  687,  687,
      289,  687,  360,  360,  143,  360,  687,  254,  445,  290,
      255,  256,  687,  289,  687,  361,  687,  687,  687,  687,
      687,  504,  687,  687,  406,  687,  687,  687,  687,  231,
      687,  687,  687,  687,  687,  154,  155,  143,  155,  687,

      443,  687,  360,  208,  151,  687,  232,  687,  450,  687,
      687,  687,  687,  687,  528,  687,  254,  363,  452,  255,
      256,  687,  687,  359,  687,  687,  452,  687,  687,  360,
      360,  143,  360,  687,  687,  155,  687,  231,  687,  452,
      687,  687,  361,  154,  155,  143,  155,  687,  687,  364,
      453,  687,  208,  151,  232,  687,  450,  535,  536,  143,
      536,  687,  687,  687,  687,  687,  452,  687,  232,  360,
      537,  687,  687,  687,  452,  687,  687,  687,  687,  687,
      539,  545,  233,  155,  460,  161,  151,  452,  539,  687,
      687,  687,  687,  687,  687,  687,  687,  536,  453,  687,

      687,  539,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  540,  687,  687,  687,  364,  687,  687,  208,
      151,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      233,  687,  687,  161,  151,  231,  687,  687,  687,  687,
      687,  234,  235,  143,  235,  687,  687,  161,  151,  687,
      687,  236,  232,  687,  529,  687,  687,  627,  687,  143,
      246,  687,  687,  687,  531,  687,  461,  462,  249,  462,
      659,  687,  531,  687,  687,  687,  687,   86,  687,  463,
      660,  235,  687,  687,  687,  531,  687,  687,  660,  465,
      687,  687,  687,  687,  687,  687,  532,  465,  687,  687,

      687,  660,  687,  687,  687,  687,  462,  687,  246,  687,
      465,  687,  661,  687,  461,  462,  249,  462,  687,  687,
      687,  466,  687,  687,  687,   86,  687,  463,  233,  687,
      687,  161,  151,  231,  687,  687,  687,  465,  687,  234,
      235,  143,  235,  687,  687,  465,  687,  208,  151,  236,
      232,  687,  529,  254,  462,  687,  255,  256,  465,  687,
      687,  687,  531,  687,  627,  687,  143,  687,  687,  466,
      531,  687,  687,  687,  687,  687,  687,  659,  687,  235,
      687,  687,  687,  531,  687,  687,  687,  660,  687,  687,
      559,  687,  687,  687,  533,  660,  484,  484,  143,  484,

      687,  254,  687,  687,  255,  256,  246,  687,  660,  560,
      687,  687,  247,  248,  249,  248,  687,  687,  687,  661,
      687,  687,  687,  102,  687,  250,  233,  687,  687,  161,
      151,  246,  687,  687,  687,  252,  484,  431,  432,  249,
      432,  687,  687,  252,  687,  687,  687,  164,   86,  687,
      549,  562,  248,  687,  208,  151,  252,  687,  687,  687,
      551,  687,  687,  687,  687,  687,  687,  253,  551,  687,
      687,  687,  687,  687,  687,  687,  687,  432,  687,  687,
      687,  551,  687,  563,  687,  687,  208,  151,  687,  687,
      687,  687,  552,  687,  687,  687,  687,  687,  687,  254,

      687,  687,  255,  256,  261,  687,  687,  687,  687,  687,
      262,  263,  143,  263,  687,  687,  687,  687,  687,  687,
      687,  264,  687,  469,  254,  687,  687,  255,  256,  246,
      687,  687,  687,  471,  687,  431,  432,  249,  432,  687,
      687,  471,  687,  687,  687,  164,   86,  687,  549,  687,
      263,  687,  687,  687,  471,  687,  687,  687,  551,  687,
      687,  687,  687,  687,  687,  472,  551,  687,  687,  687,
      687,  687,  687,  687,  261,  432,  687,  687,  687,  551,
      262,  263,  143,  263,  687,  687,  687,  687,  687,  687,
      553,  264,  687,  469,  687,  687,  687,  269,  687,  559,

      270,  151,  687,  471,  687,  483,  484,  143,  484,  687,
      687,  471,  687,  687,  687,  687,  687,  687,  560,  687,
      263,  687,  254,  559,  471,  255,  256,  687,  564,  568,
      568,  143,  568,  687,  687,  472,  564,  687,  687,  687,
      687,  687,  569,  687,  559,  484,  687,  687,  687,  564,
      568,  568,  143,  568,  687,  687,  687,  687,  687,  687,
      565,  687,  687,  569,  687,  687,  687,  269,  687,  568,
      270,  151,  261,  687,  687,  687,  687,  687,  374,  375,
      143,  375,  687,  687,  571,  687,  687,  687,  376,  264,
      568,  554,  563,  687,  687,  208,  151,  687,  687,  687,

      687,  556,  687,  687,  687,  571,  687,  687,  687,  556,
      687,  687,  687,  687,  687,  687,  563,  687,  375,  208,
      151,  687,  556,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  557,  687,  687,  687,  563,  687,  687,
      208,  151,  687,  687,  482,  687,  687,  687,  687,  687,
      483,  484,  143,  484,  687,  687,  687,  687,  687,  687,
      687,  264,  687,  485,  687,  269,  687,  687,  270,  151,
      261,  687,  687,  487,  687,  687,  374,  375,  143,  375,
      687,  487,  687,  687,  687,  687,  376,  264,  687,  554,
      484,  687,  687,  687,  487,  687,  687,  687,  687,  556,

      687,  687,  687,  687,  687,  488,  687,  556,  687,  687,
      687,  687,  687,  687,  687,  482,  375,  687,  687,  687,
      556,  483,  484,  143,  484,  687,  687,  687,  687,  687,
      687,  558,  264,  687,  485,  687,  687,  489,  687,  439,
      270,  151,  687,  687,  487,  389,  389,  143,  389,  687,
      687,  687,  487,  687,  687,  687,  687,  687,  492,  687,
      687,  484,  687,  269,  439,  487,  270,  151,  687,  687,
      388,  389,  143,  389,  687,  687,  488,  687,  687,  687,
      439,  687,  687,  492,  687,  389,  395,  396,  143,  396,
      687,  687,  687,  495,  687,  687,  376,  687,  687,  497,

      494,  495,  687,  687,  687,  687,  687,  687,  489,  499,
      389,  270,  151,  687,  495,  687,  687,  499,  687,  687,
      687,  687,  687,  687,  687,  496,  396,  687,  687,  687,
      499,  687,  443,  687,  687,  208,  151,  439,  687,  687,
      687,  500,  687,  395,  396,  143,  396,  687,  687,  687,
      687,  687,  687,  376,  687,  687,  497,  443,  687,  687,
      208,  151,  687,  687,  687,  687,  499,  687,  574,  575,
      143,  575,  687,  443,  499,  687,  208,  151,  687,  264,
      687,  576,  687,  396,  687,  687,  687,  499,  687,  687,
      687,  578,  687,  687,  687,  687,  687,  687,  501,  578,

      687,  687,  687,  687,  687,  687,  687,  246,  575,  687,
      687,  687,  578,  247,  248,  249,  248,  687,  687,  687,
      687,  687,  687,  579,  102,  687,  283,  687,  687,  687,
      443,  687,  246,  208,  151,  687,  285,  687,  247,  248,
      249,  248,  687,  687,  285,  687,  687,  687,  687,  102,
      687,  283,  687,  286,  687,  687,  687,  285,  270,  151,
      687,  289,  687,  687,  687,  687,  687,  687,  287,  289,
      687,  687,  687,  687,  687,  687,  687,  312,  290,  687,
      687,  687,  289,  313,  314,  143,  314,  687,  687,  687,
      687,  687,  687,  291,  144,  687,  505,  687,  687,  687,

      254,  687,  312,  255,  256,  687,  507,  687,  313,  314,
      143,  314,  687,  687,  507,  687,  687,  687,  687,  144,
      687,  505,  687,  314,  687,  254,  412,  507,  255,  256,
      687,  507,  421,  421,  143,  421,  687,  687,  508,  507,
      687,  687,  687,  687,  687,  422,  687,  687,  314,  687,
      687,  687,  507,  687,  687,  687,  687,  687,  687,  312,
      687,  687,  687,  508,  687,  513,  514,  143,  514,  687,
      319,  687,  421,  150,  151,  687,  144,  687,  515,  687,
      687,  687,  687,  687,  584,  359,  687,  512,  517,  687,
      687,  432,  432,  143,  432,  319,  517,  687,  150,  151,

      687,  687,  687,  687,  519,  514,  687,  312,  687,  517,
      687,  687,  687,  513,  514,  143,  514,  687,  687,  416,
      518,  687,  208,  151,  144,  687,  515,  687,  687,  687,
      687,  432,  687,  687,  687,  687,  517,  687,  687,  687,
      687,  687,  687,  687,  517,  687,  521,  687,  687,  687,
      687,  687,  319,  514,  687,  150,  151,  517,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  518,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  364,  359,
      687,  208,  151,  687,  687,  431,  432,  249,  432,  687,
      687,  687,  687,  687,  687,  687,  323,  687,  519,  687,

      319,  687,  687,  150,  151,  312,  687,  687,  522,  687,
      687,  313,  314,  143,  314,  687,  522,  687,  687,  687,
      687,  212,  144,  687,  588,  432,  687,  687,  687,  522,
      687,  687,  687,  687,  590,  687,  687,  687,  359,  687,
      523,  687,  590,  687,  360,  360,  143,  360,  687,  687,
      687,  314,  687,  687,  349,  590,  687,  361,  687,  687,
      350,  351,  143,  351,  687,  687,  591,  687,  687,  687,
      687,  232,  364,  600,  687,  255,  256,  687,  687,  687,
      687,  687,  687,  602,  360,  687,  687,  439,  687,  687,
      687,  602,  687,  454,  454,  143,  454,  687,  319,  363,

      351,  150,  151,  312,  602,  687,  455,  687,  687,  313,
      314,  143,  314,  687,  687,  603,  687,  687,  687,  212,
      144,  687,  588,  687,  687,  687,  687,  687,  687,  687,
      687,  364,  590,  454,  208,  151,  687,  687,  687,  687,
      590,  687,  687,  687,  687,  606,  687,  356,  534,  314,
      161,  151,  349,  590,  687,  687,  687,  687,  350,  351,
      143,  351,  687,  687,  592,  687,  687,  687,  687,  232,
      687,  600,  687,  687,  687,  687,  687,  687,  687,  687,
      443,  602,  687,  208,  151,  687,  687,  687,  687,  602,
      687,  687,  687,  687,  687,  687,  319,  687,  351,  150,

      151,  246,  602,  687,  687,  687,  687,  431,  432,  249,
      432,  687,  687,  603,  687,  349,  687,  164,   86,  687,
      433,  535,  536,  143,  536,  687,  687,  687,  687,  687,
      435,  687,  232,  687,  537,  687,  687,  687,  435,  687,
      687,  687,  687,  687,  539,  356,  687,  432,  161,  151,
      687,  435,  539,  687,  687,  687,  687,  687,  687,  595,
      687,  536,  526,  349,  687,  539,  687,  687,  687,  535,
      536,  143,  536,  687,  687,  687,  540,  687,  687,  687,
      232,  687,  537,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  539,  687,  254,  687,  359,  255,  256,  687,

      539,  687,  541,  541,  143,  541,  687,  687,  356,  536,
      687,  161,  151,  539,  687,  542,  687,  687,  687,  687,
      359,  687,  687,  687,  540,  687,  541,  541,  143,  541,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  542,
      687,  687,  541,  687,  687,  359,  687,  687,  687,  687,
      687,  360,  360,  143,  360,  687,  356,  544,  687,  161,
      151,  349,  687,  687,  361,  687,  541,  350,  351,  143,
      351,  687,  687,  687,  687,  687,  687,  236,  232,  687,
      610,  544,  687,  687,  687,  687,  687,  687,  687,  364,
      612,  360,  208,  151,  687,  687,  687,  687,  612,  687,

      687,  687,  687,  687,  687,  687,  363,  351,  687,  687,
      687,  612,  687,  364,  687,  687,  208,  151,  687,  687,
      687,  687,  613,  687,  687,  559,  687,  687,  687,  687,
      687,  484,  484,  143,  484,  687,  687,  687,  364,  687,
      687,  208,  151,  246,  560,  687,  687,  687,  687,  431,
      432,  249,  432,  687,  356,  687,  687,  161,  151,  349,
       86,  687,  549,  687,  687,  350,  351,  143,  351,  687,
      687,  484,  551,  687,  687,  236,  232,  687,  610,  687,
      551,  687,  687,  687,  687,  687,  562,  687,  612,  432,
      687,  687,  687,  551,  687,  687,  612,  687,  687,  687,

      687,  687,  687,  687,  552,  351,  687,  687,  246,  612,
      687,  687,  687,  687,  431,  432,  249,  432,  563,  687,
      614,  208,  151,  687,  482,   86,  687,  549,  687,  687,
      483,  484,  143,  484,  687,  687,  254,  551,  687,  255,
      256,  264,  687,  619,  687,  551,  687,  687,  687,  687,
      687,  687,  356,  621,  432,  161,  151,  559,  551,  687,
      687,  621,  687,  483,  484,  143,  484,  687,  687,  552,
      484,  687,  687,  482,  621,  687,  560,  687,  687,  483,
      484,  143,  484,  687,  687,  622,  564,  687,  687,  687,
      264,  687,  619,  687,  564,  687,  687,  687,  687,  687,

      687,  254,  621,  484,  255,  256,  559,  564,  687,  687,
      621,  687,  568,  568,  143,  568,  687,  489,  565,  484,
      270,  151,  687,  621,  687,  569,  687,  687,  627,  628,
      143,  628,  687,  687,  622,  687,  687,  687,  687,  264,
      687,  629,  687,  687,  687,  687,  687,  687,  687,  687,
      563,  631,  568,  208,  151,  687,  687,  687,  687,  631,
      687,  687,  687,  687,  687,  687,  489,  571,  628,  270,
      151,  387,  631,  687,  687,  687,  687,  574,  575,  143,
      575,  687,  687,  632,  687,  687,  687,  387,  264,  687,
      576,  687,  687,  574,  575,  143,  575,  687,  687,  563,

      578,  687,  208,  151,  264,  687,  576,  687,  578,  687,
      687,  687,  687,  687,  687,  687,  578,  575,  270,  151,
      439,  578,  687,  687,  578,  687,  395,  396,  143,  396,
      687,  687,  579,  575,  687,  687,  376,  578,  687,  497,
      687,  687,  687,  687,  687,  687,  412,  687,  579,  499,
      687,  687,  580,  580,  143,  580,  687,  499,  687,  687,
      687,  687,  687,  687,  394,  581,  396,  270,  151,  687,
      499,  687,  687,  687,  687,  687,  687,  687,  633,  687,
      394,  501,  687,  270,  151,  687,  687,  412,  687,  687,
      687,  687,  580,  580,  580,  143,  580,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  581,  583,  687,  687,
      687,  687,  687,  443,  687,  687,  208,  151,  387,  687,
      687,  687,  687,  687,  395,  396,  143,  396,  687,  687,
      687,  687,  687,  580,  376,  264,  687,  637,  687,  416,
      687,  687,  208,  151,  412,  687,  687,  639,  583,  687,
      421,  421,  143,  421,  687,  639,  687,  687,  687,  687,
      687,  687,  687,  422,  396,  687,  687,  687,  639,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  640,
      416,  687,  687,  208,  151,  687,  687,  687,  687,  687,
      421,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687,  424,  687,  687,  687,  687,
      687,  394,  687,  687,  270,  151,  387,  687,  687,  687,
      687,  687,  395,  396,  143,  396,  687,  687,  687,  687,
      687,  687,  376,  264,  687,  637,  687,  416,  687,  687,
      208,  151,  687,  687,  687,  639,  687,  313,  314,  143,
      314,  687,  687,  639,  687,  687,  687,  212,  687,  687,
      413,  687,  396,  687,  687,  687,  639,  687,  687,  687,
      417,  687,  687,  687,  687,  687,  687,  641,  417,  687,
      313,  314,  143,  314,  687,  687,  687,  314,  687,  687,
      212,  417,  687,  413,  687,  687,  687,  687,  687,  312,

      687,  687,  418,  417,  687,  313,  314,  143,  314,  394,
      687,  417,  270,  151,  687,  687,  144,  687,  588,  687,
      314,  687,  687,  687,  417,  687,  687,  687,  590,  687,
      687,  687,  687,  687,  687,  419,  590,  208,  151,  687,
      687,  687,  687,  687,  312,  314,  687,  687,  687,  590,
      313,  314,  143,  314,  687,  687,  687,  687,  687,  687,
      591,  144,  687,  588,  687,  687,  687,  687,  687,  246,
      208,  151,  687,  590,  687,  431,  432,  249,  432,  687,
      687,  590,  687,  687,  687,  687,   86,  687,  433,  687,
      314,  687,  319,  439,  590,  150,  151,  687,  435,  596,

      596,  143,  596,  687,  687,  591,  435,  687,  687,  687,
      687,  687,  597,  687,  439,  432,  687,  687,  687,  435,
      596,  596,  143,  596,  687,  687,  687,  687,  687,  687,
      436,  687,  687,  597,  687,  687,  687,  319,  687,  596,
      150,  151,  359,  687,  687,  687,  687,  687,  431,  432,
      249,  432,  687,  687,  599,  687,  687,  687,  164,  323,
      596,  519,  254,  687,  687,  255,  256,  687,  687,  687,
      687,  522,  687,  687,  687,  599,  687,  687,  687,  522,
      687,  687,  687,  687,  687,  687,  443,  687,  432,  208,
      151,  687,  522,  687,  687,  687,  687,  687,  687,  687,

      646,  687,  687,  594,  687,  687,  687,  443,  687,  687,
      208,  151,  687,  687,  349,  687,  687,  687,  687,  687,
      350,  351,  143,  351,  687,  687,  687,  687,  687,  687,
      687,  232,  687,  600,  687,  364,  687,  687,  255,  256,
      359,  687,  687,  602,  687,  687,  431,  432,  249,  432,
      687,  602,  687,  687,  687,  687,  164,  323,  687,  519,
      351,  687,  687,  687,  602,  687,  687,  687,  687,  522,
      687,  687,  687,  687,  687,  603,  687,  522,  687,  687,
      687,  687,  687,  687,  687,  349,  432,  687,  687,  687,
      522,  350,  351,  143,  351,  687,  687,  687,  647,  687,

      687,  594,  232,  687,  600,  687,  687,  356,  687,  439,
      161,  151,  687,  687,  602,  454,  454,  143,  454,  687,
      687,  687,  602,  687,  687,  687,  687,  687,  455,  687,
      687,  351,  687,  364,  687,  602,  255,  256,  687,  687,
      350,  351,  143,  351,  687,  687,  603,  687,  687,  687,
      236,  687,  687,  440,  687,  454,  350,  351,  143,  351,
      687,  687,  687,  444,  687,  687,  236,  687,  687,  440,
      457,  444,  687,  687,  687,  687,  687,  687,  356,  444,
      351,  161,  151,  687,  444,  687,  687,  444,  687,  687,
      687,  687,  687,  687,  687,  445,  351,  687,  687,  687,

      444,  687,  443,  687,  687,  208,  151,  349,  687,  687,
      687,  446,  687,  350,  351,  143,  351,  687,  687,  687,
      687,  687,  687,  687,  232,  687,  610,  687,  687,  687,
      208,  151,  349,  687,  687,  687,  612,  687,  350,  351,
      143,  351,  687,  687,  612,  687,  208,  151,  687,  232,
      687,  610,  687,  351,  687,  687,  359,  612,  687,  687,
      687,  612,  541,  541,  143,  541,  687,  687,  613,  612,
      687,  687,  687,  687,  687,  542,  687,  687,  351,  687,
      687,  687,  612,  687,  687,  687,  687,  687,  687,  246,
      687,  687,  687,  613,  687,  431,  432,  249,  432,  687,

      356,  687,  541,  161,  151,  687,   86,  687,  549,  687,
      687,  687,  687,  687,  653,  687,  687,  617,  551,  687,
      687,  687,  687,  687,  687,  356,  551,  687,  161,  151,
      687,  687,  687,  687,  687,  432,  687,  482,  687,  551,
      687,  687,  687,  483,  484,  143,  484,  687,  687,  364,
      552,  482,  208,  151,  264,  687,  619,  483,  484,  143,
      484,  687,  687,  687,  687,  687,  621,  687,  264,  687,
      619,  687,  687,  687,  621,  687,  687,  687,  687,  687,
      621,  687,  254,  484,  687,  255,  256,  621,  621,  687,
      687,  687,  687,  687,  687,  687,  559,  484,  622,  687,

      687,  621,  568,  568,  143,  568,  687,  687,  687,  687,
      687,  687,  622,  687,  687,  569,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      489,  687,  687,  270,  151,  687,  687,  687,  687,  687,
      687,  687,  568,  687,  489,  687,  687,  270,  151,  687,
      687,  687,  687,  482,  658,  687,  687,  626,  482,  627,
      628,  143,  628,  687,  627,  628,  143,  628,  687,  687,
      264,  687,  629,  687,  687,  264,  687,  629,  395,  396,
      143,  396,  631,  687,  687,  687,  687,  631,  376,  563,
      631,  497,  208,  151,  687,  631,  687,  687,  687,  628,

      687,  499,  687,  631,  628,  687,  687,  687,  631,  499,
      687,  687,  687,  687,  632,  687,  687,  687,  396,  632,
      687,  687,  499,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  500,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  489,  687,  687,  270,
      151,  489,  687,  687,  270,  151,  482,  687,  687,  687,
      687,  687,  483,  484,  143,  484,  687,  687,  208,  151,
      687,  687,  376,  264,  687,  662,  687,  687,  687,  687,
      687,  559,  687,  687,  687,  664,  687,  483,  484,  143,
      484,  687,  687,  664,  687,  687,  687,  687,  687,  687,

      560,  687,  484,  687,  687,  687,  664,  687,  687,  687,
      564,  687,  687,  687,  687,  687,  687,  665,  564,  687,
      687,  687,  687,  687,  687,  687,  687,  484,  687,  687,
      687,  564,  687,  687,  687,  395,  396,  143,  396,  687,
      687,  687,  565,  687,  687,  376,  687,  687,  497,  489,
      687,  687,  270,  151,  482,  687,  687,  687,  499,  687,
      483,  484,  143,  484,  687,  687,  499,  687,  687,  687,
      376,  264,  687,  662,  563,  396,  687,  208,  151,  499,
      687,  687,  687,  664,  687,  687,  687,  687,  687,  687,
      501,  664,  687,  687,  687,  687,  687,  687,  687,  482,

      484,  687,  687,  687,  664,  483,  484,  143,  484,  687,
      687,  687,  687,  687,  687,  666,  264,  687,  667,  687,
      687,  687,  687,  687,  482,  208,  151,  687,  669,  687,
      483,  484,  143,  484,  687,  687,  669,  687,  687,  687,
      687,  264,  687,  667,  687,  484,  687,  489,  412,  669,
      270,  151,  687,  669,  580,  580,  143,  580,  687,  687,
      670,  669,  687,  687,  687,  687,  687,  581,  687,  687,
      484,  687,  687,  687,  669,  687,  687,  687,  687,  687,
      687,  312,  687,  687,  687,  670,  687,  313,  314,  143,
      314,  687,  489,  687,  580,  270,  151,  687,  144,  687,

      588,  687,  687,  687,  687,  687,  674,  687,  687,  644,
      590,  687,  687,  687,  687,  687,  687,  489,  590,  687,
      270,  151,  687,  687,  687,  687,  687,  314,  687,  359,
      687,  590,  687,  687,  687,  431,  432,  249,  432,  687,
      687,  416,  591,  359,  208,  151,  323,  687,  519,  431,
      432,  249,  432,  687,  687,  687,  687,  687,  522,  687,
      323,  687,  519,  687,  687,  687,  522,  687,  687,  687,
      687,  687,  522,  687,  319,  432,  687,  150,  151,  522,
      522,  687,  687,  687,  687,  687,  687,  687,  439,  432,
      523,  687,  687,  522,  596,  596,  143,  596,  687,  687,

      687,  687,  687,  687,  523,  687,  687,  597,  687,  687,
      687,  359,  687,  687,  687,  687,  687,  541,  541,  143,
      541,  687,  364,  687,  687,  255,  256,  687,  687,  687,
      542,  687,  687,  687,  596,  687,  364,  687,  687,  255,
      256,  687,  687,  687,  687,  349,  676,  687,  687,  650,
      687,  350,  351,  143,  351,  687,  687,  541,  687,  559,
      687,  687,  232,  687,  610,  654,  654,  143,  654,  687,
      687,  687,  544,  687,  612,  687,  687,  687,  655,  687,
      687,  443,  612,  687,  208,  151,  687,  687,  687,  687,
      559,  351,  687,  687,  687,  612,  654,  654,  143,  654,

      687,  687,  687,  687,  364,  654,  613,  208,  151,  655,
      687,  687,  687,  687,  687,  559,  687,  687,  687,  687,
      657,  568,  568,  143,  568,  687,  687,  483,  484,  143,
      484,  687,  687,  687,  569,  687,  654,  376,  356,  687,
      560,  161,  151,  687,  687,  687,  687,  687,  687,  687,
      564,  657,  563,  687,  687,  208,  151,  687,  564,  687,
      687,  568,  687,  687,  687,  687,  687,  484,  687,  687,
      687,  564,  687,  687,  687,  687,  571,  687,  687,  687,
      687,  687,  565,  563,  687,  687,  208,  151,  687,  687,
      483,  484,  143,  484,  687,  687,  687,  687,  687,  687,

      376,  687,  687,  560,  687,  687,  687,  687,  563,  687,
      687,  208,  151,  564,  687,  687,  687,  208,  151,  687,
      687,  564,  687,  687,  687,  687,  687,  687,  687,  482,
      484,  687,  687,  687,  564,  483,  484,  143,  484,  687,
      687,  687,  687,  687,  687,  566,  264,  687,  662,  687,
      687,  687,  687,  687,  482,  687,  687,  687,  664,  687,
      483,  484,  143,  484,  687,  687,  664,  687,  687,  687,
      687,  264,  687,  662,  687,  484,  687,  687,  687,  664,
      208,  151,  687,  664,  687,  687,  687,  687,  687,  687,
      665,  664,  687,  687,  687,  687,  687,  687,  687,  482,

      484,  687,  687,  687,  664,  483,  484,  143,  484,  687,
      687,  687,  687,  687,  687,  665,  264,  687,  667,  687,
      687,  687,  489,  687,  482,  270,  151,  687,  669,  687,
      483,  484,  143,  484,  687,  687,  669,  687,  687,  687,
      687,  264,  687,  667,  687,  484,  687,  489,  412,  669,
      270,  151,  687,  669,  580,  580,  143,  580,  687,  687,
      670,  669,  687,  687,  687,  687,  687,  581,  687,  439,
      484,  687,  687,  687,  669,  596,  596,  143,  596,  687,
      687,  687,  687,  687,  687,  670,  687,  687,  597,  687,
      687,  687,  489,  687,  580,  270,  151,  687,  687,  687,

      687,  687,  687,  687,  687,  687,  687,  687,  687,  583,
      687,  687,  687,  687,  687,  596,  687,  489,  687,  687,
      270,  151,  687,  687,  687,  687,  687,  687,  687,  687,
      599,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  416,  687,  687,  208,  151,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  443,  687,  687,  208,  151,   54,   54,   54,
       54,   54,   54,   54,   54,   70,  687,  687,   70,   70,
       72,   72,   72,   72,   72,   72,   72,   72,   80,   80,
       88,   88,   88,  687,   88,   88,  104,  104,  104,  687,

      104,  104,  119,  687,  687,  119,  119,  146,  146,  146,
      687,  146,  146,  152,  687,  687,  687,  687,  152,  158,
      158,  687,  158,  158,  166,  166,  166,  166,  166,  166,
      176,  176,  687,  176,  176,  179,  179,  179,  687,  179,
      179,  184,  184,  184,  184,  184,  184,  204,  687,  687,
      687,  687,  204,  142,  142,  687,  687,  142,  214,  214,
      214,  214,  214,  214,  223,  223,  687,  223,  223,   80,
       80,  155,  155,  687,  687,  155,  158,  158,  158,  687,
      158,  158,  238,  238,  238,  238,  238,  238,  166,  166,
      687,  166,  166,  245,  687,  687,  687,  245,  251,  251,

      251,  687,  251,  251,  266,  266,  266,  687,  266,  266,
      274,  274,  274,  274,  274,  274,  179,  179,  179,  687,
      179,  179,  278,  278,  278,  278,  278,  278,  284,  284,
      284,  687,  284,  284,  288,  288,  288,  687,  288,  288,
      184,  184,  687,  184,  184,  104,  104,  104,  687,  104,
      104,  104,  299,  299,  687,  299,  299,  142,  687,  687,
      687,  142,  303,  303,  303,  687,  303,  311,  687,  687,
      687,  311,  316,  316,  316,  687,  316,  316,  221,  221,
      687,  221,  221,  223,  223,  223,  687,  223,  223,  330,
      330,  330,  330,  330,  330,  155,  687,  687,  687,  155,

      335,  335,  335,  687,  335,  344,  687,  687,  687,  687,
      344,  348,  687,  687,  687,  348,  353,  353,  353,  687,
      353,  353,  245,  687,  687,  687,  245,  362,  362,  362,
      687,  687,  362,  365,  687,  687,  687,  687,  365,  251,
      251,  687,  251,  251,  369,  687,  687,  687,  687,  369,
      263,  263,  687,  687,  263,  266,  266,  266,  687,  266,
      266,  378,  378,  378,  378,  378,  378,  384,  384,  687,
      687,  384,  391,  391,  391,  687,  391,  391,  398,  398,
      398,  398,  398,  398,  284,  284,  284,  687,  284,  284,
      278,  278,  687,  278,  278,  288,  288,  288,  687,  288,

      288,  184,  184,  184,  184,  184,  184,  299,  299,  299,
      687,  299,  299,  408,  408,  408,  408,  408,  408,  414,
      414,  414,  687,  687,  414,  142,  142,  687,  687,  142,
      311,  687,  687,  687,  311,  423,  423,  423,  687,  687,
      423,  425,  687,  687,  687,  687,  425,  316,  316,  316,
      687,  316,  316,  221,  687,  687,  687,  221,  427,  427,
      427,  427,  427,  434,  434,  434,  687,  434,  434,  441,
      441,  441,  687,  687,  441,  155,  155,  687,  687,  155,
      245,  687,  245,  687,  245,  451,  451,  687,  451,  451,
      348,  687,  687,  687,  348,  456,  456,  456,  687,  687,

      456,  458,  687,  687,  687,  687,  458,  353,  353,  353,
      687,  353,  353,  459,  687,  687,  687,  687,  459,  362,
      362,  687,  687,  362,  464,  464,  687,  464,  464,  251,
      251,  251,  251,  251,  251,  470,  470,  687,  470,  470,
      263,  687,  687,  687,  263,  474,  474,  474,  687,  474,
      481,  687,  687,  687,  481,  486,  486,  486,  687,  486,
      486,  493,  493,  493,  687,  687,  493,  498,  498,  498,
      498,  687,  498,  502,  687,  687,  687,  687,  502,  391,
      391,  391,  687,  391,  391,  398,  398,  398,  398,  398,
      398,  284,  284,  284,  284,  284,  284,  288,  288,  288,

      288,  288,  288,  506,  506,  506,  687,  506,  506,  511,
      687,  687,  687,  687,  511,  414,  414,  414,  687,  687,
      414,  423,  423,  687,  687,  423,  516,  516,  687,  516,
      516,  520,  520,  520,  687,  687,  520,  434,  434,  434,
      687,  434,  434,  527,  687,  687,  687,  687,  527,  441,
      441,  441,  687,  687,  441,  362,  362,  362,  687,  687,
      362,  451,  451,  451,  687,  451,  451,  530,  530,  530,
      530,  530,  530,  456,  456,  687,  687,  456,  538,  538,
      687,  538,  538,  543,  543,  687,  687,  543,  462,  462,
      687,  462,  462,  464,  464,  464,  687,  464,  464,  550,

      550,  550,  550,  550,  550,  251,  251,  251,  687,  251,
      251,  470,  470,  470,  687,  470,  470,  555,  555,  555,
      555,  555,  555,  561,  561,  561,  687,  687,  561,  263,
      263,  687,  687,  263,  481,  687,  687,  687,  481,  570,
      570,  570,  687,  687,  570,  572,  687,  687,  687,  687,
      572,  486,  486,  486,  687,  486,  486,  493,  493,  493,
      687,  687,  493,  498,  498,  498,  498,  687,  498,  577,
      577,  687,  577,  577,  284,  284,  284,  687,  284,  284,
      288,  288,  288,  687,  288,  288,  506,  506,  506,  687,
      506,  506,  582,  582,  687,  687,  582,  423,  423,  423,

      687,  687,  423,  514,  514,  687,  687,  514,  516,  516,
      516,  687,  516,  516,  589,  589,  589,  589,  589,  589,
      520,  520,  520,  687,  687,  520,  434,  434,  434,  434,
      434,  434,  598,  598,  687,  687,  598,  362,  362,  362,
      687,  687,  362,  601,  601,  601,  687,  601,  601,  456,
      456,  456,  687,  687,  456,  536,  536,  687,  687,  536,
      538,  538,  538,  687,  538,  538,  611,  611,  611,  611,
      611,  611,  541,  541,  687,  687,  541,  543,  543,  543,
      687,  687,  543,  462,  687,  687,  687,  462,  550,  550,
      550,  687,  550,  550,  620,  620,  620,  687,  620,  620,

      625,  687,  687,  687,  687,  625,  561,  561,  561,  687,
      687,  561,  570,  570,  687,  687,  570,  630,  630,  687,
      630,  630,  498,  498,  498,  498,  687,  498,  575,  575,
      687,  687,  575,  577,  577,  577,  687,  577,  577,  638,
      638,  638,  638,  638,  638,  580,  580,  687,  687,  580,
      582,  582,  582,  687,  687,  582,  423,  423,  423,  687,
      687,  423,  514,  687,  687,  687,  514,  414,  414,  414,
      687,  414,  589,  589,  589,  687,  589,  589,  520,  520,
      520,  520,  520,  520,  434,  434,  434,  687,  434,  434,
      596,  596,  687,  687,  596,  598,  598,  598,  687,  687,

      598,  601,  601,  601,  687,  601,  601,  456,  456,  456,
      687,  687,  456,  536,  687,  687,  687,  536,  441,  441,
      441,  687,  441,  611,  611,  611,  687,  611,  611,  541,
      687,  687,  687,  541,  543,  543,  543,  687,  687,  543,
      550,  550,  550,  687,  550,  550,  620,  620,  620,  687,
      620,  620,  656,  656,  687,  687,  656,  570,  570,  570,
      687,  687,  570,  628,  628,  687,  687,  628,  630,  630,
      630,  687,  630,  630,  663,  663,  663,  663,  663,  663,
      561,  561,  561,  687,  687,  561,  575,  687,  687,  687,
      575,  498,  498,  498,  687,  498,  668,  668,  668,  687,

      668,  668,  580,  687,  687,  687,  580,  582,  582,  582,
      687,  687,  582,  589,  589,  589,  687,  589,  589,  520,
      520,  520,  687,  520,  520,  596,  687,  687,  687,  596,
      598,  598,  598,  687,  687,  598,  611,  611,  611,  687,
      611,  611,  541,  541,  687,  687,  541,  543,  543,  543,
      687,  687,  543,  654,  654,  687,  687,  654,  656,  656,
      656,  687,  687,  656,  570,  570,  570,  687,  687,  570,
      628,  687,  687,  687,  628,  561,  561,  561,  687,  561,
      663,  663,  663,  687,  663,  663,  668,  668,  668,  687,
      668,  668,  580,  580,  687,  687,  580,  582,  582,  582,

      687,  687,  582,    3,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687
    } ;

static const flex_int16_t yy_chk[9606] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    5,    6,   13,    6,   14,   10,   24,   24,   24,
        7,    7,   14,    7,   20,   13,   29,   20,    7,    7,
        8,    8,   28,    8,   31,    9,    9,   48,    9,   32,
      669,    8,   36,    8,   22,   30,    9,   29,    9,   10,
       22,   22,   30,   22,   54,   28,   55,   33,   31,   64,
       32,    7,   36,   65,    6,    7,   30,    7,    7,   56,
        8,   19,    6,    7,    7,    9,   30,   19,   19,   19,
       19,   33,   37,   37,   42,   37,   42,   42,   19,   56,
       19,   43,   54,   37,   55,   37,   58,   64,   59,  664,
       19,   65,   43,   61,    5,   62,   82,   56,   19,    7,

      106,   72,  659,   63,   79,   66,   58,   19,   59,   79,
       27,   19,   37,   61,  657,   62,   27,   27,   27,   27,
       48,  106,   19,   63,   58,   66,   59,   27,   83,   27,
      114,   61,   84,   62,   72,   67,   67,  109,   67,   27,
      112,   63,  111,   66,  648,   83,   67,   27,   67,   84,
      115,  114,  107,  131,   19,  132,   27,   19,   19,   26,
       27,  109,  642,  111,  112,   26,   26,   26,   26,  107,
      133,   27,  111,   69,  115,   67,   26,  134,   26,   69,
       69,   69,   69,  128,  128,  140,  639,  128,   26,   82,
       69,  131,   69,  132,   26,  135,   26,  129,  129,  129,

      129,  231,   69,   27,  136,   26,   27,   27,  133,   26,
       69,   71,   71,  168,   71,  134,  137,  246,   26,   69,
       26,   83,   71,   69,   71,   84,  170,  170,  170,  189,
       71,   80,  189,  135,   69,  283,  283,   80,   80,   80,
       80,  634,  136,  210,  211,  107,  120,  120,   80,  120,
       80,   71,   26,  216,  137,   26,   26,  120,  168,  120,
       80,  202,   86,   86,   86,   86,   69,  169,   80,   69,
       69,  164,  164,   86,  164,   86,  192,   80,  140,  195,
      192,   80,  202,  195,  164,   86,  120,  217,  210,  211,
      621,  261,   80,   86,  231,  141,  234,  141,  216,  235,

      282,  192,   86,  282,  195,  615,   86,  612,  141,  169,
      246,  164,  169,  218,  218,  218,  607,   86,  141,  240,
      242,  242,  242,  250,   80,  251,  141,   80,   80,  217,
      241,  305,  217,  312,  102,  102,  102,  102,  313,  141,
      250,  234,  251,  602,  235,  102,  142,  102,  142,  258,
      141,  599,   86,   86,   89,  212,  212,  102,  212,  142,
       89,   89,   89,   89,  240,  102,  258,  590,  212,  142,
       89,   89,  241,   89,  102,  241,  305,  142,  102,  236,
      236,  252,  236,   89,  261,  141,  141,  307,  307,  102,
      142,   89,  236,  243,  243,  212,  243,  252,  252,  292,

       89,  142,  292,  103,   89,  585,  243,  449,  449,  103,
      103,  103,  103,  286,  583,   89,  250,  314,  251,  236,
      103,  306,  103,  349,  102,  102,  312,  253,  318,  286,
      286,  313,  103,  243,  320,  327,  142,  142,  290,  350,
      103,  351,  258,  253,  253,  328,  571,   89,  564,  103,
       89,   89,   90,  103,  290,  290,  563,  562,   90,   90,
       90,   90,  680,  306,  103,  680,  306,  332,   90,   90,
      154,   90,  154,  318,  252,  257,  320,  333,  118,  320,
      327,   90,  337,  154,  118,  118,  118,  118,  253,   90,
      328,  257,  257,  154,  556,  118,  103,  118,   90,  103,

      103,  154,   90,  551,  546,  359,  286,  118,  387,  338,
      314,  388,  332,   90,  154,  118,  349,  355,  374,  333,
      253,  544,  333,  531,  118,  154,  522,  337,  118,  521,
      389,  290,  350,  257,  351,  507,  257,  412,  499,  118,
      309,  309,  155,  309,  155,   90,  494,  357,   90,   90,
      105,  338,  431,  309,  338,  155,  105,  105,  105,  105,
      154,  154,  355,  374,  375,  155,  105,  105,  257,  105,
      339,  118,  380,  155,  118,  118,  145,  489,  339,  105,
      309,  487,  145,  145,  145,  145,  155,  105,  475,  357,
      400,  339,  357,  145,  457,  145,  105,  155,  359,  410,

      105,  387,  339,  432,  388,  145,  367,  367,  367,  375,
      444,  105,  443,  145,  382,  382,  382,  380,  341,  341,
      442,  341,  145,  389,  435,  418,  145,  428,  341,  381,
      412,  341,  155,  155,  424,  400,  417,  145,  346,  346,
      439,  346,  482,  105,  410,  431,  105,  105,  108,  342,
      342,  346,  342,  416,  108,  108,  108,  108,  341,  342,
      415,  429,  342,  436,  108,  108,  409,  108,  399,  145,
      418,  381,  145,  145,  381,  401,  394,  108,  346,  152,
      152,  152,  152,  379,  678,  108,  445,  395,  483,  342,
      152,  373,  152,  484,  108,  678,  432,  370,  108,  368,

      396,  559,  152,  395,  342,  244,  429,  364,  436,  108,
      152,  244,  244,  244,  244,  405,  396,  401,  363,  152,
      401,  157,  356,  152,  244,  354,  345,  157,  157,  157,
      157,  445,  343,  439,  152,  482,  376,  376,  157,  376,
      157,  108,  411,  336,  108,  108,  147,  331,  395,  376,
      157,  244,  147,  147,  147,  147,  324,  405,  157,  476,
      405,  396,  147,  147,  419,  147,  244,  157,  430,  152,
      152,  157,  678,  678,  323,  147,  376,  220,  437,  220,
      395,  483,  157,  147,  411,  488,  484,  411,  220,  446,
      220,  319,  147,  396,  559,  477,  147,  317,  244,  547,

      220,  244,  244,  304,  476,  295,  419,  147,  220,  419,
      430,  293,  490,  430,  157,  547,  291,  157,  157,  158,
      437,  220,  287,  437,  284,  158,  158,  158,  158,  500,
      488,  446,  220,  508,  446,  281,  158,  477,  158,  147,
      477,  277,  147,  147,  148,  270,  479,  479,  158,  479,
      148,  148,  148,  148,  490,  501,  158,  490,  523,  479,
      148,  148,  269,  148,  221,  158,  221,  220,  220,  158,
      264,  256,  532,  148,  500,  221,  497,  221,  508,  255,
      158,  148,  254,  259,  509,  259,  479,  221,  239,  233,
      148,  232,  547,  227,  148,  221,  226,  501,  219,  497,

      501,  524,  215,  523,  209,  148,  259,  497,  221,  208,
      205,  552,  158,  203,  259,  158,  158,  532,  533,  221,
      497,  201,  162,  162,  162,  162,  509,  259,  541,  509,
      200,  497,  199,  162,  262,  162,  262,  148,  259,  541,
      148,  148,  159,  524,  198,  162,  524,  262,  159,  159,
      159,  159,  191,  162,  221,  221,  552,  262,  159,  159,
      533,  159,  162,  533,  553,  262,  162,  187,  171,  557,
      565,  159,  167,  259,  259,  548,  558,  162,  262,  159,
      161,  541,  591,  156,  566,  603,  613,  622,  159,  262,
      580,  548,  159,  153,  151,  150,  149,  163,  163,  163,

      163,  580,  144,  159,  126,  640,  553,  125,  163,  553,
      163,  123,  162,  162,  557,  565,  541,  541,  558,  121,
      163,  558,  592,  117,  262,  262,  566,  591,  163,  566,
      603,  613,  622,  113,   99,  159,  548,  163,  159,  159,
      160,  163,   98,  580,  665,   96,  160,  160,  160,  160,
      640,   95,  163,  670,  165,   94,  160,  160,   93,  160,
      165,  165,  165,  165,  592,  596,   92,  592,  548,  160,
       91,  165,   88,  165,   76,   74,  596,  160,  580,  580,
       73,  604,  614,  165,   70,   68,  160,  163,  163,  665,
      160,  165,   60,   50,  186,  186,  186,  186,  670,  623,

      165,  160,  166,   49,  165,  186,   47,  186,  166,  166,
      166,  166,   46,  641,   45,  165,   44,  186,  596,  166,
       41,  166,   39,  604,  614,  186,  604,  614,   23,  616,
       18,  166,  666,  160,  186,   17,  160,  160,  186,  166,
      616,  623,   16,    3,  623,  671,    0,  165,  166,  186,
      165,  165,  166,  596,  596,  641,    0,    0,  641,  175,
        0,    0,    0,  166,  176,  175,  175,  175,  175,    0,
      176,  176,  176,  176,  666,    0,  175,  666,  175,    0,
        0,  176,  616,  176,  186,  186,    0,  671,  175,    0,
      671,    0,  230,  176,  230,  166,  175,    0,  166,  166,

      643,  176,    0,  230,    0,  175,    0,    0,    0,  175,
      176,  643,    0,  649,  176,  230,    0,  616,  616,  263,
      175,  263,    0,  230,  649,  176,    0,    0,    0,    0,
        0,    0,  263,    0,    0,    0,  230,  654,    0,    0,
        0,    0,  263,    0,    0,    0,    0,  230,  654,    0,
      263,    0,  175,  643,    0,  175,  175,  176,    0,    0,
      176,  176,  177,  263,    0,    0,  649,    0,  177,  177,
      177,  177,    0,    0,  263,    0,    0,    0,  177,  177,
        0,  177,  230,  230,  308,    0,  308,  179,  643,  643,
      654,  177,    0,  179,  179,  179,  179,  308,    0,  177,

        0,  649,  649,    0,  179,    0,  179,  308,  177,  263,
      263,    0,  177,    0,    0,  308,  179,    0,    0,    0,
      652,    0,    0,  177,  179,  654,  654,    0,  308,    0,
        0,  652,    0,  179,    0,  181,    0,  179,    0,  308,
        0,  181,  181,  181,  181,    0,    0,    0,  179,    0,
        0,    0,  181,    0,  181,  177,    0,    0,  177,  177,
      178,    0,    0,    0,  181,    0,  178,  178,  178,  178,
      652,    0,  181,  652,  308,  308,  178,  178,    0,  178,
      179,  181,    0,  179,  179,  181,    0,    0,    0,  178,
        0,  340,    0,  340,    0,    0,  181,  178,    0,    0,

        0,    0,    0,    0,  340,    0,  178,    0,  652,  652,
      178,    0,    0,    0,  340,    0,    0,  245,  673,    0,
        0,  178,  340,  245,  245,  245,  245,    0,  181,  673,
        0,  181,  181,  183,    0,  340,  245,    0,    0,  183,
      183,  183,  183,    0,  677,    0,  340,    0,    0,    0,
      183,    0,  183,  178,    0,  677,  178,  178,  180,    0,
        0,    0,  183,  245,  180,  180,  180,  180,  673,    0,
      183,  673,    0,    0,  180,  180,    0,  180,  245,  183,
        0,  340,  340,  183,    0,    0,    0,  180,  360,  360,
      360,  360,    0,    0,  183,  180,    0,  677,    0,    0,

        0,  360,    0,    0,  180,    0,  673,  673,  180,    0,
      245,    0,    0,  245,  245,  302,  675,    0,    0,  180,
        0,  302,  302,  302,  302,    0,  183,  675,  360,  183,
      183,  184,  677,  677,  302,    0,    0,  184,  184,  184,
      184,  679,    0,  360,    0,    0,    0,    0,  184,    0,
      184,  180,  679,    0,  180,  180,  182,    0,    0,    0,
      184,  302,  182,  182,  182,  182,  675,    0,  184,  675,
        0,    0,  182,  182,    0,  182,  302,  184,  360,  360,
      682,  184,    0,    0,    0,  182,  421,  421,  421,  421,
        0,  682,  184,  182,  679,    0,    0,    0,    0,  421,

        0,    0,  182,    0,  675,  675,  182,    0,  302,    0,
        0,  302,  302,    0,  683,    0,    0,  182,    0,    0,
        0,    0,    0,    0,  184,  683,  421,  184,  184,  679,
      679,    0,  684,  682,  204,  204,  204,  204,    0,  686,
        0,  421,    0,  684,    0,  204,    0,  204,    0,  182,
      686,    0,  182,  182,  185,    0,    0,  204,    0,    0,
      185,  185,  185,  185,    0,  204,    0,  683,  682,  682,
      185,  185,    0,  185,  204,    0,  421,  421,  204,    0,
        0,    0,  684,  185,    0,  684,    0,  310,    0,  204,
        0,  185,  686,  310,  310,  310,  310,    0,    0,    0,

      185,    0,  683,  683,  185,    0,  310,    0,    0,  206,
      206,  206,  206,    0,    0,  185,    0,    0,    0,  206,
      684,  684,  206,    0,  204,  204,    0,  686,  686,    0,
        0,    0,  206,  310,    0,    0,    0,    0,    0,    0,
      206,    0,    0,    0,    0,    0,    0,  185,  310,  206,
      185,  185,  188,  206,    0,    0,    0,    0,  188,  188,
      188,  188,    0,    0,  206,    0,    0,    0,    0,  188,
        0,  188,  207,  207,  207,  207,    0,  188,    0,    0,
      310,  188,  207,  310,  310,  207,    0,    0,    0,  188,
        0,  478,    0,  478,    0,  207,    0,    0,  188,  206,

      206,    0,  188,  207,  478,    0,    0,    0,    0,    0,
        0,    0,  207,  188,  478,    0,  207,    0,    0,    0,
        0,    0,  478,    0,  213,    0,    0,  207,    0,    0,
      213,  213,  213,  213,    0,  478,    0,    0,    0,    0,
        0,  213,  513,  213,  513,  188,  478,    0,  188,  188,
      190,    0,    0,  213,    0,  513,  190,  190,  190,  190,
        0,  213,  207,  207,    0,  513,    0,  190,    0,  190,
      213,    0,    0,  513,  213,  190,    0,    0,    0,  190,
        0,  478,  478,    0,    0,  213,  513,  190,    0,    0,
        0,    0,    0,    0,    0,    0,  190,  513,    0,  214,

      190,    0,    0,    0,    0,  214,  214,  214,  214,    0,
        0,  190,    0,    0,    0,    0,  214,  213,  214,    0,
      213,  213,    0,    0,    0,    0,    0,    0,  214,    0,
        0,    0,  513,  513,    0,    0,  214,    0,    0,    0,
        0,    0,    0,  190,    0,  214,  190,  190,  194,  214,
        0,    0,    0,    0,  194,  194,  194,  194,    0,    0,
      214,    0,  222,    0,  194,  194,    0,  194,  222,  222,
      222,  222,    0,  454,  454,  454,  454,  194,    0,  222,
        0,  222,    0,  194,    0,  194,  454,    0,    0,    0,
        0,  222,  214,    0,  194,  214,  214,    0,  194,  222,

        0,    0,  459,  459,  459,  459,    0,  194,  222,  194,
      223,    0,  222,  454,    0,  459,  223,  223,  223,  223,
        0,    0,    0,  222,    0,    0,    0,  223,  454,  223,
      228,  228,  228,  228,    0,    0,    0,    0,    0,  223,
      228,  194,  459,  228,  194,  194,    0,  223,    0,    0,
        0,    0,    0,  228,    0,  222,  223,  459,  222,  222,
      223,  228,    0,  454,  454,    0,    0,    0,    0,    0,
      228,  223,    0,    0,  228,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  228,    0,    0,  229,  229,
      229,  229,  459,  459,    0,    0,    0,    0,  229,    0,

      514,  229,  514,  223,    0,    0,  223,  223,  224,    0,
        0,  229,    0,  514,  224,  224,  224,  224,    0,  229,
      228,  228,    0,  514,  224,  224,    0,  224,  229,    0,
        0,  514,  229,    0,    0,    0,    0,  224,    0,    0,
        0,    0,    0,  229,  514,  224,    0,    0,    0,    0,
        0,    0,    0,    0,  224,  514,    0,  237,  224,    0,
        0,    0,    0,  237,  237,  237,  237,    0,    0,  224,
        0,    0,    0,    0,  237,    0,  237,    0,  229,  229,
        0,    0,    0,    0,    0,    0,  237,    0,    0,    0,
      514,  514,    0,    0,  237,    0,    0,    0,    0,    0,

        0,  224,    0,  237,  224,  224,  225,  237,    0,    0,
        0,    0,  225,  225,  225,  225,    0,    0,  237,    0,
      238,    0,  225,  225,    0,  225,  238,  238,  238,  238,
        0,    0,    0,    0,    0,  225,    0,  238,    0,  238,
        0,    0,    0,  225,    0,    0,    0,    0,    0,  238,
      237,    0,  225,  237,  237,    0,  225,  238,    0,    0,
      247,  247,  247,  247,    0,    0,  238,  225,    0,    0,
      238,  247,    0,  247,  248,  248,  248,  248,    0,    0,
        0,  238,    0,  247,    0,  248,    0,  248,    0,    0,
        0,  247,    0,    0,    0,    0,    0,  248,    0,  225,

      247,    0,  225,  225,  247,  248,    0,    0,    0,    0,
        0,    0,    0,  238,  248,  247,  238,  238,  248,    0,
        0,    0,    0,    0,  265,    0,    0,    0,    0,  248,
      265,  265,  265,  265,    0,    0,    0,    0,  266,    0,
        0,  265,    0,  265,  266,  266,  266,  266,    0,    0,
      247,  247,    0,  265,    0,  266,    0,  266,    0,    0,
        0,  265,    0,    0,  248,  248,    0,  266,    0,    0,
      265,    0,    0,    0,  265,  266,    0,    0,  271,  271,
      271,  271,    0,    0,  266,  265,    0,    0,  266,    0,
        0,  271,    0,  461,    0,  461,    0,    0,    0,  266,

        0,  271,    0,    0,  461,    0,  461,    0,    0,  271,
        0,    0,    0,    0,    0,    0,  461,  265,  271,    0,
      265,  265,  271,    0,  461,    0,  272,  272,  272,  272,
        0,  266,    0,  271,  266,  266,  267,  461,    0,  272,
        0,    0,  267,  267,  267,  267,    0,    0,  461,  272,
        0,    0,  267,  267,    0,  267,    0,  272,    0,    0,
        0,    0,    0,    0,    0,  267,  272,    0,  271,  271,
      272,    0,    0,  267,    0,    0,    0,    0,    0,    0,
        0,  272,  267,  461,  461,  273,  267,    0,    0,    0,
        0,  273,  273,  273,  273,    0,    0,  267,    0,    0,

        0,    0,  273,    0,  273,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  273,    0,  272,  272,    0,    0,
        0,    0,  273,    0,    0,    0,    0,    0,    0,  267,
        0,  273,  267,  267,  268,  273,    0,    0,    0,    0,
      268,  268,  268,  268,    0,  535,  273,  535,  274,    0,
      268,  268,    0,  268,  274,  274,  274,  274,  535,    0,
        0,    0,    0,  268,    0,  274,    0,  274,  535,    0,
        0,  268,    0,    0,    0,    0,  535,  274,  273,    0,
      268,  273,  273,    0,  268,  274,    0,    0,    0,  535,
        0,    0,    0,    0,  274,  268,    0,  278,  274,    0,

      535,    0,    0,  278,  278,  278,  278,    0,    0,  274,
        0,    0,    0,    0,  278,    0,  278,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  278,  268,    0,    0,
      268,  268,    0,    0,  278,  535,  535,    0,    0,    0,
        0,  274,    0,  278,  274,  274,  275,  278,    0,    0,
        0,    0,  275,  275,  275,  275,    0,    0,  278,    0,
        0,    0,  275,  275,    0,  275,  280,  280,  280,  280,
        0,    0,    0,    0,    0,  275,    0,  280,    0,  280,
        0,    0,    0,  275,    0,    0,    0,    0,    0,  280,
      278,    0,  275,  278,  278,    0,  275,  280,    0,    0,

        0,    0,    0,    0,    0,    0,  280,  275,    0,    0,
      280,    0,    0,    0,    0,    0,    0,    0,  288,    0,
        0,  280,    0,    0,  288,  288,  288,  288,    0,    0,
        0,    0,    0,    0,    0,  288,    0,  288,    0,  275,
        0,    0,  275,  275,  276,    0,    0,  288,    0,    0,
      276,  276,  276,  276,    0,  288,  280,  280,    0,    0,
      276,  276,    0,  276,  288,  462,    0,  462,  288,    0,
        0,    0,    0,  276,    0,    0,  462,    0,  462,  288,
        0,  276,    0,    0,    0,    0,    0,    0,  462,    0,
      276,    0,    0,  298,  276,    0,  462,    0,    0,  298,

      298,  298,  298,    0,    0,  276,    0,    0,    0,  462,
      298,  288,  298,    0,  288,  288,    0,    0,    0,  311,
      462,    0,  298,    0,    0,  311,  311,  311,  311,    0,
      298,    0,    0,    0,    0,    0,    0,  276,  311,  298,
      276,  276,  279,  298,    0,    0,    0,    0,  279,  279,
      279,  279,    0,    0,  298,  462,  462,    0,  279,  279,
        0,  279,    0,    0,    0,  311,    0,    0,  299,    0,
        0,  279,    0,    0,  299,  299,  299,  299,    0,  279,
      311,    0,    0,    0,    0,  299,  298,  299,  279,  298,
      298,    0,  279,    0,    0,    0,    0,  299,    0,    0,

        0,    0,    0,  279,    0,  299,    0,    0,    0,    0,
        0,    0,  311,    0,  299,  311,  311,  334,  299,    0,
        0,    0,    0,  334,  334,  334,  334,    0,    0,  299,
        0,    0,    0,    0,    0,  279,  334,    0,  279,  279,
      289,  511,  511,  511,  511,    0,  289,  289,  289,  289,
        0,    0,    0,    0,  511,    0,  289,  289,    0,  289,
        0,  299,    0,  334,  299,  299,  303,    0,    0,  289,
        0,    0,  303,  303,  303,  303,    0,  289,  334,    0,
        0,  511,    0,    0,    0,  303,  289,    0,    0,    0,
      289,    0,    0,    0,    0,  303,  511,    0,    0,    0,

        0,  289,    0,  303,    0,    0,    0,    0,    0,    0,
      334,    0,  303,  334,  334,  347,  303,    0,    0,    0,
        0,  347,  347,  347,  347,    0,    0,  303,    0,    0,
        0,  511,  511,  289,  347,    0,  289,  289,  294,  527,
      527,  527,  527,    0,  294,  294,  294,  294,    0,    0,
        0,    0,  527,    0,  294,  294,    0,  294,    0,  303,
        0,  347,  303,  303,  315,    0,    0,  294,    0,    0,
      315,  315,  315,  315,    0,  294,  347,    0,    0,  527,
        0,  315,    0,  315,  294,    0,    0,    0,  294,    0,
        0,    0,    0,  315,  527,    0,    0,    0,    0,  294,

        0,  315,    0,    0,    0,    0,    0,    0,  347,    0,
      315,  347,  347,  348,  315,    0,    0,    0,    0,  348,
      348,  348,  348,    0,    0,  315,    0,    0,    0,  527,
      527,  294,  348,    0,  294,  294,  300,  568,  568,  568,
      568,    0,  300,  300,  300,  300,    0,    0,    0,    0,
      568,    0,  300,  300,    0,  300,    0,  315,    0,  348,
      315,  315,  316,    0,    0,  300,    0,    0,  316,  316,
      316,  316,    0,  300,  348,    0,    0,  568,    0,  316,
        0,  316,  300,    0,    0,    0,  300,    0,    0,    0,
        0,  316,  568,    0,    0,    0,    0,  300,    0,  316,

        0,    0,    0,    0,    0,    0,  348,    0,  316,  348,
      348,  361,  316,    0,    0,    0,    0,  361,  361,  361,
      361,    0,    0,  316,    0,    0,    0,  568,  568,  300,
      361,    0,  300,  300,  301,    0,    0,    0,    0,    0,
      301,  301,  301,  301,    0,    0,    0,    0,    0,    0,
      301,  301,    0,  301,    0,  316,    0,  361,  316,  316,
        0,    0,    0,  301,    0,  325,  325,  325,  325,    0,
        0,  301,  361,    0,    0,  325,  325,    0,  325,    0,
      301,    0,    0,    0,  301,    0,    0,    0,  325,    0,
        0,    0,    0,    0,    0,  301,  325,  625,  625,  625,

      625,    0,    0,    0,  361,  325,    0,  361,  361,  325,
      625,    0,    0,  326,  326,  326,  326,    0,    0,    0,
      325,    0,    0,  326,  326,    0,  326,  301,    0,    0,
      301,  301,  329,    0,    0,    0,  326,  625,  329,  329,
      329,  329,    0,    0,  326,    0,    0,    0,    0,  329,
        0,  329,  625,  326,    0,  325,  325,  326,    0,    0,
        0,  329,    0,    0,    0,    0,    0,    0,  326,  329,
        0,    0,    0,    0,    0,    0,    0,  330,  329,    0,
        0,    0,  329,  330,  330,  330,  330,  625,  625,    0,
        0,    0,    0,  329,  330,    0,  330,    0,    0,    0,

        0,    0,  335,  326,  326,    0,  330,    0,  335,  335,
      335,  335,    0,  536,  330,  536,    0,    0,    0,    0,
        0,  335,    0,  330,    0,  329,  536,  330,  329,  329,
        0,  335,    0,    0,    0,    0,  536,    0,  330,  335,
        0,    0,    0,    0,  536,    0,    0,    0,  335,    0,
        0,    0,  335,  344,  344,  344,  344,  536,    0,    0,
        0,    0,    0,  335,  344,    0,  344,    0,  536,    0,
      330,    0,  352,  330,  330,    0,  344,    0,  352,  352,
      352,  352,    0,    0,  344,    0,    0,    0,    0,  352,
        0,  352,    0,  344,    0,  335,    0,  344,  335,  335,

        0,  352,    0,  536,  536,    0,    0,    0,  344,  352,
        0,    0,    0,    0,    0,    0,    0,  353,  352,    0,
        0,    0,  352,  353,  353,  353,  353,    0,    0,    0,
        0,    0,    0,  352,  353,    0,  353,    0,    0,  365,
      365,  365,  365,  344,  344,    0,  353,    0,    0,    0,
      365,    0,  365,    0,  353,    0,    0,    0,    0,    0,
        0,    0,  365,  353,    0,  352,    0,  353,  352,  352,
      365,    0,  371,  371,  371,  371,    0,    0,  353,  365,
        0,    0,  371,  365,    0,  371,    0,    0,  369,  369,
      369,  369,    0,    0,  365,  371,    0,    0,    0,  369,

        0,  369,    0,  371,    0,    0,    0,    0,    0,    0,
      353,  369,  371,  353,  353,    0,  371,    0,    0,  369,
        0,    0,    0,    0,    0,    0,    0,  371,  369,  365,
      365,  366,  369,    0,    0,    0,    0,  366,  366,  366,
      366,    0,  574,  369,  574,    0,    0,  366,  366,    0,
      366,  372,  372,  372,  372,  574,    0,    0,    0,    0,
      366,  372,  371,  371,  372,  574,    0,    0,  366,    0,
        0,    0,    0,  574,  372,    0,    0,  366,  369,  369,
        0,  366,  372,    0,    0,    0,  574,    0,    0,  366,
        0,  372,  366,  377,    0,  372,    0,  574,    0,  377,

      377,  377,  377,    0,    0,    0,  372,  383,    0,    0,
      377,    0,  377,  383,  383,  383,  383,    0,    0,    0,
        0,    0,  377,    0,  366,    0,  383,  366,  366,    0,
      377,    0,  574,  574,    0,    0,    0,    0,  378,  377,
        0,  372,  372,  377,  378,  378,  378,  378,    0,    0,
        0,    0,    0,  383,  377,  378,    0,  378,    0,    0,
        0,    0,    0,    0,  384,    0,    0,  378,  383,    0,
      384,  384,  384,  384,    0,  378,    0,    0,    0,    0,
        0,    0,    0,  384,  378,    0,  377,    0,  378,  377,
      377,    0,    0,  384,    0,    0,    0,    0,    0,  378,

      383,  384,    0,  383,  383,    0,    0,    0,    0,    0,
      384,    0,    0,  385,  384,    0,    0,    0,    0,  385,
      385,  385,  385,    0,    0,  384,    0,    0,    0,  385,
        0,  378,  385,    0,  378,  378,    0,    0,    0,  386,
        0,    0,  385,    0,    0,  386,  386,  386,  386,    0,
      385,    0,    0,    0,    0,  386,    0,  384,  386,  385,
      384,  384,    0,  385,    0,    0,    0,    0,  386,    0,
        0,    0,    0,    0,  385,    0,  386,    0,    0,    0,
        0,    0,    0,    0,  390,  386,    0,    0,    0,  386,
      390,  390,  390,  390,    0,    0,    0,    0,    0,    0,

      386,  390,    0,  390,    0,    0,  385,    0,  413,  385,
      385,    0,    0,  390,  413,  413,  413,  413,    0,    0,
        0,  390,    0,    0,    0,    0,    0,  413,    0,    0,
      390,    0,  386,  391,  390,  386,  386,    0,    0,  391,
      391,  391,  391,    0,    0,  390,    0,    0,    0,  407,
      391,    0,  391,    0,  413,  407,  407,  407,  407,    0,
        0,    0,  391,    0,    0,    0,  407,    0,  407,  413,
      391,    0,    0,    0,    0,    0,    0,  390,  407,  391,
      390,  390,    0,  391,    0,    0,  407,    0,    0,    0,
        0,    0,    0,    0,  391,  407,    0,    0,    0,  407,

        0,  413,    0,    0,  413,  413,  408,    0,    0,    0,
      407,    0,  408,  408,  408,  408,    0,    0,    0,    0,
        0,    0,    0,  408,    0,  408,  391,    0,    0,  391,
      391,  392,    0,    0,    0,  408,    0,  392,  392,  392,
      392,    0,  407,  408,    0,  407,  407,  392,  392,    0,
      392,    0,  408,    0,    0,    0,  408,    0,    0,    0,
      392,    0,    0,    0,  414,    0,    0,  408,  392,    0,
      414,  414,  414,  414,    0,    0,    0,  392,    0,    0,
        0,  392,    0,  414,    0,    0,    0,    0,  422,    0,
        0,    0,  392,  414,  422,  422,  422,  422,    0,  408,

        0,  414,  408,  408,    0,    0,    0,  422,    0,    0,
      414,    0,    0,    0,  414,    0,    0,    0,    0,  425,
      425,  425,  425,    0,  392,  414,    0,  392,  392,  393,
      425,    0,  425,    0,  422,  393,  393,  393,  393,    0,
        0,    0,  425,    0,    0,  393,  393,    0,  393,  422,
      425,    0,    0,    0,    0,    0,    0,  414,  393,  425,
      414,  414,    0,  425,    0,    0,  393,    0,    0,    0,
        0,    0,    0,    0,  425,  393,    0,    0,    0,  393,
        0,  422,    0,    0,  422,  422,  426,    0,    0,    0,
      393,    0,  426,  426,  426,  426,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  426,    0,    0,    0,  425,
      425,  427,    0,    0,    0,    0,    0,  427,  427,  427,
      427,    0,  393,    0,    0,  393,  393,  403,  427,    0,
      427,    0,  426,  403,  403,  403,  403,    0,    0,    0,
      427,    0,    0,  403,  403,    0,  403,  426,  427,    0,
        0,    0,    0,    0,    0,    0,  403,  427,  575,    0,
      575,  427,    0,    0,  403,    0,    0,    0,    0,    0,
        0,  575,  427,  403,    0,    0,    0,  403,    0,  426,
        0,  575,  426,  426,    0,  403,    0,    0,  403,  575,
        0,  440,    0,    0,    0,    0,    0,  440,  440,  440,

      440,    0,  575,    0,  427,    0,    0,  427,  427,  433,
      440,    0,    0,  575,    0,  433,  433,  433,  433,    0,
      403,    0,    0,  403,  403,  404,  433,    0,  433,    0,
        0,  404,  404,  404,  404,    0,    0,  440,  433,    0,
        0,  404,  404,    0,  404,    0,  433,    0,  575,  575,
        0,    0,  440,    0,  404,  433,    0,    0,  455,  433,
        0,    0,  404,    0,  455,  455,  455,  455,    0,    0,
      433,  404,    0,    0,  434,  404,    0,  455,    0,    0,
      434,  434,  434,  434,  440,    0,  404,  440,  440,    0,
        0,  434,    0,  434,    0,    0,    0,    0,    0,    0,

        0,    0,  433,  434,  455,  433,  433,  441,    0,    0,
        0,  434,    0,  441,  441,  441,  441,    0,  404,  455,
      434,  404,  404,  406,  434,    0,  441,    0,    0,  406,
      406,  406,  406,    0,    0,  434,  441,    0,    0,  406,
      406,    0,  406,    0,  441,    0,    0,    0,    0,    0,
        0,  455,  406,  441,  455,  455,  448,  441,    0,    0,
      406,    0,  448,  448,  448,  448,    0,  434,  441,  406,
      434,  434,    0,  406,    0,  448,    0,    0,    0,    0,
        0,  406,    0,    0,  406,    0,    0,    0,    0,  450,
        0,    0,    0,    0,    0,  450,  450,  450,  450,    0,

      441,    0,  448,  441,  441,    0,  450,    0,  450,    0,
        0,    0,    0,    0,  448,    0,  406,  448,  450,  406,
      406,    0,    0,  460,    0,    0,  450,    0,    0,  460,
      460,  460,  460,    0,    0,  450,    0,  451,    0,  450,
        0,    0,  460,  451,  451,  451,  451,    0,    0,  448,
      450,    0,  448,  448,  451,    0,  451,  458,  458,  458,
      458,    0,    0,    0,    0,    0,  451,    0,  458,  460,
      458,    0,    0,    0,  451,    0,    0,    0,    0,    0,
      458,  460,  450,  451,  460,  450,  450,  451,  458,    0,
        0,    0,    0,    0,    0,    0,    0,  458,  451,    0,

        0,  458,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  458,    0,    0,    0,  460,    0,    0,  460,
      460,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      451,    0,    0,  451,  451,  452,    0,    0,    0,    0,
        0,  452,  452,  452,  452,    0,    0,  458,  458,    0,
        0,  452,  452,    0,  452,    0,    0,  627,    0,  627,
      463,    0,    0,    0,  452,    0,  463,  463,  463,  463,
      627,    0,  452,    0,    0,    0,    0,  463,    0,  463,
      627,  452,    0,    0,    0,  452,    0,    0,  627,  463,
        0,    0,    0,    0,    0,    0,  452,  463,    0,    0,

        0,  627,    0,    0,    0,    0,  463,    0,  464,    0,
      463,    0,  627,    0,  464,  464,  464,  464,    0,    0,
        0,  463,    0,    0,    0,  464,    0,  464,  452,    0,
        0,  452,  452,  453,    0,    0,    0,  464,    0,  453,
      453,  453,  453,    0,    0,  464,    0,  627,  627,  453,
      453,    0,  453,  463,  464,    0,  463,  463,  464,    0,
        0,    0,  453,    0,  628,    0,  628,    0,    0,  464,
      453,    0,    0,    0,    0,    0,    0,  628,    0,  453,
        0,    0,    0,  453,    0,    0,    0,  628,    0,    0,
      473,    0,    0,    0,  453,  628,  473,  473,  473,  473,

        0,  464,    0,    0,  464,  464,  467,    0,  628,  473,
        0,    0,  467,  467,  467,  467,    0,    0,    0,  628,
        0,    0,    0,  467,    0,  467,  453,    0,    0,  453,
      453,  465,    0,    0,    0,  467,  473,  465,  465,  465,
      465,    0,    0,  467,    0,    0,    0,  465,  465,    0,
      465,  473,  467,    0,  628,  628,  467,    0,    0,    0,
      465,    0,    0,    0,    0,    0,    0,  467,  465,    0,
        0,    0,    0,    0,    0,    0,    0,  465,    0,    0,
        0,  465,    0,  473,    0,    0,  473,  473,    0,    0,
        0,    0,  465,    0,    0,    0,    0,    0,    0,  467,

        0,    0,  467,  467,  469,    0,    0,    0,    0,    0,
      469,  469,  469,  469,    0,    0,    0,    0,    0,    0,
        0,  469,    0,  469,  465,    0,    0,  465,  465,  466,
        0,    0,    0,  469,    0,  466,  466,  466,  466,    0,
        0,  469,    0,    0,    0,  466,  466,    0,  466,    0,
      469,    0,    0,    0,  469,    0,    0,    0,  466,    0,
        0,    0,    0,    0,    0,  469,  466,    0,    0,    0,
        0,    0,    0,    0,  470,  466,    0,    0,    0,  466,
      470,  470,  470,  470,    0,    0,    0,    0,    0,    0,
      466,  470,    0,  470,    0,    0,    0,  469,    0,  474,

      469,  469,    0,  470,    0,  474,  474,  474,  474,    0,
        0,  470,    0,    0,    0,    0,    0,    0,  474,    0,
      470,    0,  466,  480,  470,  466,  466,    0,  474,  480,
      480,  480,  480,    0,    0,  470,  474,    0,    0,    0,
        0,    0,  480,    0,  481,  474,    0,    0,    0,  474,
      481,  481,  481,  481,    0,    0,    0,    0,    0,    0,
      474,    0,    0,  481,    0,    0,    0,  470,    0,  480,
      470,  470,  471,    0,    0,    0,    0,    0,  471,  471,
      471,  471,    0,    0,  480,    0,    0,    0,  471,  471,
      481,  471,  474,    0,    0,  474,  474,    0,    0,    0,

        0,  471,    0,    0,    0,  481,    0,    0,    0,  471,
        0,    0,    0,    0,    0,    0,  480,    0,  471,  480,
      480,    0,  471,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  471,    0,    0,    0,  481,    0,    0,
      481,  481,    0,    0,  485,    0,    0,    0,    0,    0,
      485,  485,  485,  485,    0,    0,    0,    0,    0,    0,
        0,  485,    0,  485,    0,  471,    0,    0,  471,  471,
      472,    0,    0,  485,    0,    0,  472,  472,  472,  472,
        0,  485,    0,    0,    0,    0,  472,  472,    0,  472,
      485,    0,    0,    0,  485,    0,    0,    0,    0,  472,

        0,    0,    0,    0,    0,  485,    0,  472,    0,    0,
        0,    0,    0,    0,    0,  486,  472,    0,    0,    0,
      472,  486,  486,  486,  486,    0,    0,    0,    0,    0,
        0,  472,  486,    0,  486,    0,    0,  485,    0,  492,
      485,  485,    0,    0,  486,  492,  492,  492,  492,    0,
        0,    0,  486,    0,    0,    0,    0,    0,  492,    0,
        0,  486,    0,  472,  493,  486,  472,  472,    0,    0,
      493,  493,  493,  493,    0,    0,  486,    0,    0,    0,
      495,    0,    0,  493,    0,  492,  495,  495,  495,  495,
        0,    0,    0,  493,    0,    0,  495,    0,    0,  495,

      492,  493,    0,    0,    0,    0,    0,    0,  486,  495,
      493,  486,  486,    0,  493,    0,    0,  495,    0,    0,
        0,    0,    0,    0,    0,  493,  495,    0,    0,    0,
      495,    0,  492,    0,    0,  492,  492,  496,    0,    0,
        0,  495,    0,  496,  496,  496,  496,    0,    0,    0,
        0,    0,    0,  496,    0,    0,  496,  493,    0,    0,
      493,  493,    0,    0,    0,    0,  496,    0,  502,  502,
      502,  502,    0,  495,  496,    0,  495,  495,    0,  502,
        0,  502,    0,  496,    0,    0,    0,  496,    0,    0,
        0,  502,    0,    0,    0,    0,    0,    0,  496,  502,

        0,    0,    0,    0,    0,    0,    0,  503,  502,    0,
        0,    0,  502,  503,  503,  503,  503,    0,    0,    0,
        0,    0,    0,  502,  503,    0,  503,    0,    0,    0,
      496,    0,  504,  496,  496,    0,  503,    0,  504,  504,
      504,  504,    0,    0,  503,    0,    0,    0,    0,  504,
        0,  504,    0,  503,    0,    0,    0,  503,  502,  502,
        0,  504,    0,    0,    0,    0,    0,    0,  503,  504,
        0,    0,    0,    0,    0,    0,    0,  505,  504,    0,
        0,    0,  504,  505,  505,  505,  505,    0,    0,    0,
        0,    0,    0,  504,  505,    0,  505,    0,    0,    0,

      503,    0,  506,  503,  503,    0,  505,    0,  506,  506,
      506,  506,    0,    0,  505,    0,    0,    0,    0,  506,
        0,  506,    0,  505,    0,  504,  512,  505,  504,  504,
        0,  506,  512,  512,  512,  512,    0,    0,  505,  506,
        0,    0,    0,    0,    0,  512,    0,    0,  506,    0,
        0,    0,  506,    0,    0,    0,    0,    0,    0,  515,
        0,    0,    0,  506,    0,  515,  515,  515,  515,    0,
      505,    0,  512,  505,  505,    0,  515,    0,  515,    0,
        0,    0,    0,    0,  512,  519,    0,  512,  515,    0,
        0,  519,  519,  519,  519,  506,  515,    0,  506,  506,

        0,    0,    0,    0,  519,  515,    0,  516,    0,  515,
        0,    0,    0,  516,  516,  516,  516,    0,    0,  512,
      515,    0,  512,  512,  516,    0,  516,    0,    0,    0,
        0,  519,    0,    0,    0,    0,  516,    0,    0,    0,
        0,    0,    0,    0,  516,    0,  519,    0,    0,    0,
        0,    0,  515,  516,    0,  515,  515,  516,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  516,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  519,  520,
        0,  519,  519,    0,    0,  520,  520,  520,  520,    0,
        0,    0,    0,    0,    0,    0,  520,    0,  520,    0,

      516,    0,    0,  516,  516,  517,    0,    0,  520,    0,
        0,  517,  517,  517,  517,    0,  520,    0,    0,    0,
        0,  517,  517,    0,  517,  520,    0,    0,    0,  520,
        0,    0,    0,    0,  517,    0,    0,    0,  528,    0,
      520,    0,  517,    0,  528,  528,  528,  528,    0,    0,
        0,  517,    0,    0,  529,  517,    0,  528,    0,    0,
      529,  529,  529,  529,    0,    0,  517,    0,    0,    0,
        0,  529,  520,  529,    0,  520,  520,    0,    0,    0,
        0,    0,    0,  529,  528,    0,    0,  534,    0,    0,
        0,  529,    0,  534,  534,  534,  534,    0,  517,  528,

      529,  517,  517,  518,  529,    0,  534,    0,    0,  518,
      518,  518,  518,    0,    0,  529,    0,    0,    0,  518,
      518,    0,  518,    0,    0,    0,    0,    0,    0,    0,
        0,  528,  518,  534,  528,  528,    0,    0,    0,    0,
      518,    0,    0,    0,    0,  534,    0,  529,  534,  518,
      529,  529,  530,  518,    0,    0,    0,    0,  530,  530,
      530,  530,    0,    0,  518,    0,    0,    0,    0,  530,
        0,  530,    0,    0,    0,    0,    0,    0,    0,    0,
      534,  530,    0,  534,  534,    0,    0,    0,    0,  530,
        0,    0,    0,    0,    0,    0,  518,    0,  530,  518,

      518,  526,  530,    0,    0,    0,    0,  526,  526,  526,
      526,    0,    0,  530,    0,  537,    0,  526,  526,    0,
      526,  537,  537,  537,  537,    0,    0,    0,    0,    0,
      526,    0,  537,    0,  537,    0,    0,    0,  526,    0,
        0,    0,    0,    0,  537,  530,    0,  526,  530,  530,
        0,  526,  537,    0,    0,    0,    0,    0,    0,  526,
        0,  537,  526,  538,    0,  537,    0,    0,    0,  538,
      538,  538,  538,    0,    0,    0,  537,    0,    0,    0,
      538,    0,  538,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  538,    0,  526,    0,  542,  526,  526,    0,

      538,    0,  542,  542,  542,  542,    0,    0,  537,  538,
        0,  537,  537,  538,    0,  542,    0,    0,    0,    0,
      543,    0,    0,    0,  538,    0,  543,  543,  543,  543,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  543,
        0,    0,  542,    0,    0,  545,    0,    0,    0,    0,
        0,  545,  545,  545,  545,    0,  538,  542,    0,  538,
      538,  539,    0,    0,  545,    0,  543,  539,  539,  539,
      539,    0,    0,    0,    0,    0,    0,  539,  539,    0,
      539,  543,    0,    0,    0,    0,    0,    0,    0,  542,
      539,  545,  542,  542,    0,    0,    0,    0,  539,    0,

        0,    0,    0,    0,    0,    0,  545,  539,    0,    0,
        0,  539,    0,  543,    0,    0,  543,  543,    0,    0,
        0,    0,  539,    0,    0,  560,    0,    0,    0,    0,
        0,  560,  560,  560,  560,    0,    0,    0,  545,    0,
        0,  545,  545,  549,  560,    0,    0,    0,    0,  549,
      549,  549,  549,    0,  539,    0,    0,  539,  539,  540,
      549,    0,  549,    0,    0,  540,  540,  540,  540,    0,
        0,  560,  549,    0,    0,  540,  540,    0,  540,    0,
      549,    0,    0,    0,    0,    0,  560,    0,  540,  549,
        0,    0,    0,  549,    0,    0,  540,    0,    0,    0,

        0,    0,    0,    0,  549,  540,    0,    0,  550,  540,
        0,    0,    0,    0,  550,  550,  550,  550,  560,    0,
      540,  560,  560,    0,  554,  550,    0,  550,    0,    0,
      554,  554,  554,  554,    0,    0,  549,  550,    0,  549,
      549,  554,    0,  554,    0,  550,    0,    0,    0,    0,
        0,    0,  540,  554,  550,  540,  540,  561,  550,    0,
        0,  554,    0,  561,  561,  561,  561,    0,    0,  550,
      554,    0,    0,  555,  554,    0,  561,    0,    0,  555,
      555,  555,  555,    0,    0,  554,  561,    0,    0,    0,
      555,    0,  555,    0,  561,    0,    0,    0,    0,    0,

        0,  550,  555,  561,  550,  550,  569,  561,    0,    0,
      555,    0,  569,  569,  569,  569,    0,  554,  561,  555,
      554,  554,    0,  555,    0,  569,    0,    0,  572,  572,
      572,  572,    0,    0,  555,    0,    0,    0,    0,  572,
        0,  572,    0,    0,    0,    0,    0,    0,    0,    0,
      561,  572,  569,  561,  561,    0,    0,    0,    0,  572,
        0,    0,    0,    0,    0,    0,  555,  569,  572,  555,
      555,  576,  572,    0,    0,    0,    0,  576,  576,  576,
      576,    0,    0,  572,    0,    0,    0,  577,  576,    0,
      576,    0,    0,  577,  577,  577,  577,    0,    0,  569,

      576,    0,  569,  569,  577,    0,  577,    0,  576,    0,
        0,    0,    0,    0,    0,    0,  577,  576,  572,  572,
      573,  576,    0,    0,  577,    0,  573,  573,  573,  573,
        0,    0,  576,  577,    0,    0,  573,  577,    0,  573,
        0,    0,    0,    0,    0,    0,  581,    0,  577,  573,
        0,    0,  581,  581,  581,  581,    0,  573,    0,    0,
        0,    0,    0,    0,  576,  581,  573,  576,  576,    0,
      573,    0,    0,    0,    0,    0,    0,    0,  573,    0,
      577,  573,    0,  577,  577,    0,    0,  582,    0,    0,
        0,    0,  581,  582,  582,  582,  582,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  582,  581,    0,    0,
        0,    0,    0,  573,    0,    0,  573,  573,  578,    0,
        0,    0,    0,    0,  578,  578,  578,  578,    0,    0,
        0,    0,    0,  582,  578,  578,    0,  578,    0,  581,
        0,    0,  581,  581,  584,    0,    0,  578,  582,    0,
      584,  584,  584,  584,    0,  578,    0,    0,    0,    0,
        0,    0,    0,  584,  578,    0,    0,    0,  578,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  578,
      582,    0,    0,  582,  582,    0,    0,    0,    0,    0,
      584,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  584,    0,    0,    0,    0,
        0,  578,    0,    0,  578,  578,  579,    0,    0,    0,
        0,    0,  579,  579,  579,  579,    0,    0,    0,    0,
        0,    0,  579,  579,    0,  579,    0,  584,    0,    0,
      584,  584,    0,    0,    0,  579,    0,  586,  586,  586,
      586,    0,    0,  579,    0,    0,    0,  586,    0,    0,
      586,    0,  579,    0,    0,    0,  579,    0,    0,    0,
      586,    0,    0,    0,    0,    0,    0,  579,  586,    0,
      587,  587,  587,  587,    0,    0,    0,  586,    0,    0,
      587,  586,    0,  587,    0,    0,    0,    0,    0,  588,

        0,    0,  586,  587,    0,  588,  588,  588,  588,  579,
        0,  587,  579,  579,    0,    0,  588,    0,  588,    0,
      587,    0,    0,    0,  587,    0,    0,    0,  588,    0,
        0,    0,    0,    0,    0,  587,  588,  586,  586,    0,
        0,    0,    0,    0,  589,  588,    0,    0,    0,  588,
      589,  589,  589,  589,    0,    0,    0,    0,    0,    0,
      588,  589,    0,  589,    0,    0,    0,    0,    0,  595,
      587,  587,    0,  589,    0,  595,  595,  595,  595,    0,
        0,  589,    0,    0,    0,    0,  595,    0,  595,    0,
      589,    0,  588,  597,  589,  588,  588,    0,  595,  597,

      597,  597,  597,    0,    0,  589,  595,    0,    0,    0,
        0,    0,  597,    0,  598,  595,    0,    0,    0,  595,
      598,  598,  598,  598,    0,    0,    0,    0,    0,    0,
      595,    0,    0,  598,    0,    0,    0,  589,    0,  597,
      589,  589,  593,    0,    0,    0,    0,    0,  593,  593,
      593,  593,    0,    0,  597,    0,    0,    0,  593,  593,
      598,  593,  595,    0,    0,  595,  595,    0,    0,    0,
        0,  593,    0,    0,    0,  598,    0,    0,    0,  593,
        0,    0,    0,    0,    0,    0,  597,    0,  593,  597,
      597,    0,  593,    0,    0,    0,    0,    0,    0,    0,

      593,    0,    0,  593,    0,    0,    0,  598,    0,    0,
      598,  598,    0,    0,  600,    0,    0,    0,    0,    0,
      600,  600,  600,  600,    0,    0,    0,    0,    0,    0,
        0,  600,    0,  600,    0,  593,    0,    0,  593,  593,
      594,    0,    0,  600,    0,    0,  594,  594,  594,  594,
        0,  600,    0,    0,    0,    0,  594,  594,    0,  594,
      600,    0,    0,    0,  600,    0,    0,    0,    0,  594,
        0,    0,    0,    0,    0,  600,    0,  594,    0,    0,
        0,    0,    0,    0,    0,  601,  594,    0,    0,    0,
      594,  601,  601,  601,  601,    0,    0,    0,  594,    0,

        0,  594,  601,    0,  601,    0,    0,  600,    0,  606,
      600,  600,    0,    0,  601,  606,  606,  606,  606,    0,
        0,    0,  601,    0,    0,    0,    0,    0,  606,    0,
        0,  601,    0,  594,    0,  601,  594,  594,    0,    0,
      608,  608,  608,  608,    0,    0,  601,    0,    0,    0,
      608,    0,    0,  608,    0,  606,  609,  609,  609,  609,
        0,    0,    0,  608,    0,    0,  609,    0,    0,  609,
      606,  608,    0,    0,    0,    0,    0,    0,  601,  609,
      608,  601,  601,    0,  608,    0,    0,  609,    0,    0,
        0,    0,    0,    0,    0,  608,  609,    0,    0,    0,

      609,    0,  606,    0,    0,  606,  606,  610,    0,    0,
        0,  609,    0,  610,  610,  610,  610,    0,    0,    0,
        0,    0,    0,    0,  610,    0,  610,    0,    0,    0,
      608,  608,  611,    0,    0,    0,  610,    0,  611,  611,
      611,  611,    0,    0,  610,    0,  609,  609,    0,  611,
        0,  611,    0,  610,    0,    0,  617,  610,    0,    0,
        0,  611,  617,  617,  617,  617,    0,    0,  610,  611,
        0,    0,    0,    0,    0,  617,    0,    0,  611,    0,
        0,    0,  611,    0,    0,    0,    0,    0,    0,  618,
        0,    0,    0,  611,    0,  618,  618,  618,  618,    0,

      610,    0,  617,  610,  610,    0,  618,    0,  618,    0,
        0,    0,    0,    0,  617,    0,    0,  617,  618,    0,
        0,    0,    0,    0,    0,  611,  618,    0,  611,  611,
        0,    0,    0,    0,    0,  618,    0,  619,    0,  618,
        0,    0,    0,  619,  619,  619,  619,    0,    0,  617,
      618,  620,  617,  617,  619,    0,  619,  620,  620,  620,
      620,    0,    0,    0,    0,    0,  619,    0,  620,    0,
      620,    0,    0,    0,  619,    0,    0,    0,    0,    0,
      620,    0,  618,  619,    0,  618,  618,  619,  620,    0,
        0,    0,    0,    0,    0,    0,  626,  620,  619,    0,

        0,  620,  626,  626,  626,  626,    0,    0,    0,    0,
        0,    0,  620,    0,    0,  626,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      619,    0,    0,  619,  619,    0,    0,    0,    0,    0,
        0,    0,  626,    0,  620,    0,    0,  620,  620,    0,
        0,    0,    0,  629,  626,    0,    0,  626,  630,  629,
      629,  629,  629,    0,  630,  630,  630,  630,    0,    0,
      629,    0,  629,    0,    0,  630,    0,  630,  635,  635,
      635,  635,  629,    0,    0,    0,    0,  630,  635,  626,
      629,  635,  626,  626,    0,  630,    0,    0,    0,  629,

        0,  635,    0,  629,  630,    0,    0,    0,  630,  635,
        0,    0,    0,    0,  629,    0,    0,    0,  635,  630,
        0,    0,  635,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  635,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  629,    0,    0,  629,
      629,  630,    0,    0,  630,  630,  631,    0,    0,    0,
        0,    0,  631,  631,  631,  631,    0,    0,  635,  635,
        0,    0,  631,  631,    0,  631,    0,    0,    0,    0,
        0,  633,    0,    0,    0,  631,    0,  633,  633,  633,
      633,    0,    0,  631,    0,    0,    0,    0,    0,    0,

      633,    0,  631,    0,    0,    0,  631,    0,    0,    0,
      633,    0,    0,    0,    0,    0,    0,  631,  633,    0,
        0,    0,    0,    0,    0,    0,    0,  633,    0,    0,
        0,  633,    0,    0,    0,  636,  636,  636,  636,    0,
        0,    0,  633,    0,    0,  636,    0,    0,  636,  631,
        0,    0,  631,  631,  632,    0,    0,    0,  636,    0,
      632,  632,  632,  632,    0,    0,  636,    0,    0,    0,
      632,  632,    0,  632,  633,  636,    0,  633,  633,  636,
        0,    0,    0,  632,    0,    0,    0,    0,    0,    0,
      636,  632,    0,    0,    0,    0,    0,    0,    0,  637,

      632,    0,    0,    0,  632,  637,  637,  637,  637,    0,
        0,    0,    0,    0,    0,  632,  637,    0,  637,    0,
        0,    0,    0,    0,  638,  636,  636,    0,  637,    0,
      638,  638,  638,  638,    0,    0,  637,    0,    0,    0,
        0,  638,    0,  638,    0,  637,    0,  632,  644,  637,
      632,  632,    0,  638,  644,  644,  644,  644,    0,    0,
      637,  638,    0,    0,    0,    0,    0,  644,    0,    0,
      638,    0,    0,    0,  638,    0,    0,    0,    0,    0,
        0,  645,    0,    0,    0,  638,    0,  645,  645,  645,
      645,    0,  637,    0,  644,  637,  637,    0,  645,    0,

      645,    0,    0,    0,    0,    0,  644,    0,    0,  644,
      645,    0,    0,    0,    0,    0,    0,  638,  645,    0,
      638,  638,    0,    0,    0,    0,    0,  645,    0,  646,
        0,  645,    0,    0,    0,  646,  646,  646,  646,    0,
        0,  644,  645,  647,  644,  644,  646,    0,  646,  647,
      647,  647,  647,    0,    0,    0,    0,    0,  646,    0,
      647,    0,  647,    0,    0,    0,  646,    0,    0,    0,
        0,    0,  647,    0,  645,  646,    0,  645,  645,  646,
      647,    0,    0,    0,    0,    0,    0,    0,  650,  647,
      646,    0,    0,  647,  650,  650,  650,  650,    0,    0,

        0,    0,    0,    0,  647,    0,    0,  650,    0,    0,
        0,  653,    0,    0,    0,    0,    0,  653,  653,  653,
      653,    0,  646,    0,    0,  646,  646,    0,    0,    0,
      653,    0,    0,    0,  650,    0,  647,    0,    0,  647,
      647,    0,    0,    0,    0,  651,  650,    0,    0,  650,
        0,  651,  651,  651,  651,    0,    0,  653,    0,  655,
        0,    0,  651,    0,  651,  655,  655,  655,  655,    0,
        0,    0,  653,    0,  651,    0,    0,    0,  655,    0,
        0,  650,  651,    0,  650,  650,    0,    0,    0,    0,
      656,  651,    0,    0,    0,  651,  656,  656,  656,  656,

        0,    0,    0,    0,  653,  655,  651,  653,  653,  656,
        0,    0,    0,    0,    0,  658,    0,    0,    0,    0,
      655,  658,  658,  658,  658,    0,    0,  660,  660,  660,
      660,    0,    0,    0,  658,    0,  656,  660,  651,    0,
      660,  651,  651,    0,    0,    0,    0,    0,    0,    0,
      660,  656,  655,    0,    0,  655,  655,    0,  660,    0,
        0,  658,    0,    0,    0,    0,    0,  660,    0,    0,
        0,  660,    0,    0,    0,    0,  658,    0,    0,    0,
        0,    0,  660,  656,    0,    0,  656,  656,    0,    0,
      661,  661,  661,  661,    0,    0,    0,    0,    0,    0,

      661,    0,    0,  661,    0,    0,    0,    0,  658,    0,
        0,  658,  658,  661,    0,    0,    0,  660,  660,    0,
        0,  661,    0,    0,    0,    0,    0,    0,    0,  662,
      661,    0,    0,    0,  661,  662,  662,  662,  662,    0,
        0,    0,    0,    0,    0,  661,  662,    0,  662,    0,
        0,    0,    0,    0,  663,    0,    0,    0,  662,    0,
      663,  663,  663,  663,    0,    0,  662,    0,    0,    0,
        0,  663,    0,  663,    0,  662,    0,    0,    0,  662,
      661,  661,    0,  663,    0,    0,    0,    0,    0,    0,
      662,  663,    0,    0,    0,    0,    0,    0,    0,  667,

      663,    0,    0,    0,  663,  667,  667,  667,  667,    0,
        0,    0,    0,    0,    0,  663,  667,    0,  667,    0,
        0,    0,  662,    0,  668,  662,  662,    0,  667,    0,
      668,  668,  668,  668,    0,    0,  667,    0,    0,    0,
        0,  668,    0,  668,    0,  667,    0,  663,  674,  667,
      663,  663,    0,  668,  674,  674,  674,  674,    0,    0,
      667,  668,    0,    0,    0,    0,    0,  674,    0,  676,
      668,    0,    0,    0,  668,  676,  676,  676,  676,    0,
        0,    0,    0,    0,    0,  668,    0,    0,  676,    0,
        0,    0,  667,    0,  674,  667,  667,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  674,
        0,    0,    0,    0,    0,  676,    0,  668,    0,    0,
      668,  668,    0,    0,    0,    0,    0,    0,    0,    0,
      676,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  674,    0,    0,  674,  674,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  676,    0,    0,  676,  676,  688,  688,  688,
      688,  688,  688,  688,  688,  689,    0,    0,  689,  689,
      690,  690,  690,  690,  690,  690,  690,  690,  691,  691,
      692,  692,  692,    0,  692,  692,  693,  693,  693,    0,

      693,  693,  694,    0,    0,  694,  694,  695,  695,  695,
        0,  695,  695,  696,    0,    0,    0,    0,  696,  697,
      697,    0,  697,  697,  698,  698,  698,  698,  698,  698,
      699,  699,    0,  699,  699,  700,  700,  700,    0,  700,
      700,  701,  701,  701,  701,  701,  701,  702,    0,    0,
        0,    0,  702,  703,  703,    0,    0,  703,  704,  704,
      704,  704,  704,  704,  705,  705,    0,  705,  705,  706,
      706,  707,  707,    0,    0,  707,  708,  708,  708,    0,
      708,  708,  709,  709,  709,  709,  709,  709,  710,  710,
        0,  710,  710,  711,    0,    0,    0,  711,  712,  712,

      712,    0,  712,  712,  713,  713,  713,    0,  713,  713,
      714,  714,  714,  714,  714,  714,  715,  715,  715,    0,
      715,  715,  716,  716,  716,  716,  716,  716,  717,  717,
      717,    0,  717,  717,  718,  718,  718,    0,  718,  718,
      719,  719,    0,  719,  719,  720,  720,  720,    0,  720,
      720,  720,  721,  721,    0,  721,  721,  722,    0,    0,
        0,  722,  723,  723,  723,    0,  723,  724,    0,    0,
        0,  724,  725,  725,  725,    0,  725,  725,  726,  726,
        0,  726,  726,  727,  727,  727,    0,  727,  727,  728,
      728,  728,  728,  728,  728,  729,    0,    0,    0,  729,

      730,  730,  730,    0,  730,  731,    0,    0,    0,    0,
      731,  732,    0,    0,    0,  732,  733,  733,  733,    0,
      733,  733,  734,    0,    0,    0,  734,  735,  735,  735,
        0,    0,  735,  736,    0,    0,    0,    0,  736,  737,
      737,    0,  737,  737,  738,    0,    0,    0,    0,  738,
      739,  739,    0,    0,  739,  740,  740,  740,    0,  740,
      740,  741,  741,  741,  741,  741,  741,  742,  742,    0,
        0,  742,  743,  743,  743,    0,  743,  743,  744,  744,
      744,  744,  744,  744,  745,  745,  745,    0,  745,  745,
      746,  746,    0,  746,  746,  747,  747,  747,    0,  747,

      747,  748,  748,  748,  748,  748,  748,  749,  749,  749,
        0,  749,  749,  750,  750,  750,  750,  750,  750,  751,
      751,  751,    0,    0,  751,  752,  752,    0,    0,  752,
      753,    0,    0,    0,  753,  754,  754,  754,    0,    0,
      754,  755,    0,    0,    0,    0,  755,  756,  756,  756,
        0,  756,  756,  757,    0,    0,    0,  757,  758,  758,
      758,  758,  758,  759,  759,  759,    0,  759,  759,  760,
      760,  760,    0,    0,  760,  761,  761,    0,    0,  761,
      762,    0,  762,    0,  762,  763,  763,    0,  763,  763,
      764,    0,    0,    0,  764,  765,  765,  765,    0,    0,

      765,  766,    0,    0,    0,    0,  766,  767,  767,  767,
        0,  767,  767,  768,    0,    0,    0,    0,  768,  769,
      769,    0,    0,  769,  770,  770,    0,  770,  770,  771,
      771,  771,  771,  771,  771,  772,  772,    0,  772,  772,
      773,    0,    0,    0,  773,  774,  774,  774,    0,  774,
      775,    0,    0,    0,  775,  776,  776,  776,    0,  776,
      776,  777,  777,  777,    0,    0,  777,  778,  778,  778,
      778,    0,  778,  779,    0,    0,    0,    0,  779,  780,
      780,  780,    0,  780,  780,  781,  781,  781,  781,  781,
      781,  782,  782,  782,  782,  782,  782,  783,  783,  783,

      783,  783,  783,  784,  784,  784,    0,  784,  784,  785,
        0,    0,    0,    0,  785,  786,  786,  786,    0,    0,
      786,  787,  787,    0,    0,  787,  788,  788,    0,  788,
      788,  789,  789,  789,    0,    0,  789,  790,  790,  790,
        0,  790,  790,  791,    0,    0,    0,    0,  791,  792,
      792,  792,    0,    0,  792,  793,  793,  793,    0,    0,
      793,  794,  794,  794,    0,  794,  794,  795,  795,  795,
      795,  795,  795,  796,  796,    0,    0,  796,  797,  797,
        0,  797,  797,  798,  798,    0,    0,  798,  799,  799,
        0,  799,  799,  800,  800,  800,    0,  800,  800,  801,

      801,  801,  801,  801,  801,  802,  802,  802,    0,  802,
      802,  803,  803,  803,    0,  803,  803,  804,  804,  804,
      804,  804,  804,  805,  805,  805,    0,    0,  805,  806,
      806,    0,    0,  806,  807,    0,    0,    0,  807,  808,
      808,  808,    0,    0,  808,  809,    0,    0,    0,    0,
      809,  810,  810,  810,    0,  810,  810,  811,  811,  811,
        0,    0,  811,  812,  812,  812,  812,    0,  812,  813,
      813,    0,  813,  813,  814,  814,  814,    0,  814,  814,
      815,  815,  815,    0,  815,  815,  816,  816,  816,    0,
      816,  816,  817,  817,    0,    0,  817,  818,  818,  818,

        0,    0,  818,  819,  819,    0,    0,  819,  820,  820,
      820,    0,  820,  820,  821,  821,  821,  821,  821,  821,
      822,  822,  822,    0,    0,  822,  823,  823,  823,  823,
      823,  823,  824,  824,    0,    0,  824,  825,  825,  825,
        0,    0,  825,  826,  826,  826,    0,  826,  826,  827,
      827,  827,    0,    0,  827,  828,  828,    0,    0,  828,
      829,  829,  829,    0,  829,  829,  830,  830,  830,  830,
      830,  830,  831,  831,    0,    0,  831,  832,  832,  832,
        0,    0,  832,  833,    0,    0,    0,  833,  834,  834,
      834,    0,  834,  834,  835,  835,  835,    0,  835,  835,

      836,    0,    0,    0,    0,  836,  837,  837,  837,    0,
        0,  837,  838,  838,    0,    0,  838,  839,  839,    0,
      839,  839,  840,  840,  840,  840,    0,  840,  841,  841,
        0,    0,  841,  842,  842,  842,    0,  842,  842,  843,
      843,  843,  843,  843,  843,  844,  844,    0,    0,  844,
      845,  845,  845,    0,    0,  845,  846,  846,  846,    0,
        0,  846,  847,    0,    0,    0,  847,  848,  848,  848,
        0,  848,  849,  849,  849,    0,  849,  849,  850,  850,
      850,  850,  850,  850,  851,  851,  851,    0,  851,  851,
      852,  852,    0,    0,  852,  853,  853,  853,    0,    0,

      853,  854,  854,  854,    0,  854,  854,  855,  855,  855,
        0,    0,  855,  856,    0,    0,    0,  856,  857,  857,
      857,    0,  857,  858,  858,  858,    0,  858,  858,  859,
        0,    0,    0,  859,  860,  860,  860,    0,    0,  860,
      861,  861,  861,    0,  861,  861,  862,  862,  862,    0,
      862,  862,  863,  863,    0,    0,  863,  864,  864,  864,
        0,    0,  864,  865,  865,    0,    0,  865,  866,  866,
      866,    0,  866,  866,  867,  867,  867,  867,  867,  867,
      868,  868,  868,    0,    0,  868,  869,    0,    0,    0,
      869,  870,  870,  870,    0,  870,  871,  871,  871,    0,

      871,  871,  872,    0,    0,    0,  872,  873,  873,  873,
        0,    0,  873,  874,  874,  874,    0,  874,  874,  875,
      875,  875,    0,  875,  875,  876,    0,    0,    0,  876,
      877,  877,  877,    0,    0,  877,  878,  878,  878,    0,
      878,  878,  879,  879,    0,    0,  879,  880,  880,  880,
        0,    0,  880,  881,  881,    0,    0,  881,  882,  882,
      882,    0,    0,  882,  883,  883,  883,    0,    0,  883,
      884,    0,    0,    0,  884,  885,  885,  885,    0,  885,
      886,  886,  886,    0,  886,  886,  887,  887,  887,    0,
      887,  887,  888,  888,    0,    0,  888,  889,  889,  889,

        0,    0,  889,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,
      687,  687,  687,  687,  687,  687,  687,  687,  687,  687,

      687,  687,  687,  687,  687
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
/* definitions */
/*%option header-file="chalk-lexer-rpn.flex.h"*/
  #include "chalk-parser-rpn.h"
  #include "CHParserContext.h"
  #include "CHUtils.h"
  #define YY_NO_INPUT
  #define YY_INIT yy_rpnset_column(0, scanner);
  #define YY_USER_ACTION {NSRange currentRange = NSMakeRange(yy_rpnget_column(yyscanner), yy_rpnget_leng(yyscanner)); yy_rpnset_column((int)(currentRange.location+currentRange.length), yyscanner);
  #define YY_BREAK } break;
  extern void tokenizerEmit_rpn(int tokenId, const unsigned char* input, size_t length, NSRange range, CHParserContext* context);
  //#define YY_INPUT(buf,result,max_size) result = [((CHParserContext*)yy_rpnget_extra(yyscanner)).parserFeeder feedBuffer:buf length:max_size]
  #define ECHO {CHParserContext* context = yy_rpnget_extra(yyscanner); context.lastTokenRange = NSMakeRange(yy_rpnget_column(yyscanner), yy_rpnget_leng(yyscanner)); context.stop = YES; yyterminate();}
/*IDENTIFIER {SYMBOL_PI}|{SYMBOL_INFINITY}|{SYMBOL_SQRT}|{SYMBOL_CBRT}|(?i:[_a-z]+[_a-z0-9]*)*/

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#define YY_EXTRA_TYPE void*

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yy_rpnlex_init (yyscan_t* scanner);

int yy_rpnlex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yy_rpnlex_destroy ( yyscan_t yyscanner );

int yy_rpnget_debug ( yyscan_t yyscanner );

void yy_rpnset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yy_rpnget_extra ( yyscan_t yyscanner );

void yy_rpnset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yy_rpnget_in ( yyscan_t yyscanner );

void yy_rpnset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yy_rpnget_out ( yyscan_t yyscanner );

void yy_rpnset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yy_rpnget_leng ( yyscan_t yyscanner );

char *yy_rpnget_text ( yyscan_t yyscanner );

int yy_rpnget_lineno ( yyscan_t yyscanner );

void yy_rpnset_lineno ( int _line_number , yyscan_t yyscanner );

int yy_rpnget_column  ( yyscan_t yyscanner );

void yy_rpnset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yy_rpnwrap ( yyscan_t yyscanner );
#else
extern int yy_rpnwrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yy_rpnlex (yyscan_t yyscanner);

#define YY_DECL int yy_rpnlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yy_rpnensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_rpn_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_rpn_load_buffer_state(yyscanner );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 688 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9504 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INDEX_RANGE_OPERATOR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INDEX_RANGE_OPERATOR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INDEX_RANGE_JOKER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INDEX_RANGE_JOKER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_STRING_QUOTED(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_STRING_QUOTED, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_PARENTHESIS_LEFT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_PARENTHESIS_LEFT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_PARENTHESIS_RIGHT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_PARENTHESIS_RIGHT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_PLUS(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_PLUS, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_PLUS2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_PLUS2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_MINUS(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_MINUS, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_MINUS2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_MINUS2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_MINUS_UNARY(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_MINUS_UNARY, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_TIMES(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_TIMES, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_TIMES2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_TIMES2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_DIVIDE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_DIVIDE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_DIVIDE2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_DIVIDE2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_POW(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_POW, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_POW2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_POW2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_SQRT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_SQRT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_SQRT2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_SQRT2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_CBRT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_CBRT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_CBRT2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_CBRT2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_FACTORIAL(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_FACTORIAL, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_FACTORIAL2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_FACTORIAL2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_DEGREE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_DEGREE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_DEGREE2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_DEGREE2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_UNCERTAINTY(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_UNCERTAINTY, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_ABS(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_ABS, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_NOT(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_NOT, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_NOT2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_NOT2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_LEQ(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_LEQ, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_LEQ2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_LEQ2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_GEQ(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_GEQ, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_GEQ2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_GEQ2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_LOW(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_LOW, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_LOW2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_LOW2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_GRE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_GRE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_GRE2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_GRE2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_EQU(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_EQU, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_EQU2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_EQU2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_NEQ(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_NEQ, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_NEQ2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_NEQ2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_AND(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_AND, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_AND2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_AND2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_OR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_OR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_OR2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_OR2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_XOR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_XOR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_XOR2(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_XOR2, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_SHL(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_SHL, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_SHR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_SHR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_ASSIGN(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_ASSIGN, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_OPERATOR_ASSIGN_DYNAMIC(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_OPERATOR_ASSIGN_DYNAMIC, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INTERVAL_LEFT_DELIMITER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTERVAL_LEFT_DELIMITER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INTERVAL_ITEM_SEPARATOR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTERVAL_ITEM_SEPARATOR, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INTERVAL_RIGHT_DELIMITER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTERVAL_RIGHT_DELIMITER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_LIST_LEFT_DELIMITER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_LIST_LEFT_DELIMITER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 56:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_LIST_RIGHT_DELIMITER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_LIST_RIGHT_DELIMITER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 57:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_ENUMERATION_SEPARATOR(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_ENUMERATION_SEPARATOR, (const unsigned char*)yytext, yyleng, 
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 58:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_IF(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_IF, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_THEN(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_THEN, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_ELSE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_ELSE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_QUESTION(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_QUESTION, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_ALTERNATE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_ALTERNATE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_IDENTIFIER(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_IDENTIFIER, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  DebugLogStatic(1, @"INTEGER_PER_FRACTION(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTEGER_PER_FRACTION, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  DebugLogStatic(1, @"REAL_PER_FRACTION(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_REAL_PER_FRACTION, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  printf("CHALK_LEMON_RPN_INTEGER_POSITIVE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_INTEGER_POSITIVE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  printf("REAL_POSITIVE(%s)\n", (const unsigned char*)yytext);
  tokenizerEmit_rpn(CHALK_LEMON_RPN_REAL_POSITIVE, (const unsigned char*)yytext, yyleng,
                currentRange, yyget_extra(yyscanner));}               
	YY_BREAK
case 68:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yy_rpnlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yy_rpnwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yy_rpnlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_rpnrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yy_rpnrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yy_rpnrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 101);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 688 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 101;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 688 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 687);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yy_rpnrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yy_rpnwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yy_rpnrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yy_rpnensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_rpn_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_rpn_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_rpn_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_rpn_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yy_rpnpop_buffer_state();
	 *		yy_rpnpush_buffer_state(new_buffer);
     */
	yy_rpnensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_rpn_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yy_rpnwrap()) processing, but the only time this flag
	 * is looked at is after yy_rpnwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_rpn_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_rpn_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yy_rpnalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_rpn_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_rpnalloc((yy_size_t) (b->yy_buf_size + 2) ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_rpn_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_rpn_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_rpn_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_rpn_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_rpnfree((void *) b->yy_ch_buf ,yyscanner );

	yy_rpnfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yy_rpnrestart() or at EOF.
 */
    static void yy_rpn_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_rpn_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_rpn_init_buffer was _probably_
     * called from yy_rpnrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_rpn_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_rpn_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yy_rpnpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yy_rpnensure_buffer_stack(yyscanner);

	/* This block is copied from yy_rpn_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_rpn_switch_to_buffer. */
	yy_rpn_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yy_rpnpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_rpn_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_rpn_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yy_rpnensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yy_rpnalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yy_rpnensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yy_rpnrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yy_rpnensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_rpn_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yy_rpnalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_rpn_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_rpn_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yy_rpnlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_rpn_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_rpn_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_rpn_scan_bytes(yystr,(int) strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yy_rpnlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_rpn_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yy_rpnalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_rpn_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_rpn_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_rpn_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yy_rpnget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yy_rpnget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yy_rpnget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yy_rpnget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yy_rpnget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yy_rpnget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yy_rpnget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yy_rpnset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yy_rpnset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yy_rpnset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yy_rpnset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yy_rpnset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_rpn_switch_to_buffer
 */
void yy_rpnset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yy_rpnset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yy_rpnget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yy_rpnset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yy_rpnlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yy_rpnlex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yy_rpnalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yy_rpnlex_init_extra has the same functionality as yy_rpnlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yy_rpnalloc in
 * the yyextra field.
 */
int yy_rpnlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yy_rpnset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yy_rpnalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yy_rpnset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yy_rpnlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yy_rpnlex_init()
     */
    return 0;
}

/* yy_rpnlex_destroy is for both reentrant and non-reentrant scanners. */
int yy_rpnlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_rpn_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yy_rpnpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yy_rpnfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yy_rpnfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yy_rpnlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yy_rpnfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yy_rpnalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yy_rpnrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yy_rpnfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yy_rpnrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

void chalk_scan_rpn_buffer(const char* bytes, NSUInteger length, CHParserContext* context)
{
  yyscan_t scanner;
  yy_rpnlex_init_extra(context, &scanner);
  yy_rpn_scan_bytes(bytes, length, scanner);
  yy_rpnset_column(0, scanner);
  yy_rpnlex(scanner);
  yy_rpnlex_destroy(scanner);
}
//end chalk_scan_rpn_buffer()

void chalk_scan_rpn_file(FILE* file, CHParserContext* context)
{
  yyscan_t scanner;
  yy_rpnlex_init_extra(context, &scanner);
  yy_rpnrestart(file, scanner);
  yy_rpnset_column(0, scanner);
  yy_rpnlex(scanner);
  yy_rpnlex_destroy(scanner);
}
//end chalk_scan_rpn_file()

void chalk_scan_rpn_fileDescriptor(int fd, CHParserContext* context)
{
  FILE* file = fdopen(fd, "rb");
  chalk_scan_rpn_file(file, context);
  fclose(file);
}
//end chalk_scan_rpn_fileDescriptor()

void chalk_scan_rpn_nsstring(NSString* input, CHParserContext* context)
{
  const char* bytes = [input UTF8String];
  NSUInteger length = [input lengthOfBytesUsingEncoding:NSUTF8StringEncoding];
  chalk_scan_rpn_buffer(bytes, length, context);
}
//end chalk_scan_rpn_nsstring()

void chalk_scan_rpn(CHParserContext* context)
{
  yyscan_t scanner;
  yy_rpnlex_init_extra(context, &scanner);
  yy_rpn_scan_buffer(0, 0, scanner);//no initial data, it will be queried by YY_INPUT
  yy_rpnlex(scanner);//won't return until 0 is returned by YY_INPUT
  yy_rpnlex_destroy(scanner);
}
//end chalk_scan_rpn()

